This is efaq.info, produced by makeinfo version 6.8 from efaq.texi.

Copyright © 2001–2021 Free Software Foundation, Inc.
Copyright © 1994, 1995, 1996, 1997, 1998, 1999, 2000 Reuven M. Lerner
Copyright © 1992, 1993 Steven Byrnes
Copyright © 1990, 1991, 1992 Joseph Brian Wells

     This list of frequently asked questions about GNU Emacs with
     answers (“FAQ”) may be translated into other languages, transformed
     into other formats (e.g., Texinfo, Info, HTML, PDF), and updated
     with new information.

     The same conditions apply to any derivative of the FAQ as apply to
     the FAQ itself.  Every copy of the FAQ must include this notice or
     an approved translation, information on who is currently
     maintaining the FAQ and how to contact them (including their e-mail
     address), and information on where the latest version of the FAQ is
     archived (including FTP information).

     The FAQ may be copied and redistributed under these conditions,
     except that the FAQ may not be embedded in a larger literary work
     unless that work itself allows free copying and redistribution.

     [This version has been heavily edited since it was included in the
     Emacs distribution in 1999.]
INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Emacs FAQ: (efaq).         Frequently Asked Questions about Emacs.
END-INFO-DIR-ENTRY


File: efaq.info,  Node: Top,  Next: FAQ notation,  Prev: (dir),  Up: (dir)

The GNU Emacs FAQ
*****************

これはGNU EmacsのFAQ(Frequently Asked Questions: よくある質問)です。

   このFAQはGNU Emacsの一部として保守されています。何か間違いを見つけた
り提案がある場合には、それらを報告するために‘M-x report-emacs-bug’を使う
ようお願いします。

   これはEmacs 27.2とともに配布されているバージョンのFAQであり、主にその
バージョンについて記述しています。それより古いバージョンについての情報が
あったとしても、(今となっては歴史的な関心のためだけとなった)非常に古いリ
リースに関する詳細は削除されています。これらに興味がある場合には古いバー
ジョンのEmacsに同梱されているバージョンのFAQ、あるいはこのドキュメントの
Emacsソースレポジトリのヒストリーを参照してください。

   Emacsのリリースバージョンはとても安定しているので、常に最新リリースの
実行をお勧めします。

   このFAQは非常に頻繁に更新されている訳ではありません。Emacsについての
疑問がある場合には、Emacsマニュアルが最良の出発点であることが多々ありま
す。

   Copyright © 2001–2021 Free Software Foundation, Inc.
Copyright © 1994, 1995, 1996, 1997, 1998, 1999, 2000 Reuven M. Lerner
Copyright © 1992, 1993 Steven Byrnes
Copyright © 1990, 1991, 1992 Joseph Brian Wells

     This list of frequently asked questions about GNU Emacs with
     answers (“FAQ”) may be translated into other languages, transformed
     into other formats (e.g., Texinfo, Info, HTML, PDF), and updated
     with new information.

     The same conditions apply to any derivative of the FAQ as apply to
     the FAQ itself.  Every copy of the FAQ must include this notice or
     an approved translation, information on who is currently
     maintaining the FAQ and how to contact them (including their e-mail
     address), and information on where the latest version of the FAQ is
     archived (including FTP information).

     The FAQ may be copied and redistributed under these conditions,
     except that the FAQ may not be embedded in a larger literary work
     unless that work itself allows free copying and redistribution.

     [This version has been heavily edited since it was included in the
     Emacs distribution in 1999.]

* Menu:

* FAQ notation::
* General questions::
* Getting help::
* Status of Emacs::
* Common requests::
* Bugs and problems::
* Compiling and installing Emacs::
* Finding Emacs and related packages::
* Key bindings::
* Alternate character sets::
* Mail and news::
* Concept index::


File: efaq.info,  Node: FAQ notation,  Next: General questions,  Up: Top

1 FAQ notation
**************

このチャプターではGNU Emacs FAQ、並びにEmacsドキュメントで使用する表記に
ついて説明します。これがFAQを読む最初の機会の場合、あるいはFAQで使用され
ている表記や用語について混乱したらこのセクションを参照してください。

* Menu:

* Basic keys::
* Extended commands::
* Emacs manual::
* File-name conventions::
* Common acronyms::


File: efaq.info,  Node: Basic keys,  Next: Extended commands,  Up: FAQ notation

1.1 What do these mean: ‘C-h’, ‘C-M-a’, <RET>, ‘<ESC> a’, etc.?
===============================================================

   • ‘C-x’:<Control>キーを押したまま‘x’キーを押下する

   • ‘M-x’: <Meta>キー(コンピューターに<Meta>キーがなければ*note No Meta
     key::を参照)を押したまま‘x’キーを押下する

   • ‘M-C-x’: <Control>と<Meta>の両方を押したまま‘x’キーを押下する

   • ‘C-M-x’: 上記と同義

   • <LFD>: ラインフィードまたは改行; ‘C-j’と同じ

   • <RET>: <Return>のこと、<Enter>と記される場合もあり; ‘C-m’と同じ

   • <DEL>: <Delete>のこと、通常は<Backspace>と*同じではない*; ‘C-?’と同
     じ (deleteでEmacsのヘルプが呼び出される場合には*note Backspace
     invokes help::を参照)

   • <ESC>: Escapeのこと; ‘C-[’と同じ

   • <TAB>: Tabのこと; ‘C-i’と同じ

   • <SPC>: Spaceバー

   1つのキー(およびいくつかの単一キーシーケンス)より長いキーシーケンスは
以下のようにクォート内部や行にその文字自体を記述します:

       ‘M-x frobnicate-while-foo <RET>’

このようなキーシーケンス内にある実際のスペースはすべて無視する必要があり
ます; 実際にスペースキーの押下を意味するのは<SPC>だけです。

   ‘C-x’ (‘C-?’は例外)により送信されるASCIIコードは単に‘x’を押下時に送信
される値から96(大文字の‘X’では64)を減じた値であり、これは0から31になるで
しょう。UnixおよびGNU/Linuxの端末においては、‘M-x’が送信するASCIIコード
は単に‘x’を押下時に送信される値に128を加えた値になります。基本的には
<Control>はビット5とビット6をオフにして、<Meta>はビット7をオンにします
(1)。

   ‘C-?’ (別名<DEL>)はASCIIコードの127です。127はビットの5と6がどちらも
オンなので、‘C-?’を“control”キーと呼ぶのは誤った呼び方です。更にほとんど
ありませんが‘C-?’がASCIIコードの127を生成するキーボードも存在します。

   *note (emacs)Keys::を参照してください。

   ---------- Footnotes ----------

   (1) DOSおよびWindowsの端末では<Meta>キー押下時にビット7をセットしませ
ん。


File: efaq.info,  Node: Extended commands,  Next: Emacs manual,  Prev: Basic keys,  Up: FAQ notation

1.2 What does ‘M-x COMMAND’ mean?
=================================

‘M-x COMMAND’は‘M-x’をタイプしてからコマンドの名前、その後に<RET>をタイ
プする(‘M-x’や<RET>の意味があやふやなら*Note Basic keys::を参照)。

   (デフォルトでは)‘M-x’はコマンド‘execute-extended-command’を呼び出しま
す。このコマンドによってコマンド名を覚えていれば任意のEmacsコマンドを実
行できます。コマンド名を覚えることができなければ補完には<TAB>や<SPC>、利
用可能なコマンドの一覧は‘?’、以前に入力したコマンドの確認には‘M-p’と
‘M-n’(または上下の矢印)をタイプできます。Emacsの“コマンド(command)”とは
“インタラクティブ(interactive: 対話的)”なEmacs関数のことです。

   システム管理者によって‘execute-extended-command’呼び出しが別のキーに
バインドされているかもしれません。‘Do’とラベル付けされたキーをもつような
キーボードなら、これを行うための良い候補になります。

   非インタラクティブなEmacs関数の実行が必要なら*note Evaluating Emacs
Lisp code::を参照してください。


File: efaq.info,  Node: Emacs manual,  Next: File-name conventions,  Prev: Extended commands,  Up: FAQ notation

1.3 How do I read topic XXX in the Emacs manual?
================================================

わたしたちがEmacsマニュアル内のあるTOPICを参照する際には、‘C-h i m emacs
<RET> m TOPIC <RET>’とタイプすれば(壊れていなければ)そのマニュアルノード
の中を読むことができます。

   これはInfo、つまりGNUハイパーテキストドキュメントブラウザを呼び出しま
す。Infoの使用方法をまだご存知なければ、Info内で‘?’をタイプしてください
。

   わたしたちがTOPIC:SUBTOPICで参照する場合には‘C-h i m emacs <RET> m
TOPIC <RET> m SUBTOPIC <RET>’とタイプしてください。

   これらのコマンドが期待した通りに機能しなければ、システム管理者が
Infoファイルをインストールしていないか、正しくインストールされていないか
もしれません。この場合には苦情を申し立てるべきでしょう。

   Info内でこのFAQを読んでいるなら、リファレンス上で単に<RET>を押下すれ
ばフォローできます。

   Emacsマニュアルのハードコードをご所望なら*Note Getting a printed
manual::を参照してください。


File: efaq.info,  Node: File-name conventions,  Next: Common acronyms,  Prev: Emacs manual,  Up: FAQ notation

1.4 What are ‘src/config.h’, ‘site-lisp/default.el’, etc.?
==========================================================

これらはEmacsとともに配布されるファイルです。Emacsディストリビューション
は‘etc’、‘lisp’、‘src’等のサブディレクトリーに分かれています。これらの内
のいくつか(‘etc’や‘lisp’など)はインストール済みEmacsとソースの両方に存在
しますが、ソース内でのみ見いだせるものもあります(‘src’など)。

   ineEmacsを使っているもののシステム上のどこにあるか判らない場合には、
Emacsを起動して‘C-h v data-directory <RET>’とタイプしてください。表示さ
れるディレクトリー名は、‘etc’ディレクトリーがインストールされたフルパス
になるでしょう(このフルパスはEmacs変数‘data-directory’に記録されており、
‘C-h v’でこの値と変数のドキュメントが表示される)。

   Infoディレクトリーはの場所(Infoドキュメントが格納されている場所)変数
‘Info-default-directory-list’に保持されています。この変数の値(ディレクト
リー名のリスト)を確認するには‘C-h v Info-default-directory-list <RET>’を
使用してください。このリスト内にある最後のディレクトリーに、恐らくもっと
も多くのInfoファイルが格納されているでしょう。デフォルトではEmacsの
Infoドキュメントは‘/usr/local/share/info’にあります。

   ‘etc’ディレクトリー内にあるいくつかのファイルに関する情報については
*note Informational files for Emacs::を参照してください。


File: efaq.info,  Node: Common acronyms,  Prev: File-name conventions,  Up: FAQ notation

1.5 What are FSF, GNU, RMS, and GPL?
====================================

FSF
     フリーソフトウェア財団(Free Software Foundation)

GNU
     GNU’s Not Unix(GNUはUnixではない)

RMS
     Richard Matthew Stallman

GPL
     GNU 一般公衆利用許諾書(GNU GENERAL PUBLIC LICENSE)

   フリーソフトウェア財団(Free Software Foundation)のタイトルにある“フリ
ー(free)”とは、“ゼロコスト(zero cost)”ではなく“自由(freedom)”を意図した
単語です。GPLの対象となるソフトウェアにたいして、もし望むなら誰でも対価
を請求できます。とはいえ実際にはGPLが課した自由により、誰でもGPLソフトウ
ェアの再販や譲渡を行う権利を有するので、常に誰か他の人からより少ない金額
でソフトウェアを入手できることから低価格へとつながります。


File: efaq.info,  Node: General questions,  Next: Getting help,  Prev: FAQ notation,  Up: Top

2 General questions
*******************

このチャプターではEmacs、フリーソフトウェア財団や関連する組織にたいする
一般的な問いが含まれています。

* Menu:

* Real meaning of copyleft::
* Guidelines for newsgroup postings::
* Newsgroup archives::
* Reporting bugs::
* Unsubscribing from Emacs lists::
* Contacting the FSF::


File: efaq.info,  Node: Real meaning of copyleft,  Next: Guidelines for newsgroup postings,  Up: General questions

2.1 What is the real legal meaning of the GNU copyleft?
=======================================================

GNU 一般公衆利用許諾書、いわゆるGPL(コピーレフト)の真の法的な意味合いは
、裁判官がその有効性と範囲を裁定した場合にのみ明らかになります。判例とし
て定められるようなGPLが関与する著作権侵害の訴訟はこれまでに一度もありま
せんでした。GPL条件への違反によって企業への訴訟が起こされましたが、これ
までのところすべてが法廷外で(原告に有利に)和解されています。この問題に関
しての議論は、どうかこの問題について大々的に罵り合うために作成されたニュ
ースグループ<news:gnu.misc.discuss>で行ってください。

   RMSは記しています:

     GNUコピーレフトの法的な意味は、Emacsがフリーソフトウェアプロジェク
     トであり、Emacsに関連する作業もフリーソフトウェアであるべくだという
     精神ほど重要ではありません。“フリー(free)”とはすべてのユーザーが
     Emacsを学び、共有して、変更や改善を行う自由(freedom)をもっていると
     いう意味です。すべての人がこの自由を有することを保証するために、あ
     なたがEmacsのあるバージョンや関連プログラムを配布する際には、それを
     受け取る人にソースコードも渡すことによって、あなたが楽しんだのと同
     じ自由を分け与えてください。


File: efaq.info,  Node: Guidelines for newsgroup postings,  Next: Newsgroup archives,  Prev: Real meaning of copyleft,  Up: General questions

2.2 What are appropriate messages for the various Emacs newsgroups?
===================================================================

Emacsメーリングリストのはthe Emacs Savannah page
(https://savannah.gnu.org/mail/?group=emacs)に記述があります。それらのう
ちのいくつかはニュースグループへゲートウェイされています。

   Emacsプログラム全般に関する議論はニュースグループ<news:comp.emacs>、
<news:gnu.emacs.help>はGNU Emacsに特化したニュースグループです。したがっ
てある問いにたいして適切なニュースグループは1つだけなので、両方のグルー
プへのクロスポストには意味がありません。

   問題について大いに罵り合うために作成された<news:gnu.misc.discuss>を除
いて、“非フリー(non-free)”なソフトウェアを推奨するようなメッセージは
‘gnu.*’ニュースグループのすべてにおいて受け入れ難いものとみなされます。
“非フリー”なソフトウェアにはエンドユーザーが自由にソースコードを改変した
り拡張機能の取り替えができないすべてのソフトウェアが含まれます。そのよう
なソフトウェアを推奨するフォローアップを投稿する際には、‘Newsgroups:’行
から‘gnu.*’グループを削除するよう注意してください。

   <news:gnu.emacs.bug>はバグレポートを目にする場所ですが、このニュース
グループに直接バグレポートを投稿することは避けてください(*note Reporting
bugs::を参照)。

   最後にGNUのメーリングリストやニュースグループに投稿する前にGNU Kind
Communications Guidelines
(https://www.gnu.org/philosophy/kind-communication.html)を一読することを
お勧めします。


File: efaq.info,  Node: Newsgroup archives,  Next: Reporting bugs,  Prev: Guidelines for newsgroup postings,  Up: General questions

2.3 Where can I get old postings to <news:gnu.emacs.help> and other GNU groups?
===============================================================================

網羅する範囲において意図していない齟齬があるかもしれませんが、FSFはGNUメ
ーリングリストすべてのアーカイブを長年保守してきました。このアーカイブが
the GNU mail archive (https://lists.gnu.org/r/)でウェブ上で閲覧できます
。

   Google (http://groups.google.com/groups/dir?q=gnu&)のようなウェブベー
スのUsenet検索サービスでも‘gnu.*’はアーカイブされています。


File: efaq.info,  Node: Reporting bugs,  Next: Unsubscribing from Emacs lists,  Prev: Newsgroup archives,  Up: General questions

2.4 Where should I report bugs and other problems with Emacs?
=============================================================

コマンド‘M-x report-emacs-bug’を使用するのがEmacsのバグを報告する正しい
方法です。このコマンドは必要な情報と正しいEメールアドレス
<bug-gnu-emacs@gnu.org>でメールバッファーをセットアップします。ここに送
信したものはニュースグループ<news:gnu.emacs.bug>でも目にすることができま
すが、バグレポートの提出にはどうかニュースではなくEメールを使用してくだ
さい。これによって信頼できる返信アドレスが保証されるので、詳細についてあ
なたに連絡をとることができるようになります。

   バグを報告する前に必ずEmacsマニュアルの“Bugs”セクションを読んでくださ
い。マニュアルには有用なバグレポートを投稿する方法(*note Reporting Bugs:
(emacs)Bugs.を参照)が詳細に渡って記述されています(マニュアルの読み方が判
らなければ*note Emacs manual::を参照)。

   RMSは述べています:

     バグレポートをthe help-gnu-emacs mailing list
     (https://lists.gnu.org/mailman/listinfo/help-gnu-emacs)
     (<news:gnu.emacs.help>に投稿される効果をもつ)に送信するのは、ほとん
     どは問題を解決するアイデアをもたない単なるユーザーである多数の人た
     ちに不必要に費やさせるので望ましくありません。The bug-gnu-emacs
     list (https://lists.gnu.org/mailman/listinfo/bug-gnu-emacs)なら何を
     するべきか恐らくもっと知識があり、他のものよりもEmacsのメッセージを
     受け取りたいと表明している、より少ない人たちにメッセージを届けられ
     ます。

   RMSは<news:gnu.emacs.help>へ投稿しても問題がない場合について述べてい
ます:

     バグをレポートして利用可能な修整について収穫が得られなかったら適切
     な遅延(1週間とか)を経た後で、あなたを助けられる誰かに助けを求めるた
     めに‘gnu.emacs.help’へ投稿することに問題はありません。

   バグを発見したのか確信がもてない場合には、RMSの好意による以下のそれほ
ど徹底はされていないリストを検討してみてください:

     Emacsがクラッシュしたら、それはバグです。Emacsのビルド時にコンパイ
     ルがエラーとなるなら、それはバグです。ビルド時にEmacsがクラッシュし
     たら、それはバグです。ドキュメントに記述された通りにLispコードが処
     理を行わなければ、それはバグです。


File: efaq.info,  Node: Unsubscribing from Emacs lists,  Next: Contacting the FSF,  Prev: Reporting bugs,  Up: General questions

2.5 How do I unsubscribe from a mailing list?
=============================================

あなたがLISTという名前のGNUメーリングリストからメールを受信しているなら
、アドレス<LIST-request@gnu.org>にリクエストを送信すれば登録解除できるは
ずです。メーリングリストのメールには通常ならメッセージヘッダー
(‘List-Unsubscribe:’)、あるいはフッターのいずれかに登録を解除する方法を
告げる情報が含まれています。


File: efaq.info,  Node: Contacting the FSF,  Prev: Unsubscribing from Emacs lists,  Up: General questions

2.6 How do I contact the FSF?
=============================

最新の情報はthe FSF contact web-page
(https://www.fsf.org/about/contact.html)を参照してください。一般的な対応
なら<info@fsf.org>に送信できます。

   FSFに直接アイテムを注文する方法の詳細はFSF on-line store
(https://shop.fsf.org/)を参照してください。


File: efaq.info,  Node: Getting help,  Next: Status of Emacs,  Prev: General questions,  Up: Top

3 Getting help
**************

このチャプターではEmacsでヘルプを得る方法について説明します。

* Menu:

* Basic editing::
* Learning how to do something::
* Getting a printed manual::
* Emacs Lisp documentation::
* Installing Texinfo documentation::
* Printing a Texinfo file::
* Viewing Info files outside of Emacs::
* Informational files for Emacs::
* Help installing Emacs::
* Obtaining the FAQ::


File: efaq.info,  Node: Basic editing,  Next: Learning how to do something,  Up: Getting help

3.1 I’m just starting Emacs; how do I do basic editing?
=======================================================

マイペースで学べるチュートリアルを呼び出すには‘C-h t’とタイプします。単
に‘C-h’とタイプすることでヘルプシステムにエンターします。このチュートリ
アルはEmacs 22以降はフランス語、ドイツ語、日本語、ロシア語等、英語以外の
多くの言語で利用できるようになりました。言語を選んでチュートリアルを開始
するには‘M-x help-with-tutorial-spec-language <RET>’とタイプしてください
。

   ローカルのキーボードを処理するために、‘C-h’が<DEL>のように振る舞うよ
うにシステム管理者が変更しているかもしれません。ヘルプの呼び出しにはかわ
りに‘M-x help-for-help’を使用できます。システム上でヘルプを呼び出すキー
(もしあれば)を見つけるには‘M-x where-is <RET> help-for-help <RET>’とタイ
プします。これはエコーエリア内にカンマで区切られたキーシーケンスのリスト
をプリントします。リストされた各キーシーケンスの最後の文字は無視してくだ
さい。結果として得られたキーシーケンス(<F1>が一般的)のそれぞれがヘルプを
呼び出します。

   Emacsのヘルプが単一のキーで呼び出せればもっとも良く機能します。この値
は変数‘help-char’に格納されているはずです。

   <http://web.psung.name/emacs/>ではEmacsのスライドやチュートリアルをい
くつか見つけることができます。


File: efaq.info,  Node: Learning how to do something,  Next: Getting a printed manual,  Prev: Basic editing,  Up: Getting help

3.2 How do I find out how to do something in Emacs?
===================================================

Emacsで物事を行う方法を見つけるには複数の手法があります。

   • Infoハイパーテキストリーダーを通じてEmacsマニュアルの完全なテキスト
     が利用できます。Infoモードでマニュアルを表示するには‘C-h r’とタイプ
     してください。Infoにエンター直後に‘h’とタイプすれば、その使用方法に
     関する短いチュートリアルが提供されるでしょう。

   • 特定の問題やコマンド、変数について述べているマニュアルのセクション
     を素早く見つけるには‘C-h i m emacs <RET> i TOPIC <RET>’とタイプしま
     す。これで正しいマニュアル箇所に辿り着けないようなら、必要なものが
     見つかるまで‘,’ (カンマ)を繰り返し押下してください(‘i’と‘,’は
     Emacsマニュアルの全インデックスからタイプされたTOPICを探すインデッ
     クス検索関数を呼び出すキー)。

   • ‘C-h a’ (‘M-x command-apropos’)を使用すれば、特定の単語を含んだすべ
     てのコマンド(実際には正規表現にマッチしたコマンド)を一覧できます。

   • コマンド‘C-h F’ (‘Info-goto-emacs-command-node’)はコマンド名の入力
     を求めて、そのコマンドの記述があるEmacsマニュアルのセクションの検索
     を試みます。

   • ‘M-x apropos’を使用すれば名前に特定の単語を含んだ関数およびコマンド
     をすべて一覧できます。

   • ‘M-x apropos-documentation’を使用すればドキュメントが正規表現または
     文字列ににマッチする関数およびコマンドをすべて一覧できます。

   • FSFからマニュアルのハードコードを注文できます。*note Getting a
     printed manual::を参照してください。

   • コマンドとそれらを呼び出すキーを一覧する印刷されたリファレンスカー
     ドを入手できます。$2(または$10か$18)でFSFに注文するか、Emacsディス
     トリビューション内のファイル‘etc/refcards/refcard.tex’または
     ‘etc/refcards/refcard.pdf’を自分でプリントできます。バージョン
     21.1以降のEmacsディストリビューションには複数の言語に翻訳されたリフ
     ァレンスカードが同梱されています。‘etc/refcards/LANG-refcard.*’
     (LANGは言語のアルファベット2文字コード)という名前のファイルを探して
     みてください。たとえばドイツ語バージョンのリファレンスカードは
     ‘etc/refcards/de-refcard.tex’と‘etc/refcards/de-refcard.pdf’にあり
     ます。

   • Emacsには他にもヘルプや情報を得るためのコマンドが多数存在します。こ
     れらのコマンドの一覧を得るには‘C-h’の後に‘?’をタイプしてください。


File: efaq.info,  Node: Getting a printed manual,  Next: Emacs Lisp documentation,  Prev: Learning how to do something,  Up: Getting help

3.3 How do I get a printed copy of the Emacs manual?
====================================================

Emacsマニュアルの印刷されたコピーわFSFに注文できます。詳細はFSF on-line
store (https://shop.fsf.org/)を参照してください。

   この数百ページに及ぶマニュアルを自分でプリントする勇気があるなら、マ
ニュアルの完全なTexinfoソースもEmacsディストリビューションの
‘doc/emacs’ディレクトリーにあります(*note Printing a Texinfo file::を参
照)。

   どうしても自分でコピーをプリントする必要があるもののTeXがない場合には
、

   <https://www.gnu.org/software/emacs/manual/>からPostScriptやPDF(ある
いはHTML)のバージョンを入手できます。

   Emacsからマニュアルを閲覧する方法については*note Learning how to do
something::を参照してください。


File: efaq.info,  Node: Emacs Lisp documentation,  Next: Installing Texinfo documentation,  Prev: Getting a printed manual,  Up: Getting help

3.4 Where can I get documentation on Emacs Lisp?
================================================

Emacsでは関数なら‘C-h f’、変数なら‘C-h v’とタイプしてドキュメントを入手
できます。

   詳細についてはEmacs LispリファレンスマニュアルがInfo形式で利用可能で
す(*note Emacs Lisp: (elisp)Top.を参照)。

   FSFにマニュアルのハードコードを注文することもできます。詳細はFSF
on-line store (https://shop.fsf.org/)を参照してください(このマニュアルは
常にプリントされているる訳ではない)。

   Emacs LispリファレンスマニュアルのHTMLバージョンは

   <https://www.gnu.org/software/emacs/elisp-manual/elisp.html>から利用
できます。


File: efaq.info,  Node: Installing Texinfo documentation,  Next: Printing a Texinfo file,  Prev: Emacs Lisp documentation,  Up: Getting help

3.5 How do I install a piece of Texinfo documentation?
======================================================

Emacsのリリースにはビルド前のInfoファイルが同梱されており、通常のインス
トールプロセスによって正しい場所に配置されます。これはInfoファイルを提供
するほとんどのアプリケーションにも当てはまります。以降は手作業で追加の
Infoファイルをインストールしたいユーザーだけに関係のあるセクションです。

   まずはTexinfoソースファイルをInfoファイルにしなければなりません。

   <https://www.gnu.org/software/texinfo/>にあるTexinfoパッケージの一部
として利用可能なスタンドアロンプログラム‘makeinfo’を使用してこれを行うこ
とができます。

   TexinfoフォーマットについてはTexinfoパッケージに同梱されている
Texinfoマニュアルを読んでください。このマニュアルはInfoフォーマットでも
インストールされるので、Emacsから‘C-h i m texinfo <RET>’とタイプして読む
ことができます。

   かわりに変換したいマニュアルのTexinfoソースファイルをEmacsでvisitした
後にコマンド‘M-x texinfo-format-buffer’を使用することもできます。

   ‘texinfo-format-buffer’と‘makeinfo’はどちらも実行結果のInfoファイルを
EmacsのInfoツリーにインストールしません。Infoファイルをインストールする
には以下の手順を行ってください:

  1. インストール済みEmacsディストリビューションの‘info’ディレクトリーに
     ファイルを移動する。場所が判らなければ*note File-name
     conventions::を参照のこと。

  2. メインのInfoディレクトリーメニュー更新のために、以下のようにして
     Texinfoディストリビューションの一部である‘install-info’コマンドを実
     行する。:

           install-info --info-dir=DIR-PATH DIR-PATH/FILE

     ここでDIR-PATHは生成したInfoファイルをコピーしたディレクトリーへの
     フルパス、FILEは生成してインストールしたいInfoファイルの名前。

     インストール済みの‘install-info’コマンドがなければインストール済み
     Emacsディストリビューションのファイル‘info/dir’を編集してインストー
     ルされているInfoパッケージ内のトップレベルノードに行を追加できる。
     このファイル内にある例にしたがえばよい。フォーマットは:

          * Topic: (relative-pathname).  Short description of topic.

   Infoファイルをインストールしたいが必要な権限がない場合にはいくつかの
オプションがあります:

   • 使用する前に実際にInfoファイルがインストールされている必要はない。
     ‘info’コマンドにプレフィクス引数を使用して、ミニバッファーでInfoフ
     ァイルの名前を指定できる。これによりそのInfoファイル内の‘Top’という
     名前のノードに移動する。たとえばホームディレクトリーにある
     ‘INFO-FILE’という名前のInfoファイルを閲覧するには、以下のようにタイ
     プできる:

          C-u C-h i ~/INFO-FILE <RET>

     かわりにファイルの名前を以下のようにカッコ内にタイプして(Infoモード
     で‘g’押下により呼び出される)‘Info-goto-node’コマンドにファイル名を
     与えることができる。

          C-h i g (~/INFO-FILE) <RET>

   • 自分用のInfoディレクトリーを作成できる。変数
     ‘Info-default-directory-list’の値にパス名を追加することによって
     EmacsにInfoディレクトリーの場所を伝えることができる。たとえばホーム
     ディレクトリーにある‘Info’という名前のサブディレクトリーを個人用の
     Infoディレクトリーとして使用するには以下を‘.emacs’ファイルに追加す
     ればよい:

          (add-to-list 'Info-default-directory-list "~/Info")

     このディレクトリーには‘dir’という名前のトップレベルInfoファイルが必
     要になるだろう。これはそのディレクトリーにあるInfoファイルのエント
     リーだけをリストスル点を除き、システムの‘dir’がもつすべてをもつ。
     (偶然にも)このディレクトリー内のすべてのファイルが他の‘dir’ファイル
     から参照されていれば、これは必要ないかもしれない。
     ‘Info-default-directory-list’内のすべての‘dir’ファイルのノードリス
     トはInfoシステムによってマージされる。


File: efaq.info,  Node: Printing a Texinfo file,  Next: Viewing Info files outside of Emacs,  Prev: Installing Texinfo documentation,  Up: Getting help

3.6 How do I print a Texinfo file?
==================================

Infoファイルから見栄えの良いプリント出力は得られません。マニュアルのプリ
ント用には、依然としてオリジナルのTexinfoソースファイルが不可欠です。

   システムにTeXがインストールされていれば以下のステップを行います:

  1. Texinfoファイルの先頭の行が以下のようになっていることを確認:

          \input texinfo

     ‘texinfo’を‘texinfo.tex’ファイルのフルパスに変更(またはカレントディ
     レクトリーにコピーまたはリンク)する必要があるかもしれない。これは
     Emacsに同梱されている‘doc/misc/texinfo.tex’である。

  2. ‘texi2dvi TEXINFO-SOURCE’とタイプする。ここでTEXINFO-SOURCEはプリン
     トしたコピーを生成したいTexinfoソースファイル名。‘texi2dvi’スクリプ
     トはGNU Texinfoディストリビューションの一部である。

     ‘texi2pdf’の場合には、かわりにPDFファイルを生成する。

  3. あなたのサイトでDVIファイルを通常プリントするのと同じ方法でDVIファ
     イル‘TEXINFO-SOURCE.dvi’をプリントする。たとえばPostScriptプリンタ
     ーをもっていれば、そのプリンターでDVIファイルをプリントするために
     ‘dvips’プログラムを実行する。

   より一般的な手順については最新のTexinfoパッケージを調べてください
(*note Installing Texinfo documentation::を参照)。


File: efaq.info,  Node: Viewing Info files outside of Emacs,  Next: Informational files for Emacs,  Prev: Printing a Texinfo file,  Up: Getting help

3.7 Can I view Info files without using Emacs?
==============================================

はい。以下はいくつかの候補プログラムです:

   • Texinfoパッケージに同梱されているInfoプログラムのスタンドアロンバー
     ジョンである‘info’。詳細は*Note Installing Texinfo documentation::を
     参照のこと。

   • X Window systemの下で実行され、Tcl/Tkを使用するInfoビューアーの
     Tkinfo。Tkinfoは<http://math-www.uni-paderborn.de/~axel/tkinfo/>で
     入手できる。


File: efaq.info,  Node: Informational files for Emacs,  Next: Help installing Emacs,  Prev: Viewing Info files outside of Emacs,  Up: Getting help

3.8 What informational files are available for Emacs?
=====================================================

これはよくある質問ではありませんが、そうあるべきなのです!  あなたに読ん
でもらうためｎ、Emacsおよび関連するGNUプロジェクトの様相に関する様々な情
報ファイルが利用可能です。

   以下のファイル(やその他のファイルも)はEmacsディストリビューション(ど
こにあるか判らなければ*note File-name conventions::を参照)の‘etc’ディレ
クトリー内にあります。これらのファイルの多くはEmacsの‘Help’メニュー、あ
るいは‘C-h ?’ (‘M-x help-for-help’)とタイプして利用することができます。

‘COPYING’
     GNU 一般公衆利用許諾書(GNU GENERAL PUBLIC LICENSE)

‘DISTRIB’
     Emacsの可用性に関する情報

‘MACHINES’
     様々なマシンおよびシステムにおけるEmacsの状況

‘NEWS’
     Emacsのニュース、ユーザーの目に見える最新の変更履歴

   ‘GNU’s Bulletin’の未解決問題を含むより詳細なGNU情報については

   <https://www.gnu.org/bulletins/bulletins.html>、および

   <http://www.cs.pdx.edu/~trent/gnu/gnu.html>を参照してください。


File: efaq.info,  Node: Help installing Emacs,  Next: Obtaining the FAQ,  Prev: Informational files for Emacs,  Up: Getting help

3.9 Where can I get help in installing Emacs?
=============================================

インストールにおける基本的なヒントについては*note Installing Emacs::、イ
ンストールに何か問題がある場合には*note Problems building Emacs::を参照
してください。

   The GNU Service directory (https://www.fsf.org/resources/service/)に
はEmacsやその他のGNUソフトウェアのインストールや使用において有償による手
助けを提案する企業や個人が一覧されています。


File: efaq.info,  Node: Obtaining the FAQ,  Prev: Help installing Emacs,  Up: Getting help

3.10 Where can I get the latest version of this FAQ?
====================================================

Emacs FAQはInfo形式としてEmacsに同梱されています。任意のEmacsフレームト
ップにあるEmacsメニューバーの‘Help’メニューあら‘Emacs FAQ’オプションを選
択、あるいは‘C-h C-f’ (‘M-x view-emacs-FAQ’)とタイプしてくださいこれを読
むことができます。開発版の最新バージョンはEmacsの開発用レポジトリから利
用できます(*note Latest version of Emacs::を参照)。


File: efaq.info,  Node: Status of Emacs,  Next: Common requests,  Prev: Getting help,  Up: Top

4 Status of Emacs
*****************

このチャプターでは最新バージョンの状況も含めたEmacsに関する基本情報を提
供します。

* Menu:

* Origin of the term Emacs::
* Latest version of Emacs::
* New in Emacs 27::
* New in Emacs 26::
* New in Emacs 25::
* New in Emacs 24::
* New in Emacs 23::
* New in Emacs 22::
* New in Emacs 21::
* New in Emacs 20::


File: efaq.info,  Node: Origin of the term Emacs,  Next: Latest version of Emacs,  Up: Status of Emacs

4.1 Where does the name “Emacs” come from?
==========================================

Emacsは元々はEditor MACroSの略語でした。RMSは“その時点ではITS上の略語と
して‘E’は使用されていなかったのでEmacsという名前を採用した”と述べていま
す。最初のEmacsは1976年にMITにおいてRMSがPDP-10上のITS (the Incompatible
Timesharing System)のエディターTECO (Text Editor and COrrector,
originally Tape Editor and COrrector)のために記述したマクロのセットでし
た。RMSはすでにTECOを再プログラム可能な“リアルタイム”のフルスクリーンモ
ードに拡張済みでした。Emacsは多くの異なるTECOコマンドセットとキーバイン
ディングを統合するプロジェクトとして、MITにおいてGuy Steeleによって開始
されて、RMSによって完成されました。

   TECOのコードは行がノイズのように見えると多くの人が言っています。これ
は<news:alt.lang.teco>で読むことができます。誰かがTECO実装をEmacs Lispで
記述しました(これを見つけるには*note Packages that do not come with
Emacs::を参照)。Emacsの内部でオリジナルのTECOを実行するのは興味深いプロ
ジェクトになるでしょう。

   Emacsという名前をもつ理由としてそれほど深刻ではない候補についてはファ
イル‘etc/JOKES’を調べてください(*note File-name conventions::を参照)。


File: efaq.info,  Node: Latest version of Emacs,  Next: New in Emacs 27,  Prev: Origin of the term Emacs,  Up: Status of Emacs

4.2 What is the latest version of Emacs?
========================================

Emacs 27.2はこれが記述されたカレントのバージョンです。2つのコンポーネン
トからなるバージョンナンバーは、リリースバージョンであることを表します
(例: ‘24.5’)。3つのコンポーネントからなるバージョンナンバーは開発バージ
ョンを表します(たとえば‘28.0.50’、いずれ‘28.1’となる)。

   Emacsは活動的な開発の下にありSavannah
(https://savannah.gnu.org/projects/emacs/)でホスティングされています。そ
こで示された手順にしたがってプロジェクトレポジトリをクローンしてください
。

   リリース前にはEmacsにたいして多くの変更が施されるので、開発版のバージ
ョンナンバーに特別な意味はありません。開発レポジトリから取得した日付を参
考にするほうが良いでしょう。開発版は通常は日常的の使用にたいしてかなり堅
牢ですが、最新機能より安定性の方が重要ならリリース版に固執した方が良いか
もしれません。

   以降のセクションでは最近のEmacsのリリースにおける主要な新機能を一覧に
しました。Emacsのあるバージョンにおける変更の完全な詳細については‘C-h
C-n’とタイプしてください。Emacs 22以降では古いバージョンにおいて何が新機
能かうぃ読むために、このコマンドにプレフィクス引数を与えることができます
。


File: efaq.info,  Node: New in Emacs 27,  Next: New in Emacs 26,  Prev: Latest version of Emacs,  Up: Status of Emacs

4.3 What is different about Emacs 27?
=====================================

   • ネイティブでは大き過ぎるサイズの整数をサポートするためにGMPライブラ
     リー(GNU Multiple Precision libraryl: GNU多倍長整数ライブラリー)を
     使用するようになった。ネイティブでサポートされる整数は“fixnums”、そ
     れより大きい整数は“bignum”とされる。bignumで意味をもつすべての数学
     、比較、および論理(“ビット”とも呼ばれる)の演算操作はfixnumと
     bignumの両方をサポートするようになった。

   • デフォルトのシェーピングエンジン(shaping engine: 整形エンジン)とし
     てEmacsはHarfBuzzを使用するようになった。

   • ‘json.el’より高速なJSON解析のネイティブサポート。

   • Cairoによる描画が実験的機能ではなくなった。

   • Emacsがunexecではなく“portable dumper”を使用するようになった。これ
     は現代的なシステムのメモリー割り当てにたいする互換性を向上して、と
     りわけ現代的なオペレーティングシステムのほとんどが使用している
     ASLR(Address Space Layout Randomization: アドレス空間配置のランダム
     化)をよりサポートする。

   • initファイルにたいしてEmacsがXDG規約を使用可能になった。

   • 早期initファイル(early init file)を使用してEmacsを設定できるように
     なった。これの主要目的は正規initファイル(regular init file)のロード
     前に発生するパッケージシステムの初期化にたいして、その方法のカスタ
     マイズを可能にすることである。

   • タブ(タブバーとタブライン)にたいするビルトインサポート。

   • ImageMagickを必要としないイメージのリサイズおよびローテートのサポー
     ト。

   Emacs 27における変更の完全なリストは、Emacsの‘NEWS’ファイル (‘C-h
n’)を参照してください。


File: efaq.info,  Node: New in Emacs 26,  Next: New in Emacs 25,  Prev: New in Emacs 27,  Up: Status of Emacs

4.4 What is different about Emacs 26?
=====================================

   • EmacsがLispスレッドによる限定された並列処理を提供するようになった。

   • Emacsでの‘systemd’サポート。新たなコマンドラインオプション
     ‘--fg-daemon’はこのサポートの一部であり、forkせずにフォアグラウンド
     で‘--daemon’と同じように実行される。

   • 24ビットトゥルーカラーの機能を提供するテキスト端末上でのEmacsによる
     24ビットトゥルーカラーサポート。*note Colors on a TTY::を参照のこと
     。

   • X上のEmacsがほとんどの状況においてディスプレーのちらつきをなくすダ
     ブルバッファリングをサポートするようになった。

   • マウスやタッチパッドを使用してEmacsディスプレーを水平方向にスクロー
     ルできるようになった。

   • Emacsの表示において‘display-line-numbers-mode’コマンドを通じた行番
     号表示のためのオプション機能が含まれるようになった。この機能は
     ‘linum’のようなパッケージが提案するものと等価な表示をより高速に行い
     、更に相対的行番号など多くのオプション機能も提供する。

   • 行の切り詰め時にウィンドウディスプレーの自動的な水平スクロールが、
     Emacsがカーソルを表示するカレント行でのみオプションで有効にできるよ
     うになった。このモードでは他のすべてのウィンドウ行にたいして、表示
     領域外にある文字を表示するためのスクロールは行われない。

   • トルコ語とギリシャ語のスクリプトの特別ケースを大文字小文字変換が配
     慮するようになった。

   • EnchantサポートがEmacsのスペルチェックコマンドの一部となった。

   • TrampがGoogle Driveファイルシステムをサポートするようになった。

   • ビルドされたマシンの詳細を省いてEmacsをビルドできるようになり、これ
     により再現可能なビルドの生成が容易になった。

   • Enriched Textモードに関するセキュリティの脆弱性が削除された。以前の
     Enrichedモードではテキストの一部として‘display’プロパティの保存がで
     きた。これらのプロパティは任意のLispコードの評価をサポートしており
     、外部ソースからEnrichedテキストを受け取るEmacsユーザーを脆弱性に晒
     していた。Enriched Textモードがデコードした‘display’プロパティ内の
     任意のLispフォームの実行はデフォルトで無効になった。

   • Emacs 26.2には最新のUnicode標準バージョン11.0.0.からインポートされ
     たデータファイルが同梱される。

   Emacs 26における変更の完全なリストは、Emacsの‘NEWS’ファイル (‘C-h
n’)を参照してください。


File: efaq.info,  Node: New in Emacs 25,  Next: New in Emacs 24,  Prev: New in Emacs 26,  Up: Status of Emacs

4.5 What is different about Emacs 25?
=====================================

   • gtk3とwebkitgtk3がインストールされていればEmacsがバッファー内にネイ
     ティブウィジェットを埋め込めるようになった。たとえば埋め込みの
     webkitブラウザウィンドウにアクセスするには‘M-x
     xwidget-webkit-browse-url’とタイプすればよい。

   • 共有ライブラリーとしてコンパイルされた外部モジュールをEmacsが動的に
     ロード可能になった。

   • いくつかの一般的な文字にたいして略記が‘C-x 8’に新規で追加された。略
     記のリストは‘C-x 8 C-h’とタイプする。

   • 新しいマイナーモード‘global-eldoc-mode’がデフォルトで有効になり、ポ
     イント位置にあるEmacs Lispフォームの引数をエコーエリアまたはモード
     ラインに表示するようになった。

   • “bracketed paste mode”をサポートするテキスト端末では、Emacsがそのモ
     ードをデフォルトで使用するようになった。このモードではEmacsはペース
     トされたテキストとユーザーがタイプしたテキストを区別できる。

   • Emacs 25には最新のUnicode標準バージョン9.0.0.からインポートされたデ
     ータファイルが同梱される。

   • 双方向編集のサポートは、最新のUnicode標準バージョン9.0.0.が要請する
     すべての機能を含むように更新された。

   • 検索コマンドがマッチでの文字フォールディング(folding: 折り畳み)を行
     うようになった。これはcaseフォールディング(大文字小文字を無視)と似
     ているが、case(大文字小文字)の違いを無視するのではなく、ダイアクリ
     ティカルマークを無視して二重引用符の様々な変種をマッチする等、類似
     した文字間のより広範な区別を無視する。

   • EmacsウェブブラウザEWWが可変ピッチフォントをレンダリングするように
     拡張され、それ以外にも新たな機能が加わった。

   • libxml2とともにEmacsをビルドした場合、あるいはLynxブラウザがインス
     トールされていれば、RmailがHTMLメールメッセージをレンダリングするよ
     うになった。

   • VCがBzr、Git、Hg用に実装された‘push’コマンドを基本的にサポートする
     ようになった。

   • Hide-IfDefモードがマクロ、マクロ引数展開、対話的マクロ評価、
     ‘#define’されたシンボルのスキャンにおいてすべてのC/C++式をサポート
     するようになった。

   • 新パッケージXrefがEtagsのフロントエンドとUIを置き換えた。Xrefは関数
     、マクロ、データ構造等の定義の検索や移動、そして定義に移動する前の
     場所に戻るための汎用フレームワークおよび新たなコマンドを提供する。
     バックエンドの1つとしてTAGSテーブルを読み込むetags.elのコードは依然
     として使用しているものの、Etagsコマンドの多くは置き換えられるか廃止
     された。結果としてポピュラーなキーバインディング‘M-.’および‘M-,’は
     Xrefコマンドを呼び出すように変更された。

   • 新パッケージProjectはプロジェクトを取り扱うたねの汎用インフラストラ
     クチャを提供する。

   • Emacsはツールキットのツールバーを提供するいくつかのプラットフォーム
     、すなわちGtk+、Lucid、Motif、Windowsにおいて水平スクロールバーを描
     画できるようになった。

   Emacs 25における変更の完全なリストは、Emacsの‘NEWS’ファイル (‘C-h
n’)を参照してください。


File: efaq.info,  Node: New in Emacs 24,  Next: New in Emacs 23,  Prev: New in Emacs 25,  Up: Status of Emacs

4.6 What is different about Emacs 24?
=====================================

   • Emacsにパッケージマネージャーが含まれるようになった。これを開始する
     には‘M-x list-packages’とタイプする。これを使用すれば更に多くの
     Lispパッケージをダウンロードして自動でインストールできる。

   • Emacs Lispがファイル単位にもとづくレキシカルバインディングをサポー
     トするようになった。_レキシカルバインディング(lexical binding)_では
     変数参照はバインディング構文内にテキスト的に配置されていなければな
     らない。これはローカルなテキストスコープ外部で定義された変数をプロ
     グラムが参照可能な_ダイナミックバインディング(dynamic binding)_とは
     対照的である。Lispファイルはファイルコンテンツがレキシカルバインデ
     ィング和使用していると解釈するよう示すために、ローカル変数セッティ
     ング‘lexical-binding: t’を使用できる。詳細についてはEmacs Lispリフ
     ァレンスマニュアルを参照のこと。

   • 英語のような自然言語のいくつかは左から右へと記述される。それ以外の
     アラビア語などは右から左に記述される。Emacsはこれらの形式が混交した
     、いわゆる“双方向テキスト(bidirectional text)”をサポートするように
     なった。

   • テキスト選択の処理が改善されて、外部クリップボードとより統合された
     。

   • 新たなコマンド‘customize-themes’によってEmacsの外観の変更が容易にな
     った。

   • GTK+ 3ツールキットとともにEmacsをコンパイルできるようになった。

   • コンパイル時に新たに複数の外部ライブラリーを含めることをサポートす
     る。

        • SELinux(“Security-Enhanced Linux”)とは、従来の“Unixスタイル”よ
          り複雑なファイルアクセスコントロールを提供するLinuxカーネルの
          機能。

        • ImageMagickディスプレーライブラリー。これによりEmacsでより多く
          のイメージ形式を表示でき、ローテーションのような変換も行うこと
          ができるようになる。

        • 安全なネットワーク通信のためのGnuTLSライブラリー。メールサーバ
          ーがサポートしていれば、EmacsはEメールにたいしてこれを透過的に
          使用する。

        • XML構造解析のためのlibxml2ライブラリー。

   • ウィンドウおよびバッファー表示の処理における柔軟性の向上。

   いつも通り詳細については‘NEWS’ファイルを参照してください。


File: efaq.info,  Node: New in Emacs 23,  Next: New in Emacs 22,  Prev: New in Emacs 24,  Up: Status of Emacs

4.7 What is different about Emacs 23?
=====================================

   • Emacsにfreetype、fontconfigを含む複数のフォントバックエンドを使用可
     能なフォントコードが新たに追加された。Emacsはアンチエイリアスに
     Xftライブラリー、複雑なテキストレイアウトとテキストシェーピングに
     otfやm17nのライブラリーを使用できる。

   • Emacs文字セットがUnicodeのスーパーセットになった。新たに複数の言語
     環境が追加された。

   • Emacsが同一セッションでXディスプレーとttyの両方を使用できるようにな
     った(‘multi-tty’)。

   • Emacsをバックグラウンドでデーモンとして開始できるようになった。

   • 新たにEmacsのNeXTstepポートが登場した。これはGNUstepおよび(Cocoaラ
     イブラリーを介して)Mac OS Xをサポートする。Emacs 22においてMac OS
     XをサポートしていたEmacsのCarbonポートは削除された。

   • ファイルローカル変数と同様の方法でディレクトリーローカル変数を定義
     できるようになった。

   • Transient Markモードがデフォルトでオンになった。

他にもシリアルポートアクセスのサポート、D-Busバインディング、行移動にお
ける新たなVisual Lineモード、補完の改善、PDFやPostScript、DVIを閲覧する
ための新モード(‘DocView’)、(XMLドキュメント編集用の)nXMLモード、新しいバ
ージョンコントロールシステム用にVCを更新する等の変更が含まれます。


File: efaq.info,  Node: New in Emacs 22,  Next: New in Emacs 21,  Prev: New in Emacs 23,  Up: Status of Emacs

4.8 What is different about Emacs 22?
=====================================

   • GTK+ウィジェットとともにEmacsをビルドできるようになり、X上でのドラ
     ッグアンドドロップ操作がサポートされた。

   • Emacs 22ではS390およびx86-64マシン上のGNU/Linuxシステム、Mac OS Xお
     よびCygwinオペレーティングシステムにたいするサポートを提供する。

   • ネイティブのMS-WindowsおよびMac OS Xのビルドにイメージ、ツールバー
     、ツールチップの完全サポートが含められた。

   • Font Lockモード、Auto Compressionモード、File Name Shadowモードがデ
     フォルトで有効になった。

   • バッファーの最大サイズが増加した。32ビットマシンのEmacs 23.1では
     256MB、Emacs 23.2以降は512MB。

   • ‘mouse-2’に加えて‘mouse-1’でリンクをフォローできるようになった。

   • マウスホイールのサポートがデフォルトでオンになった。

   • ウィンドウフリンジがカスタマイズ可能になった。

   • 選択されたウィンドウのモードラインがハイライトされるようになった。

   • ミニバッファーのプロンプトは独自のフェイスで表示される。

   • abbrev定義を起動時に読み込む。

   • GrepモードがCompilationモードから切り離されて、新たにgrep特有のオプ
     ションおよびコマンドをもつようになった。

   • Emacsオリジナルのマクロシステムは、新たに多くのコマンドおよび機能、
     ファンクションキーF3とF4を使用するシンプルなインターフェイスを提供
     するKmacroパッケージに置き換えられた。マクロはマクロリングに格納さ
     れるとともに、対話的にデバッグと編集ができるようになった。

   • GDBにたいする完全にグラフィカルなユーザーインターフェイスとして
     GUD(Grand Unified Debugger)が使用できるようになった。これは伝統的な
     開発環境で見い出すことができる多くの機能を提供するとともに、ブレー
     クポイントの操作、ウォッチポイントの追加、コールスタック表示等を容
     易にする。ブレークポイントはソースバッファー内に視覚的に示される。

   • Calc、TRAMP、URL、IDO、CUA、ERC、rcirc、Table、Image-Dired、SES、
     Ruler、Org、PGG、Flymake、Password、Printing、Reveal、wdired、
     t-mouse、longlines、savehist、Confモード、Pythonモード、DNSモードな
     ど新たに多くのモードとパッケージがEmacsに含められた。

   • LeimはEmacsの一部となった。Unicodeサポートが更に改善されて
     belarusian、bulgarian-bds、bulgarian-phonetic、chinese-sisheng、
     croatian、dutch、georgian、latin-alt-postfix、latin-postfix、
     latin-prefix、latvian-keyboard、lithuanian-numeric、
     lithuanian-keyboard、malayalam-inscript、rfc1345、
     russian-computer、sgml、slovenian、tamil-inscript、ucs、
     ukrainian-computer、vietnamese-telex、welshの入力メソッドが追加され
     た。

     Belarusian、Bulgarian、Chinese-EUC-TW、Croatian、French、Georgian、
     Italian、Latin-6、Latin-7、Latvian、Lithuanian、Malayalam、
     Russian、Slovenian、Swedish、Tajik、Tamil、UTF-8、Ukrainian、
     Welsh、Windows-1255の言語環境が追加された。

   • これらに加えてEmacs 22にはEmacs Lispリファレンスマニュアル(*note
     Emacs Lisp documentation::を参照)およびEmacs Lisp Introが含められた
     。


File: efaq.info,  Node: New in Emacs 21,  Next: New in Emacs 20,  Prev: New in Emacs 22,  Up: Status of Emacs

4.9 What is different about Emacs 21?
=====================================

Emacs 21ではディスプレーエンジンの徹底的な書き換えが行われました。新たな
ディスプレーエンジンは可変長フォント、イメージをサポートするとともに、サ
ウンドをサポートするプラットフォームでのサウンド再生が可能になりました。
結果としてウィンドウ化されたディスプレーで実行した際のEmacsの視覚的外観
はより現代的なGUIプログラムを想起させるものとなり、3Dウィジェット(モード
ラインとスクロールバーで使用)、設定と拡張が可能なツールバー、ツールチッ
プ(別名バルーンヘルプ)、その他が含められました。

   これらに加えてEmacs 21はテキストオンリーの端末でのフェイスがサポート
されました。これはGNU/Linuxコンソールや‘xterm’上でEmacsを‘emacs -nw’で実
行した際にカラー表示されることを意味しています。


File: efaq.info,  Node: New in Emacs 20,  Prev: New in Emacs 21,  Up: Status of Emacs

4.10 What is different about Emacs 20?
======================================

Emacsのバージョン18と19の差はよりダイナミックなものでした。一般的なユー
ザーのほとんどにとってもウィンドウシステムにおけるフレーム、フェイス、カ
ラーの導入は明白な変更でした。

   Emacsのバージョン19と20の間にも同様に差はあるものの多くは軽微であるか
気付くのが難しいものでした。この変更の中には非ラテン文字を使用する言語用
のMULEと同一ドキュメント内での複数言語の混合、Lispを使用せずに変数を変更
する“Customize”機能、Macintosh、Microsoft、Unixプラットフォームにおける
ファイルの自動変換が含まれます。


File: efaq.info,  Node: Common requests,  Next: Bugs and problems,  Prev: Status of Emacs,  Up: Top

5 Common requests
*****************

* Menu:

* Setting up a customization file::
* Using Customize::
* Colors on a TTY::
* Debugging a customization file::
* Displaying the current line or column::
* Displaying the current file name in the titlebar::
* Turning on abbrevs by default::
* Associating modes with files::
* Replacing highlighted text::
* Controlling case sensitivity::
* Working with unprintable characters::
* Searching for/replacing newlines::
* Yanking text in isearch::
* Wrapping words automatically::
* Turning on auto-fill by default::
* Changing load-path::
* Using an already running Emacs process::
* Compiler error messages::
* Indenting switch statements::
* Customizing C and C++ indentation::
* Overwrite mode::
* Turning off beeping::
* Turning the volume down::
* Automatic indentation::
* Matching parentheses::
* Hiding #ifdef lines::
* Repeating commands::
* Valid X resources::
* Evaluating Emacs Lisp code::
* Changing the length of a Tab::
* Inserting text at the beginning of each line::
* Forcing the cursor to remain in the same column::
* Forcing Emacs to iconify itself::
* Using regular expressions::
* Replacing text across multiple files::
* Documentation for etags::
* Disabling backups::
* Disabling auto-save-mode::
* Going to a line by number::
* Modifying pull-down menus::
* Deleting menus and menu options::
* Turning on syntax highlighting::
* Scrolling only one line::
* Editing MS-DOS files::
* Filling paragraphs with a single space::
* Escape sequences in shell output::
* Fullscreen mode on MS-Windows::


File: efaq.info,  Node: Setting up a customization file,  Next: Using Customize,  Up: Common requests

5.1 How do I set up a ‘.emacs’ file properly?
=============================================

*note (emacs)Init File::を参照してください。

   一般的にEmacsの新規ユーザーは‘.emacs’ファイルを与えられるべきではあり
ません。なぜならこれによる非標準的から混乱を招くからです。その後に彼らは
なぜEmacsがドキュメント通りに振る舞わないか尋ねる質問をthe
help-gnu-emacs mailing list
(https://lists.gnu.org/mailman/listinfo/help-gnu-emacs)に送信するのです
。

   EmacsにはCustomize機能が含まれています(*note Using Customize::を参照
)。これによってEmacs Lispに親しみのないユーザーはLispコードよりもメニュ
ーを使い、比較的判りやすい方法で‘.emacs’ファイルを編集できます。

   Customizeは確かにEmacsの設定を容易にするかもしれませんが、Emacs Lispを
習得して‘.emacs’を直接編集するために少し時間を割くことを検討してみてくだ
さい。頻繁に要求される基本的なタスクを処理することに興味があるユーザーに
は、シンプルな設定オプションが*note (emacs)Init File::により完全に記述さ
れています。

   ユーザーがどこで自分の‘.emacs’ファイルを見つけられるか判らない場合が
あります。Emacsから‘~/.emacs’としてファイルをvisitすることのよって、正し
いファイルが見つかるでしょう。


File: efaq.info,  Node: Using Customize,  Next: Colors on a TTY,  Prev: Setting up a customization file,  Up: Common requests

5.2 How do I start using Customize?
===================================

Customizeの主となるエントリーポイントは‘M-x customize <RET>’です。このコ
マンドにより利用可能なすべてのCustomizeグループを一覧するバッファーへと
導かれます。そこからカスタマイズ可能なすべてのオプションおよびフェイスに
アクセスして、それらの値の変更とinitファイルへの保存ができます。*note
(emacs)Easy Customization::を参照してください。

   (たとえば“shell”のように)あらかじめグループの名前が判っていれば‘M-x
customize-group <RET>’を使用してください。

   オプションを1つカスタマイズしたければ、‘M-x customize-option <RET>’を
使用します。このコマンドは補完付きでカスタマイズするオプション名の入力を
求めます。


File: efaq.info,  Node: Colors on a TTY,  Next: Debugging a customization file,  Prev: Using Customize,  Up: Common requests

5.3 How do I get colors and syntax highlighting on a TTY?
=========================================================

Emacs 21.1以降では非ウィンドウ化モード(UnixおよびGNU/Linuxテキストオンリ
ー端末やコンソール、またはXやMS-Windowsで‘emacs -nw’を呼び出した場合)で
カラーとフェイスがサポートされています(MS-DOSポートではEmacs 19.29以降で
カラーとフェイスがサポートされている)。Emacsは起動時に自動的にカラーサポ
ートを検出して、利用できるようならカラーを使用します。あなたの端末がカラ
ーをサポートしていると思えるのにEmacsがカラーを使用しない場合には、あな
たのディスプレータイプにたいするカラー関連能力について‘termcap’エントリ
ーをチェックしてください。

   コマンド‘M-x list-colors-display’はカレントディスプレーについて
Emacsが関知する全カラーを展覧するウィンドウをポップアップします。

   バージョン22.1以降ではシンタックスハイライトがデフォルトでオンです。

   Emacs 26.1以降はターミナル(訳注: 端末=terminalはtermcapのterm)でのダ
イレクトカラーモードをサポートしています。EmacsがTerminfoで‘setb24’およ
び‘setf24’のケイパビリティ(訳注: capabilityはtermcapのcap)を見つけたら
24ビットダイレクトカラーモードを使用します。ケイパビリティ文字列は、引数
として1つの24ビットピクセル値を取り、24ビットカラーを端末に送信するため
に使用できる文字列にピクセルを変換することが期待されます。

   標準のターミナル定義はこれらのケイパビリティをサポートせず、したがっ
てカスタム定義が必要になります。

     $ cat terminfo-custom.src

     xterm-emacs|xterm with 24-bit direct color mode for Emacs,
       use=xterm-256color,
       setb24=\E[48\:2\:\:%p1%{65536}%/%d\:%p1%{256}%/%{255}%&\
          %d\:%p1%{255}%&%dm,
       setf24=\E[38\:2\:\:%p1%{65536}%/%d\:%p1%{256}%/%{255}%&\
          %d\:%p1%{255}%&%dm,

     $ tic -x -o ~/.terminfo terminfo-custom.src

     $ TERM=xterm-emacs emacs -nw

   Emacs 27.1以降では24ビットダイレクトカラーモードの検出にたいして
Terminfoの‘RGB’ケイパビリティをサポートしています。複数の標準的なターミ
ナル定義がこのケイパビリティをサポートしています。

     $ TERM=xterm-direct infocmp | grep seta[bf]

       setab=\E[%?%p1%{8}%<%t4%p1%d%e48\:2\:\:%p1%{65536}%/\
          %d\:%p1%{256}%/%{255}%&%d\:%p1%{255}%&%d%;m,
       setaf=\E[%?%p1%{8}%<%t3%p1%d%e38\:2\:\:%p1%{65536}%/\
          %d\:%p1%{256}%/%{255}%&%d\:%p1%{255}%&%d%;m,

     $ TERM=xterm-direct emacs -nw

   あなたのターミナルにXTermとの互換性がなければ、別の‘TERM’定義を使う必
要があるかもしれません。名前に‘direct’が含まれるすべてのターミナルが候補
になり得ます。それらのうちどれがシステムにインストールされているか調べる
ために‘toe’コマンドを使用できます:

     $ toe | grep '\-direct'

     konsole-direct  konsole with direct-color indexing
     vte-direct      vte with direct-color indexing
     st-direct       st with direct-color indexing
     xterm-direct2   xterm with direct-color indexing (old)
     xterm-direct    xterm with direct-color indexing

   ‘RGB’ケイパビリティをもつターミナルは、ダイレクト。モードを認識しない
アプリケーションにたいする後方互換性を保守するために、ピクセル#000001か
ら#000007をインデックス付けされたカラーとして扱います。したがってもっと
も暗い青い濃淡は利用できないかもしれません。これが問題となるようなら、
‘setb24’と‘setf24’のカスタムターミナル定義を常に使用するこれができます。


File: efaq.info,  Node: Debugging a customization file,  Next: Displaying the current line or column,  Prev: Colors on a TTY,  Up: Common requests

5.4 How do I debug a ‘.emacs’ file?
===================================

コマンドラインオプション‘-debug-init’でEmacsを開始してください。これは
‘.emacs’ファイルを評価する前にEmacs Lispデバッガを有効して、何かうまく行
かなければあなたをデバッガ内へと導きます。‘trace-back’バッファーの上端行
はエラーメッセージ、2行目か3行目には問題を引き起こした‘.emacs’ファイルの
Lispコードが表示されるでしょう。

   ‘.emacs’ファイル内の関数や引数の終端にカーソルを移動して‘C-x C-e’
(‘M-x eval-last-sexp’)をタイプすれば、関数や関数の引数を個別に評価するこ
ともできます。

   セットまたは使用を試みている変数の値をチェックするには‘C-h v’ (‘M-x
describe-variable’)を使用できます。


File: efaq.info,  Node: Displaying the current line or column,  Next: Displaying the current file name in the titlebar,  Prev: Debugging a customization file,  Up: Common requests

5.5 How do I make Emacs display the current line (or column) number?
====================================================================

デフォルトではEmacsはポイント位置のカレント行番号をモードラインに表示し
ます。コマンド‘M-x line-number-mode’、または変数‘line-number-mode’でこの
機能のオンとオフを切り替えることができます。バッファーのバイトサイズが変
数‘line-number-display-limit’の値より大きければ、Emacsは行番号を表示しな
いことに注意してください。

   ‘M-x column-number-mode’、または以下のフォームを

     (setq column-number-mode t)

‘.emacs’ファイルに記述することにより、同じようにカレント列番号を表示でき
ます。この機能はデフォルトではオフです。

   変数‘mode-line-format’内のフォーマット指定子‘"%c"’は、モードラインに
カレント列の値っっ挿入します。この変数のセットや使用する方法についての詳
細は‘mode-line-format’のドキュメントを参照してください(‘C-h v
mode-line-format <RET>’を使用する)。

   ‘display-line-numbers’パッケージ(Emacsのバージョン26.1で追加)は‘vi’の
“set number”機能のように、各行の前のテキストエリアに行番号を表示します。
このオプション表示をアクティブにするにはバッファーローカル変数
‘display-line-numbers’をカスタマイズします。かわりにマイナーモード
‘display-line-numbers-mode’やグローバル版の
‘global-display-line-numbers-mode’を使うこともできます。これらのモード使
用時には‘display-line-numbers’を使用するときと同じ値で
‘display-line-numbers-type’をカスタマイズしてください。

   ‘linum’パッケージ(バージョン23.1以降のEmacsに同梱)もありますが今後配
送されます。ユーザーおよび開発者にはかわりに‘display-line-numbers’の使用
をお勧めします。(Emacsには同梱されていないパッケージ)‘setnu’と
‘wb-line-number’もこの機能を実装しています。


File: efaq.info,  Node: Displaying the current file name in the titlebar,  Next: Turning on abbrevs by default,  Prev: Displaying the current line or column,  Up: Common requests

5.6 How can I modify the titlebar to contain the current file name?
===================================================================

Emacsフレームのタイトルバーのコンテンツは、変数‘mode-line-format’と同じ
構造をもつ変数‘frame-title-format’によって制御されます(これらの変数につ
いて情報を得るには‘C-h v’または‘M-x describe-variable’を使用する)。

   デフォルトではフレームのタイトルバーには、1つのフレームしか存在しない
場合を除き、がカレントでvisitされているバッファーの名前が表示されます。
フレームが1つの場合には、タイトルバーにはEmacsを呼び出したときの名前、お
よびEmacsを呼び出したマシン名が含まれます。これは‘frame-title-format’に
以下をデフォルト値としてセットすることにより行われます:

     (multiple-frames "%b" ("" invocation-name "@" (system-name)))

   存在するフレームの個数に関わらずフレームのタイトルバーにバッファー名
が含まれるように挙動を変更するには、以下を‘.emacs’に含めてください:

     (setq frame-title-format "%b")


File: efaq.info,  Node: Turning on abbrevs by default,  Next: Associating modes with files,  Prev: Displaying the current file name in the titlebar,  Up: Common requests

5.7 How do I turn on abbrevs by default just in mode MYMODE?
============================================================

Abbrevモードは略語をタイプするとそれを展開します。特定のバッファーでこれ
をオンにするには‘M-x abbrev-mode’を使用します。デフォルトですべてのバッ
ファーでオンにするには、以下を‘.emacs’ファイルに記述してください:

     (setq-default abbrev-mode t)

To turn it on in a specific mode, use:

     (add-hook 'MYMODE-mode-hook
               (lambda ()
                (setq abbrev-mode t)))

If your Emacs version is older then 22.1, you will also need to use:

     (condition-case ()
        (quietly-read-abbrev-file)
       (file-error nil))


File: efaq.info,  Node: Associating modes with files,  Next: Replacing highlighted text,  Prev: Turning on abbrevs by default,  Up: Common requests

5.8 How do I make Emacs use a certain major mode for certain files?
===================================================================

名前が拡張子‘.BAR’で終わるファイルすべてにたいして特定のモードFOOを使用
したければ、以下でこれを行うことができるでしょう:

     (add-to-list 'auto-mode-alist '("\\.BAR\\'" . FOO-mode))

   またはかわりにモードFOOで編集したい任意のファイルの1行目のどこか(1行
目の先頭が‘#!’なら2行目)に以下を記述します:

     -*- FOO -*-

   変数‘interpreter-mode-alist’はインタープリター(shellやpythonなど)に解
釈されるスクリプトをロードする際にどのモードを使用するかを指定します。
Emacsはスクリプトの1行目を調べて、使用されるインタープリターを判断します
。詳細については‘interpreter-mode-alist’上で‘C-h v’ (または‘M-x
describe-variable’)を使用して調べてください。


File: efaq.info,  Node: Replacing highlighted text,  Next: Controlling case sensitivity,  Prev: Associating modes with files,  Up: Common requests

5.9 How can I replace highlighted text with what I type?
========================================================

以下のLispフォームを‘.emacs’ファイルに記述することにより自動的に開始でき
る‘delete-selection-mode’を使用します。

     (delete-selection-mode 1)

   ‘delete-selection-mode’のドキュメント文字列(‘M-x describe-function
<RET> delete-selection-mode <RET>’を使用して読むことができる)によると:

     Delete Selectionモードが有効な場合には選択がアクティブのときにテキ
     ストをタイプするとテキストで選択を置き換える。それ以外なら選択の有
     無に関わらずタイプしたテキストはポイント位置に挿入される。

   このモードにより<DEL>を押下してハイライトされているリージョンを削除
(killではない)することもできます。


File: efaq.info,  Node: Controlling case sensitivity,  Next: Working with unprintable characters,  Prev: Replacing highlighted text,  Up: Common requests

5.10 How do I control Emacs’s case-sensitivity when searching/replacing?
========================================================================

変数‘case-fold-search’の値は検索がcase(大文字小文字)を区別するかどうかを
決定します:

     (setq case-fold-search nil) ; caseを区別
     (setq case-fold-search t)   ; 検索はcaseを区別しない

   同じように置換では変数‘case-replace’が置換においてcaseを維持するかど
うかを決定します。

   isearchでは‘M-c’で自由にcaseの区別を切り替えることもできます。

   あるメジャーモードにたいしてのみcaseの区別を変更するにはメジャーモー
ドのフックを使用します。たとえば:

     (add-hook 'FOO-mode-hook
               (lambda ()
                (setq case-fold-search nil)))


File: efaq.info,  Node: Working with unprintable characters,  Next: Searching for/replacing newlines,  Prev: Controlling case sensitivity,  Up: Common requests

5.11 How do I search for, delete, or replace unprintable (eight-bit or control) characters?
===========================================================================================

To search for a single character that appears in the buffer as, for
example, ‘\237’, you can type ‘C-s C-q 2 3 7’.  Searching for *all*
unprintable characters is best done with a regular expression (“regexp”)
search.  The easiest regexp to use for the unprintable chars is the
complement of the regexp for the printable chars.

   • Regexp for the printable chars: ‘[\t\n\r\f -~]’

   • Regexp for the unprintable chars: ‘[^\t\n\r\f -~]’

   To type these special characters in an interactive argument to
‘isearch-forward-regexp’ or ‘re-search-forward’, you need to use ‘C-q’.
(‘\t’, ‘\n’, ‘\r’, and ‘\f’ stand respectively for <TAB>, <LFD>, <RET>,
and ‘C-l’.)  So, to search for unprintable characters using
‘re-search-forward’:

   ‘M-x re-search-forward <RET> [^ <TAB> C-q <LFD> C-q <RET> C-q C-l
<SPC> -~] <RET>’

   Using ‘isearch-forward-regexp’:

   ‘C-M-s [^ <TAB> <LFD> C-q <RET> C-q C-l <SPC> -~]’

   To delete all unprintable characters, simply use replace-regexp:

   ‘M-x replace-regexp <RET> [^ <TAB> C-q <LFD> C-q <RET> C-q C-l <SPC>
-~] <RET> <RET>’

   Replacing is similar to the above.  To replace all unprintable
characters with a colon, use:

   M-x replace-regexp <RET> [^ <TAB> C-q <LFD> C-q <RET> C-q C-l <SPC>
-~] <RET> : <RET>


File: efaq.info,  Node: Searching for/replacing newlines,  Next: Yanking text in isearch,  Prev: Working with unprintable characters,  Up: Common requests

5.12 How do I input a newline character in isearch or query-replace?
====================================================================

Use ‘C-q C-j’.  For more information, *note Special Input for
Incremental Search: (emacs)Special Isearch.


File: efaq.info,  Node: Yanking text in isearch,  Next: Wrapping words automatically,  Prev: Searching for/replacing newlines,  Up: Common requests

5.13 How do I copy text from the kill ring into the search string?
==================================================================

Use ‘M-y’.  *Note (emacs)Isearch Yank::.


File: efaq.info,  Node: Wrapping words automatically,  Next: Turning on auto-fill by default,  Prev: Yanking text in isearch,  Up: Common requests

5.14 How do I make Emacs wrap words for me?
===========================================

Use ‘auto-fill-mode’, activated by typing ‘M-x auto-fill-mode’.  The
default maximum line width is 70, determined by the variable
‘fill-column’.  To learn how to turn this on automatically, see *note
Turning on auto-fill by default::.


File: efaq.info,  Node: Turning on auto-fill by default,  Next: Changing load-path,  Prev: Wrapping words automatically,  Up: Common requests

5.15 How do I turn on ‘auto-fill-mode’ by default?
==================================================

To turn on ‘auto-fill-mode’ just once for one buffer, use ‘M-x
auto-fill-mode’.

   To turn it on for every buffer in a certain mode, you must use the
hook for that mode.  For example, to turn on ‘auto-fill’ mode for all
text buffers, including the following in your ‘.emacs’ file:

     (add-hook 'text-mode-hook 'turn-on-auto-fill)

   If you want ‘auto-fill’ mode on in all major modes, do this:

     (setq-default auto-fill-function 'do-auto-fill)


File: efaq.info,  Node: Changing load-path,  Next: Using an already running Emacs process,  Prev: Turning on auto-fill by default,  Up: Common requests

5.16 How do I change ‘load-path’?
=================================

In general, you should only add to the ‘load-path’.  You can add
directory /DIR/SUBDIR to the load path like this:

     (add-to-list 'load-path "/dir/subdir/")

   To do this relative to your home directory:

     (add-to-list 'load-path "~/mysubdir/")


File: efaq.info,  Node: Using an already running Emacs process,  Next: Compiler error messages,  Prev: Changing load-path,  Up: Common requests

5.17 How do I use an already running Emacs from another window?
===============================================================

‘emacsclient’, which comes with Emacs, is for editing a file using an
already running Emacs rather than starting up a new Emacs.  It does this
by sending a request to the already running Emacs, which must be
expecting the request.

   • Setup:

     Emacs must have executed the ‘server-start’ function for
     ‘emacsclient’ to work.  This can be done either by a command line
     option:

          emacs -f server-start

     or by invoking ‘server-start’ from ‘.emacs’:

          (if (SOME CONDITIONS ARE MET) (server-start))

     To get your news reader, mail reader, etc., to invoke
     ‘emacsclient’, try setting the environment variable ‘EDITOR’ (or
     sometimes ‘VISUAL’) to the value ‘emacsclient’.  You may have to
     specify the full pathname of the ‘emacsclient’ program instead.
     Examples:

          # csh commands:
          setenv EDITOR emacsclient

          # using full pathname
          setenv EDITOR /usr/local/emacs/etc/emacsclient

          # sh command:
          EDITOR=emacsclient ; export EDITOR

   • Normal use:

     When ‘emacsclient’ is run, it connects to the socket and passes its
     command line options to Emacs, which at the next opportunity will
     visit the files specified.  (Line numbers can be specified just
     like with Emacs.)  The user will have to switch to the Emacs window
     by hand.  When the user is done editing a file, the user can type
     ‘C-x #’ (or ‘M-x server-edit’) to indicate this.  If there is
     another buffer requested by ‘emacsclient’, Emacs will switch to it;
     otherwise ‘emacsclient’ will exit, signaling the calling program to
     continue.

   For more information, *Note (emacs)Emacs Server::.


File: efaq.info,  Node: Compiler error messages,  Next: Indenting switch statements,  Prev: Using an already running Emacs process,  Up: Common requests

5.18 How do I make Emacs recognize my compiler’s funny error messages?
======================================================================

Customize the ‘compilation-error-regexp-alist’ variable.


File: efaq.info,  Node: Indenting switch statements,  Next: Customizing C and C++ indentation,  Prev: Compiler error messages,  Up: Common requests

5.19 How do I change the indentation for ‘switch’?
==================================================

Many people want to indent their ‘switch’ statements like this:

     f()
     {
       switch(x) {
         case A:
           x1;
           break;
         case B:
           x2;
           break;
         default:
           x3;
       }
     }

To achieve this, add the following line to your ‘.emacs’:

     (c-set-offset 'case-label '+)


File: efaq.info,  Node: Customizing C and C++ indentation,  Next: Overwrite mode,  Prev: Indenting switch statements,  Up: Common requests

5.20 How to customize indentation in C, C++, and Java buffers?
==============================================================

The Emacs ‘cc-mode’ features an interactive procedure for customizing
the indentation style, which is fully explained in the ‘CC Mode’ manual
that is part of the Emacs distribution, see *note Customization
Indentation: (ccmode)Customizing Indentation.  Here’s a short summary of
the procedure:

  1. Go to the beginning of the first line where you don’t like the
     indentation and type ‘C-c C-o’.  Emacs will prompt you for the
     syntactic symbol; type <RET> to accept the default it suggests.

  2. Emacs now prompts for the offset of this syntactic symbol, showing
     the default (the current definition) inside parentheses.  You can
     choose one of these:

     ‘0’
          No extra indentation.
     ‘+’
          Indent one basic offset.
     ‘-’
          Outdent one basic offset.
     ‘++’
          Indent two basic offsets
     ‘--’
          Outdent two basic offsets.
     ‘*’
          Indent half basic offset.
     ‘/’
          Outdent half basic offset.

  3. After choosing one of these symbols, type ‘C-c C-q’ to reindent the
     line or the block according to what you just specified.

  4. If you don’t like the result, go back to step 1.  Otherwise, add
     the following line to your ‘.emacs’:

          (c-set-offset 'SYNTACTIC-SYMBOL OFFSET)

     where SYNTACTIC-SYMBOL is the name Emacs shows in the minibuffer
     when you type ‘C-c C-o’ at the beginning of the line, and OFFSET is
     one of the indentation symbols listed above (‘+’, ‘/’, ‘0’, etc.)
     that you’ve chosen during the interactive procedure.

  5. Go to the next line whose indentation is not to your liking and
     repeat the process there.

   It is recommended to put all the resulting ‘(c-set-offset ...)’
customizations inside a C mode hook, like this:

     (defun my-c-mode-hook ()
       (c-set-offset ...)
       (c-set-offset ...))
     (add-hook 'c-mode-hook 'my-c-mode-hook)

Using ‘c-mode-hook’ avoids the need to put a ‘(require 'cc-mode)’ into
your ‘.emacs’ file, because ‘c-set-offset’ might be unavailable when
‘cc-mode’ is not loaded.

   Note that ‘c-mode-hook’ runs for C source files only; use
‘c++-mode-hook’ for C++ sources, ‘java-mode-hook’ for Java sources, etc.
If you want the same customizations to be in effect in _all_ languages
supported by ‘cc-mode’, use ‘c-mode-common-hook’.


File: efaq.info,  Node: Overwrite mode,  Next: Turning off beeping,  Prev: Customizing C and C++ indentation,  Up: Common requests

5.21 How do I make Emacs “typeover” or “overwrite” instead of inserting?
========================================================================

‘M-x overwrite-mode’ (a minor mode).  This toggles ‘overwrite-mode’ on
and off, so exiting from ‘overwrite-mode’ is as easy as another ‘M-x
overwrite-mode’.

   On some systems, <Insert> toggles ‘overwrite-mode’ on and off.


File: efaq.info,  Node: Turning off beeping,  Next: Turning the volume down,  Prev: Overwrite mode,  Up: Common requests

5.22 How do I stop Emacs from beeping on a terminal?
====================================================

Martin R. Frank writes:

   Tell Emacs to use the “visible bell” instead of the audible bell, and
set the visible bell to nothing.

   That is, put the following in your ‘TERMCAP’ environment variable
(assuming you have one):

     ... :vb=: ...

   And evaluate the following Lisp form:

     (setq visible-bell t)


File: efaq.info,  Node: Turning the volume down,  Next: Automatic indentation,  Prev: Turning off beeping,  Up: Common requests

5.23 How do I turn down the bell volume in Emacs running under X?
=================================================================

On X Window system, you can adjust the bell volume and duration for all
programs with the shell command ‘xset’.

   Invoking ‘xset’ without any arguments produces some basic
information, including the following:

     usage:  xset [-display host:dpy] option ...
       To turn bell off:
           -b                b off               b 0
       To set bell volume, pitch and duration:
            b [vol [pitch [dur]]]          b on


File: efaq.info,  Node: Automatic indentation,  Next: Matching parentheses,  Prev: Turning the volume down,  Up: Common requests

5.24 How do I tell Emacs to automatically indent a new line to the indentation of the previous line?
====================================================================================================

Such behavior is automatic (in Text mode) in Emacs 20 and later.  From
the ‘etc/NEWS’ file for Emacs 20.2:

     ** In Text mode, now only blank lines separate paragraphs.  This makes
     it possible to get the full benefit of Adaptive Fill mode in Text mode,
     and other modes derived from it (such as Mail mode).  <TAB> in Text
     mode now runs the command indent-relative; this makes a practical
     difference only when you use indented paragraphs.

     If you want spaces at the beginning of a line to start a paragraph, use
     the new mode, Paragraph Indent Text mode.

   If you have ‘auto-fill-mode’ turned on (*note Turning on auto-fill by
default::), you can tell Emacs to prefix every line with a certain
character sequence, the “fill prefix”.  Type the prefix at the beginning
of a line, position point after it, and then type ‘C-x .’
(‘set-fill-prefix’) to set the fill prefix.  Thereafter, auto-filling
will automatically put the fill prefix at the beginning of new lines,
and ‘M-q’ (‘fill-paragraph’) will maintain any fill prefix when
refilling the paragraph.

   If you have paragraphs with different levels of indentation, you will
have to set the fill prefix to the correct value each time you move to a
new paragraph.  There are many packages available to deal with this
(*note Packages that do not come with Emacs::).  Look for “fill” and
“indent” keywords for guidance.


File: efaq.info,  Node: Matching parentheses,  Next: Hiding #ifdef lines,  Prev: Automatic indentation,  Up: Common requests

5.25 How do I show which parenthesis matches the one I’m looking at?
====================================================================

Call ‘show-paren-mode’ in your ‘.emacs’ file:

     (show-paren-mode 1)

   You can also enable this mode by selecting the ‘Paren Match
Highlighting’ option from the ‘Options’ menu of the Emacs menu bar at
the top of any Emacs frame.

   Alternatives to this mode include:

   • If you’re looking at a right parenthesis (or brace or bracket) you
     can delete it and reinsert it.  Emacs will momentarily move the
     cursor to the matching parenthesis.

   • ‘C-M-f’ (‘forward-sexp’) and ‘C-M-b’ (‘backward-sexp’) will skip
     over one set of balanced parentheses, so you can see which
     parentheses match.  (You can train it to skip over balanced
     brackets and braces at the same time by modifying the syntax
     table.)

   • Here is some Emacs Lisp that will make the ‘%’ key show the
     matching parenthesis, like in ‘vi’.  In addition, if the cursor
     isn’t over a parenthesis, it simply inserts a % like normal.

          ;; By an unknown contributor

          (global-set-key "%" 'match-paren)

          (defun match-paren (arg)
            "Go to the matching paren if on a paren; otherwise insert %."
            (interactive "p")
            (cond ((looking-at "\\s(") (forward-list 1) (backward-char 1))
                  ((looking-at "\\s)") (forward-char 1) (backward-list 1))
                  (t (self-insert-command (or arg 1)))))


File: efaq.info,  Node: Hiding #ifdef lines,  Next: Repeating commands,  Prev: Matching parentheses,  Up: Common requests

5.26 In C mode, can I show just the lines that will be left after ‘#ifdef’ commands are handled by the compiler?
================================================================================================================

‘M-x hide-ifdef-mode’.  (This is a minor mode.)  You might also want to
investigate ‘cpp.el’, which is distributed with Emacs.


File: efaq.info,  Node: Repeating commands,  Next: Valid X resources,  Prev: Hiding #ifdef lines,  Up: Common requests

5.27 How do I repeat a command as many times as possible?
=========================================================

Use the ‘repeat’ command (‘C-x z’) to repeat the last command.  If you
preface it with a prefix argument, the prefix arg is applied to the
command.

   You can also type ‘C-x <ESC> <ESC>’ (‘repeat-complex-command’) to
reinvoke commands that used the minibuffer to get arguments.  In
‘repeat-complex-command’ you can type ‘M-p’ and ‘M-n’ (and also up-arrow
and down-arrow, if your keyboard has these keys) to scan through all the
different complex commands you’ve typed.

   To repeat a set of commands, use keyboard macros.  Use ‘C-x (’ and
‘C-x )’ to make a keyboard macro that invokes the command and then type
‘C-x e’.  *Note (emacs)Keyboard Macros::.

   If you’re really desperate for the ‘.’ command in ‘vi’ that redoes
the last insertion/deletion, use VIPER, a ‘vi’ emulation mode which
comes with Emacs, and which appears to support it.


File: efaq.info,  Node: Valid X resources,  Next: Evaluating Emacs Lisp code,  Prev: Repeating commands,  Up: Common requests

5.28 What are the valid X resource settings (i.e., stuff in .Xdefaults)?
========================================================================

*Note (emacs)X Resources::.

   You can also use a resource editor, such as editres (for X11R5 and
onwards), to look at the resource names for the menu bar, assuming Emacs
was compiled with the X toolkit.


File: efaq.info,  Node: Evaluating Emacs Lisp code,  Next: Changing the length of a Tab,  Prev: Valid X resources,  Up: Common requests

5.29 How do I execute (“evaluate”) a piece of Emacs Lisp code?
==============================================================

There are a number of ways to execute (“evaluate”, in Lisp lingo) an
Emacs Lisp “form”:

   • If you want it evaluated every time you run Emacs, put it in a file
     named ‘.emacs’ in your home directory.  This is known as “your
     ‘.emacs’ file,” and contains all of your personal customizations.

   • You can type the form in the ‘*scratch*’ buffer, and then type
     <LFD> (or ‘C-j’) after it.  The result of evaluating the form will
     be inserted in the buffer.

   • In ‘emacs-lisp-mode’, typing ‘C-M-x’ evaluates a top-level form
     before or around point.

   • Typing ‘C-x C-e’ in any buffer evaluates the Lisp form immediately
     before point and prints its value in the echo area.

   • Typing ‘M-:’ or ‘M-x eval-expression’ allows you to type a Lisp
     form in the minibuffer which will be evaluated once you press
     <RET>.

   • You can use ‘M-x load-file’ to have Emacs evaluate all the Lisp
     forms in a file.  (To do this from Lisp use the function ‘load’
     instead.)

     The functions ‘load-library’, ‘eval-region’, ‘eval-buffer’,
     ‘require’, and ‘autoload’ are also useful; see *note Emacs Lisp
     documentation::, if you want to learn more about them.


File: efaq.info,  Node: Changing the length of a Tab,  Next: Inserting text at the beginning of each line,  Prev: Evaluating Emacs Lisp code,  Up: Common requests

5.30 How do I change Emacs’s idea of the <TAB> character’s length?
==================================================================

Set the default value of the variable ‘tab-width’.  For example, to set
<TAB> stops every 10 characters, insert the following in your ‘.emacs’
file:

     (setq-default tab-width 10)

   Do not confuse variable ‘tab-width’ with variable ‘tab-stop-list’.
The former is used for the display of literal <TAB> characters.  The
latter controls what characters are inserted when you press the <TAB>
character in certain modes.


File: efaq.info,  Node: Inserting text at the beginning of each line,  Next: Forcing the cursor to remain in the same column,  Prev: Changing the length of a Tab,  Up: Common requests

5.31 How do I insert <some text> at the beginning of every line?
================================================================

To do this to an entire buffer, type ‘M-< M-x replace-regexp <RET> ^
<RET> your text <RET>’.

   To do this to a region, use ‘string-insert-rectangle’.  Set the mark
(‘C-<SPC>’) at the beginning of the first line you want to prefix, move
the cursor to last line to be prefixed, and type ‘M-x
string-insert-rectangle <RET>’.  To do this for the whole buffer, type
‘C-x h M-x string-insert-rectangle <RET>’.

   If you are trying to prefix a yanked mail message with ‘>’, you might
want to set the variable ‘mail-yank-prefix’.  In Message buffers, you
can even use ‘M-;’ to cite yanked messages (‘M-;’ runs the function
‘comment-region’, it is a general-purpose mechanism to comment regions)
(*note Changing the included text prefix::).


File: efaq.info,  Node: Forcing the cursor to remain in the same column,  Next: Forcing Emacs to iconify itself,  Prev: Inserting text at the beginning of each line,  Up: Common requests

5.32 How do I make Emacs behave like this: when I go up or down, the cursor should stay in the same column even if the line is too short?
=========================================================================================================================================

Use ‘M-x picture-mode’.

   See also the variable ‘track-eol’ and the command ‘set-goal-column’
bound to ‘C-x C-n’ (*note (emacs)Moving Point::).


File: efaq.info,  Node: Forcing Emacs to iconify itself,  Next: Using regular expressions,  Prev: Forcing the cursor to remain in the same column,  Up: Common requests

5.33 How do I tell Emacs to iconify itself?
===========================================

‘C-z’ iconifies Emacs when running under X and suspends Emacs otherwise.
*Note (emacs)Frame Commands::.


File: efaq.info,  Node: Using regular expressions,  Next: Replacing text across multiple files,  Prev: Forcing Emacs to iconify itself,  Up: Common requests

5.34 How do I use regexps (regular expressions) in Emacs?
=========================================================

*Note (emacs)Regexp Backslash::.

   The ‘or’ operator is ‘\|’, not ‘|’, and the grouping operators are
‘\(’ and ‘\)’.  Also, the string syntax for a backslash is ‘\\’.  To
specify a regular expression like ‘xxx\(foo\|bar\)’ in a Lisp string,
use ‘xxx\\(foo\\|bar\\)’.

   Note the doubled backslashes!

   • Unlike in Unix ‘grep’, ‘sed’, etc., a complement character set
     (‘[^...]’) can match a newline character (<LFD> a.k.a. ‘C-j’ a.k.a.
     ‘\n’), unless newline is mentioned as one of the characters not to
     match.

   • The character syntax regexps (e.g., ‘\sw’) are not meaningful
     inside character set regexps (e.g., ‘[aeiou]’).  (This is actually
     typical for regexp syntax.)


File: efaq.info,  Node: Replacing text across multiple files,  Next: Documentation for etags,  Prev: Using regular expressions,  Up: Common requests

5.35 How do I perform a replace operation across more than one file?
====================================================================

Dired mode (‘M-x dired <RET>’, or ‘C-x d’) supports the command
‘dired-do-find-regexp-and-replace’ (‘Q’), which allows users to replace
regular expressions in multiple files.

   You can use this command to perform search/replace operations on
multiple files by following the following steps:

   • Assemble a list of files you want to operate on with either
     ‘find-dired’, ‘find-name-dired’ or ‘find-grep-dired’.

   • Mark all files in the resulting Dired buffer using ‘t’.

   • Use ‘Q’ to start a ‘query-replace-regexp’ session on the marked
     files.

   • To accept all replacements in each file, hit ‘!’.

   Another way to do the same thing is to use the “tags” feature of
Emacs: it includes the command ‘tags-query-replace’ which performs a
query-replace across all the files mentioned in the ‘TAGS’ file.  *Note
(emacs)Identifier Search::.


File: efaq.info,  Node: Documentation for etags,  Next: Disabling backups,  Prev: Replacing text across multiple files,  Up: Common requests

5.36 Where is the documentation for ‘etags’?
============================================

The ‘etags’ man page should be in the same place as the ‘emacs’ man
page.

   Quick command-line switch descriptions are also available.  For
example, ‘etags -H’.


File: efaq.info,  Node: Disabling backups,  Next: Disabling auto-save-mode,  Prev: Documentation for etags,  Up: Common requests

5.37 How do I disable backup files?
===================================

You probably don’t want to do this, since backups are useful, especially
when something goes wrong.

   To avoid seeing backup files (and other “uninteresting” files) in
Dired, load ‘dired-x’ by adding the following to your ‘.emacs’ file:

     (add-hook 'dired-load-hook
               (lambda ()
                (require 'dired-x)))

   With ‘dired-x’ loaded, ‘M-o’ toggles omitting in each dired buffer.
You can make omitting the default for new dired buffers by putting the
following in your ‘.emacs’:

     (add-hook 'dired-mode-hook 'dired-omit-toggle)

   If you’re tired of seeing backup files whenever you do an ‘ls’ at the
Unix shell, try GNU ‘ls’ with the ‘-B’ option.  GNU ‘ls’ is part of the
GNU Fileutils package, available from <https://ftp.gnu.org> and its
mirrors (*note Current GNU distributions::).

   To disable or change the way backups are made, *note (emacs)Backup
Names::.

   Beginning with Emacs 21.1, you can control where Emacs puts backup
files by customizing the variable ‘backup-directory-alist’.  This
variable’s value specifies that files whose names match specific patters
should have their backups put in certain directories.  A typical use is
to add the element ‘("." . DIR)’ to force Emacs to put *all* backup
files in the directory ‘dir’.


File: efaq.info,  Node: Disabling auto-save-mode,  Next: Going to a line by number,  Prev: Disabling backups,  Up: Common requests

5.38 How do I disable ‘auto-save-mode’?
=======================================

You probably don’t want to do this, since auto-saving is useful,
especially when Emacs or your computer crashes while you are editing a
document.

   Instead, you might want to change the variable ‘auto-save-interval’,
which specifies how many keystrokes Emacs waits before auto-saving.
Increasing this value forces Emacs to wait longer between auto-saves,
which might annoy you less.

   You might also want to look into Sebastian Kremer’s ‘auto-save’
package (*note Packages that do not come with Emacs::).  This package
also allows you to place all auto-save files in one directory, such as
‘/tmp’.

   To disable or change how ‘auto-save-mode’ works, *note (emacs)Auto
Save::.


File: efaq.info,  Node: Going to a line by number,  Next: Modifying pull-down menus,  Prev: Disabling auto-save-mode,  Up: Common requests

5.39 How can I go to a certain line given its number?
=====================================================

Are you sure you indeed need to go to a line by its number?  Perhaps all
you want is to display a line in your source file for which a compiler
printed an error message?  If so, compiling from within Emacs using the
‘M-x compile’ and ‘M-x recompile’ commands is a much more effective way
of doing that.  Emacs automatically intercepts the compile error
messages, inserts them into a special buffer called ‘*compilation*’, and
lets you visit the locus of each message in the source.  Type ‘C-x `’ to
step through the offending lines one by one (starting with Emacs 22, you
can also use ‘M-g M-p’ and ‘M-g M-n’ to go to the previous and next
matches directly).  Click ‘mouse-2’ or press <RET> on a message text in
the ‘*compilation*’ buffer to go to the line whose number is mentioned
in that message.

   But if you indeed need to go to a certain text line, type ‘M-g M-g’
(which is the default binding of the ‘goto-line’ function starting with
Emacs 22).  Emacs will prompt you for the number of the line and go to
that line.

   You can do this faster by invoking ‘goto-line’ with a numeric
argument that is the line’s number.  For example, ‘C-u 286 M-g M-g’ will
jump to line number 286 in the current buffer.


File: efaq.info,  Node: Modifying pull-down menus,  Next: Deleting menus and menu options,  Prev: Going to a line by number,  Up: Common requests

5.40 How can I create or modify new pull-down menu options?
===========================================================

Each menu title (e.g., ‘File’, ‘Edit’, ‘Buffers’) represents a local or
global keymap.  Selecting a menu title with the mouse displays that
keymap’s non-‘nil’ contents in the form of a menu.

   So to add a menu option to an existing menu, all you have to do is
add a new definition to the appropriate keymap.  Adding a ‘Forward Word’
item to the ‘Edit’ menu thus requires the following Lisp code:

     (define-key global-map
       [menu-bar edit forward]
       '("Forward word" . forward-word))

The first line adds the entry to the global keymap, which includes
global menu bar entries.  Replacing the reference to ‘global-map’ with a
local keymap would add this menu option only within a particular mode.

   The second line describes the path from the menu-bar to the new
entry.  Placing this menu entry underneath the ‘File’ menu would mean
changing the word ‘edit’ in the second line to ‘file’.

   The third line is a cons cell whose first element is the title that
will be displayed, and whose second element is the function that will be
called when that menu option is invoked.

   To add a new menu, rather than a new option to an existing menu, we
must define an entirely new keymap:

     (define-key global-map [menu-bar words]
       (cons "Words" (make-sparse-keymap "Words")))

   The above code creates a new sparse keymap, gives it the name
‘Words’, and attaches it to the global menu bar.  Adding the ‘Forward
Word’ item to this new menu would thus require the following code:

     (define-key global-map
       [menu-bar words forward]
       '("Forward word" . forward-word))

Note that because of the way keymaps work, menu options are displayed
with the more recently defined items at the top.  Thus if you were to
define menu options ‘foo’, ‘bar’, and ‘baz’ (in that order), the menu
option ‘baz’ would appear at the top, and ‘foo’ would be at the bottom.

   One way to avoid this problem is to use the function
‘define-key-after’, which works the same as ‘define-key’, but lets you
modify where items appear.  The following Lisp code would insert the
‘Forward Word’ item in the ‘Edit’ menu immediately following the ‘Undo’
item:

     (define-key-after
       (lookup-key global-map [menu-bar edit])
       [forward]
       '("Forward word" . forward-word)
       'undo)

   Note how the second and third arguments to ‘define-key-after’ are
different from those of ‘define-key’, and that we have added a new
(final) argument, the function after which our new key should be
defined.

   To move a menu option from one position to another, simply evaluate
‘define-key-after’ with the appropriate final argument.

   More detailed information—and more examples of how to create and
modify menu options—are in the ‘Emacs Lisp Reference Manual’, under
“Menu Keymaps.” (*Note Emacs Lisp documentation::, for information on
this manual.)


File: efaq.info,  Node: Deleting menus and menu options,  Next: Turning on syntax highlighting,  Prev: Modifying pull-down menus,  Up: Common requests

5.41 How do I delete menus and menu options?
============================================

The simplest way to remove a menu is to set its keymap to ‘nil’.  For
example, to delete the ‘Words’ menu (*note Modifying pull-down menus::),
use:

     (define-key global-map [menu-bar words] nil)

   Similarly, removing a menu option requires redefining a keymap entry
to ‘nil’.  For example, to delete the ‘Forward word’ menu option from
the ‘Edit’ menu (we added it in *note Modifying pull-down menus::), use:

     (define-key global-map [menu-bar edit forward] nil)


File: efaq.info,  Node: Turning on syntax highlighting,  Next: Scrolling only one line,  Prev: Deleting menus and menu options,  Up: Common requests

5.42 How do I turn on syntax highlighting?
==========================================

‘font-lock-mode’ is the standard way to have Emacs perform syntax
highlighting in the current buffer.  It is enabled by default in Emacs
22.1 and later.

   With ‘font-lock-mode’ turned on, different types of text will appear
in different colors.  For instance, in a programming mode, variables
will appear in one face, keywords in a second, and comments in a third.

   To turn ‘font-lock-mode’ off within an existing buffer, use ‘M-x
font-lock-mode <RET>’.

   In Emacs 21 and earlier versions, you could use the following code in
your ‘.emacs’ file to turn on ‘font-lock-mode’ globally:

     (global-font-lock-mode 1)

   Highlighting a buffer with ‘font-lock-mode’ can take quite a while,
and cause an annoying delay in display, so several features exist to
work around this.

   In Emacs 21 and later, turning on ‘font-lock-mode’ automatically
activates the new “Just-In-Time fontification” provided by
‘jit-lock-mode’.  ‘jit-lock-mode’ defers the fontification of portions
of buffer until you actually need to see them, and can also fontify
while Emacs is idle.  This makes display of the visible portion of a
buffer almost instantaneous.  For details about customizing
‘jit-lock-mode’, type ‘C-h f jit-lock-mode <RET>’.

   In versions of Emacs before 21, different levels of decoration are
available, from slight to gaudy.  More decoration means you need to wait
more time for a buffer to be fontified (or a faster machine).  To
control how decorated your buffers should become, set the value of
‘font-lock-maximum-decoration’ in your ‘.emacs’ file, with a ‘nil’ value
indicating default (usually minimum) decoration, and a ‘t’ value
indicating the maximum decoration.  For the gaudiest possible look,
then, include the line

     (setq font-lock-maximum-decoration t)

in your ‘.emacs’ file.  You can also set this variable such that
different modes are highlighted in a different ways; for more
information, see the documentation for ‘font-lock-maximum-decoration’
with ‘C-h v’ (or ‘M-x describe-variable <RET>’).

   Also see the documentation for the function ‘font-lock-mode’,
available by typing ‘C-h f font-lock-mode’ (‘M-x describe-function <RET>
font-lock-mode <RET>’).

   To print buffers with the faces (i.e., colors and fonts) intact, use
‘M-x ps-print-buffer-with-faces’ or ‘M-x ps-print-region-with-faces’.
You will need a way to send text to a PostScript printer, or a
PostScript interpreter such as Ghostscript; consult the documentation of
the variables ‘ps-printer-name’, ‘ps-lpr-command’, and ‘ps-lpr-switches’
for more details.


File: efaq.info,  Node: Scrolling only one line,  Next: Editing MS-DOS files,  Prev: Turning on syntax highlighting,  Up: Common requests

5.43 How can I force Emacs to scroll only one line when I move past the bottom of the screen?
=============================================================================================

Customize the ‘scroll-conservatively’ variable with ‘M-x
customize-variable <RET> scroll-conservatively <RET>’ and set it to a
large value like, say, 10000.  For an explanation of what this means,
*note (emacs)Auto Scrolling::.

   Alternatively, use the following Lisp form in your ‘.emacs’:

     (setq scroll-conservatively most-positive-fixnum)


File: efaq.info,  Node: Editing MS-DOS files,  Next: Filling paragraphs with a single space,  Prev: Scrolling only one line,  Up: Common requests

5.44 How can I edit MS-DOS files using Emacs?
=============================================

Detection and handling of MS-DOS (and Windows) files is performed
transparently.  You can open MS-DOS files on a Unix system, edit it, and
save it without having to worry about the file format.

   When editing an MS-DOS style file, the mode line will indicate that
it is a DOS file.  On Unix and GNU/Linux systems, and also on a
Macintosh, the string ‘(DOS)’ will appear near the left edge of the mode
line; on DOS and Windows, where the DOS end-of-line (EOL) format is the
default, a backslash (‘\’) will appear in the mode line.


File: efaq.info,  Node: Filling paragraphs with a single space,  Next: Escape sequences in shell output,  Prev: Editing MS-DOS files,  Up: Common requests

5.45 How can I tell Emacs to fill paragraphs with a single space after each period?
===================================================================================

Add the following line to your ‘.emacs’ file:

     (setq sentence-end-double-space nil)


File: efaq.info,  Node: Escape sequences in shell output,  Next: Fullscreen mode on MS-Windows,  Prev: Filling paragraphs with a single space,  Up: Common requests

5.46 Why these strange escape sequences from ‘ls’ from the Shell mode?
======================================================================

In many systems, ‘ls’ is aliased to ‘ls --color’, which prints using
ANSI color escape sequences.  Emacs version 21.1 and later includes the
‘ansi-color’ package, which lets Shell mode recognize these escape
sequences.  In Emacs 23.2 and later, the package is enabled by default;
in earlier versions you can enable it by typing ‘M-x
ansi-color-for-comint-mode’ in the Shell buffer, or by adding ‘(add-hook
'shell-mode-hook 'ansi-color-for-comint-mode-on)’ to your init file.


File: efaq.info,  Node: Fullscreen mode on MS-Windows,  Prev: Escape sequences in shell output,  Up: Common requests

5.47 How can I start Emacs in fullscreen mode on MS-Windows?
============================================================

Beginning with Emacs 24.4 either run Emacs with the ‘--maximized’
command-line option or put the following form in your ‘.emacs’ file:

     (add-hook 'emacs-startup-hook 'toggle-frame-maximized)

   With older versions use the function ‘w32-send-sys-command’.  For
example, you can put the following in your ‘.emacs’ file:

     (add-hook 'emacs-startup-hook
               (lambda () (w32-send-sys-command ?\xF030)))

   To avoid the slightly distracting visual effect of Emacs starting
with its default frame size and then growing to fullscreen, you can add
an ‘Emacs.Geometry’ entry to the Windows registry settings.  *Note
(emacs)X Resources::.

   To compute the correct values for width and height, first maximize
the Emacs frame and then evaluate ‘(frame-height)’ and ‘(frame-width)’
with ‘M-:’.


File: efaq.info,  Node: Bugs and problems,  Next: Compiling and installing Emacs,  Prev: Common requests,  Up: Top

6 Bugs and problems
*******************

The Emacs manual lists some common kinds of trouble users could get
into, see *note Dealing with Emacs Trouble: (emacs)Lossage, so you might
look there if the problem you encounter isn’t described in this chapter.
If you decide you’ve discovered a bug, see *note Reporting Bugs:
(emacs)Bugs, for instructions how to do that.

   The file ‘etc/PROBLEMS’ in the Emacs distribution lists various known
problems with building and using Emacs on specific platforms; type ‘C-h
C-p’ to read it.

* Menu:

* Problems with very large files::
* ^M in the shell buffer::
* Problems with Shell Mode::
* Termcap/Terminfo entries for Emacs::
* Errors with init files::
* Emacs ignores X resources::
* Emacs ignores frame parameters::
* Editing files with $ in the name::
* Shell mode loses the current directory::
* Security risks with Emacs::
* Dired claims that no file is on this line::


File: efaq.info,  Node: Problems with very large files,  Next: ^M in the shell buffer,  Up: Bugs and problems

6.1 Does Emacs have problems with large files?
==============================================

Emacs has an inherent fixed limitation on the size of buffers.  This
limit is stricter than the maximum size of objects supported by other
programs on the same architecture.

   The maximum buffer size on 32-bit machines is 512 MBytes beginning
with version 23.2.  If Emacs was built using the ‘--with-wide-int’ flag,
the maximum buffer size on 32-bit machines is 2 GB.

   Emacs compiled on a 64-bit machine can handle much larger buffers; up
to ‘most-positive-fixnum’ (2.3 exabytes).

   Due to things like decoding of multibyte characters, you can only
visit files with a size that is roughly half the buffer size limit.
When visiting compressed archives, the file size limit will be smaller
than that due to decompression.


File: efaq.info,  Node: ^M in the shell buffer,  Next: Problems with Shell Mode,  Prev: Problems with very large files,  Up: Bugs and problems

6.2 How do I get rid of ‘^M’ or echoed commands in my shell buffer?
===================================================================

Try typing ‘M-x comint-strip-ctrl-m <RET>’ while in ‘shell-mode’ to make
them go away.  If that doesn’t work, you have several options:

   For ‘tcsh’, put this in your ‘.cshrc’ (or ‘.tcshrc’) file:

     if ($?INSIDE_EMACS && $?tcsh)
         unset edit
         stty -icrnl -onlcr -echo susp ^Z
     endif

   Or put this in your ‘.emacs_tcsh’ or ‘~/.emacs.d/init_tcsh.sh’ file:

     unset edit
     stty -icrnl -onlcr -echo susp ^Z

   Alternatively, use ‘csh’ in your shell buffers instead of ‘tcsh’.
One way is:

     (setq explicit-shell-file-name "/bin/csh")

and another is to do this in your ‘.cshrc’ (or ‘.tcshrc’) file:

     setenv ESHELL /bin/csh

(You must start Emacs over again with the environment variable properly
set for this to take effect.)

   You can also set the ‘ESHELL’ environment variable in Emacs Lisp with
the following Lisp form,

     (setenv "ESHELL" "/bin/csh")

   The above solutions try to prevent the shell from producing the ‘^M’
characters in the first place.  If this is not possible (e.g., if you
use a Windows shell), you can get Emacs to remove these characters from
the buffer by adding this to your ‘.emacs’ init file:

     (add-hook 'comint-output-filter-functions #'comint-strip-ctrl-m)

   On a related note: if your shell is echoing your input line in the
shell buffer, you might want to customize the ‘comint-process-echoes’
variable in your shell buffers, or try the following command in your
shell start-up file:

     stty -icrnl -onlcr -echo susp ^Z


File: efaq.info,  Node: Problems with Shell Mode,  Next: Termcap/Terminfo entries for Emacs,  Prev: ^M in the shell buffer,  Up: Bugs and problems

6.3 Why do I get an error message when I try to run ‘M-x shell’?
================================================================

This might happen because Emacs tries to look for the shell in a wrong
place.  If you know where your shell executable is, set the variable
‘explicit-shell-file-name’ in your ‘.emacs’ file to point to its full
file name.

   Some people have trouble with Shell Mode on MS-Windows because of
intrusive antivirus software; disabling the resident antivirus program
solves the problems in those cases.


File: efaq.info,  Node: Termcap/Terminfo entries for Emacs,  Next: Errors with init files,  Prev: Problems with Shell Mode,  Up: Bugs and problems

6.4 Where is the termcap/terminfo entry for terminal type ‘emacs’?
==================================================================

The termcap entry for terminal type ‘emacs’ is ordinarily put in the
‘TERMCAP’ environment variable of subshells.  It may help in certain
situations (e.g., using rlogin from shell buffer) to add an entry for
‘emacs’ to the system-wide termcap file.  Here is a correct termcap
entry for ‘emacs’:

     emacs:tc=unknown:

   To make a terminfo entry for ‘emacs’, use ‘tic’ or ‘captoinfo’.  You
need to generate ‘/usr/lib/terminfo/e/emacs’.  It may work to simply
copy ‘/usr/lib/terminfo/d/dumb’ to ‘/usr/lib/terminfo/e/emacs’.

   Having a termcap/terminfo entry will not enable the use of full
screen programs in shell buffers.  Use ‘M-x term’ for that instead.

   A workaround to the problem of missing termcap/terminfo entries is to
change terminal type ‘emacs’ to type ‘dumb’ or ‘unknown’ in your shell
start up file.  ‘csh’ users could put this in their ‘.cshrc’ files:

     if ("$term" == emacs) set term=dumb


File: efaq.info,  Node: Errors with init files,  Next: Emacs ignores X resources,  Prev: Termcap/Terminfo entries for Emacs,  Up: Bugs and problems

6.5 Why does Emacs say ‘Error in init file’?
============================================

An error occurred while loading either your ‘.emacs’ file or the
system-wide file ‘site-lisp/default.el’.  Emacs 21.1 and later pops the
‘*Messages*’ buffer, and puts there some additional information about
the error, to provide some hints for debugging.

   For information on how to debug your ‘.emacs’ file, see *note
Debugging a customization file::.

   It may be the case that you need to load some package first, or use a
hook that will be evaluated after the package is loaded.  A common case
of this is explained in *note Terminal setup code works after Emacs has
begun::.


File: efaq.info,  Node: Emacs ignores X resources,  Next: Emacs ignores frame parameters,  Prev: Errors with init files,  Up: Bugs and problems

6.6 Why does Emacs ignore my X resources (my .Xdefaults file)?
==============================================================

Emacs searches for X resources in the files specified by the following
environment variables:

   • ‘XFILESEARCHPATH’
   • ‘XUSERFILESEARCHPATH’
   • ‘XAPPLRESDIR’

   This emulates the functionality provided by programs written using
the Xt toolkit.

   ‘XFILESEARCHPATH’ and ‘XUSERFILESEARCHPATH’ should be a list of file
names separated by colons.  ‘XAPPLRESDIR’ should be a list of
directories separated by colons.

   Emacs searches for X resources:

  1. specified on the command line, with the ‘-xrm RESOURCESTRING’
     option,

  2. then in the value of the ‘XENVIRONMENT’ environment variable,

        − or if that is unset, in the file named ‘~/.Xdefaults-HOSTNAME’
          if it exists (where HOSTNAME is the name of the machine Emacs
          is running on),

  3. then in the screen-specific and server-wide resource properties
     provided by the server,

        − or if those properties are unset, in the file named
          ‘~/.Xdefaults’ if it exists,

  4. then in the files listed in ‘XUSERFILESEARCHPATH’,

        − or in files named ‘LANG/Emacs’ in directories listed in
          ‘XAPPLRESDIR’ (where LANG is the value of the ‘LANG’
          environment variable), if the ‘LANG’ environment variable is
          set,
        − or in files named Emacs in the directories listed in
          ‘XAPPLRESDIR’
        − or in ‘~/LANG/Emacs’ (if the ‘LANG’ environment variable is
          set),
        − or in ‘~/Emacs’,

  5. then in the files listed in ‘XFILESEARCHPATH’.


File: efaq.info,  Node: Emacs ignores frame parameters,  Next: Editing files with $ in the name,  Prev: Emacs ignores X resources,  Up: Bugs and problems

6.7 Why don’t my customizations of the frame parameters work?
=============================================================

This probably happens because you have set the frame parameters in the
variable ‘initial-frame-alist’.  That variable holds parameters used
only for the first frame created when Emacs starts.  To customize the
parameters of all frames, change the variable ‘default-frame-alist’
instead.

   These two variables exist because many users customize the initial
frame in a special way.  For example, you could determine the position
and size of the initial frame, but would like to control the geometry of
the other frames by individually positioning each one of them.


File: efaq.info,  Node: Editing files with $ in the name,  Next: Shell mode loses the current directory,  Prev: Emacs ignores frame parameters,  Up: Bugs and problems

6.8 How do I edit a file with a ‘$’ in its name?
================================================

When entering a file name in the minibuffer, Emacs will attempt to
expand a ‘$’ followed by a word as an environment variable.  To suppress
this behavior, type ‘$$’ instead.


File: efaq.info,  Node: Shell mode loses the current directory,  Next: Security risks with Emacs,  Prev: Editing files with $ in the name,  Up: Bugs and problems

6.9 Why does shell mode lose track of the shell’s current directory?
====================================================================

Emacs has no way of knowing when the shell actually changes its
directory.  This is an intrinsic limitation of Unix.  So it tries to
guess by recognizing ‘cd’ commands.  If you type ‘cd’ followed by
directory with a variable reference (‘cd $HOME/bin’) or with a shell
metacharacter (‘cd ../lib*’), Emacs will fail to correctly guess the
shell’s new current directory.  A huge variety of fixes and enhancements
to shell mode for this problem have been written to handle this problem
(*note Finding a package with particular functionality::).

   You can tell Emacs the shell’s current directory with the command
‘M-x dirs’.


File: efaq.info,  Node: Security risks with Emacs,  Next: Dired claims that no file is on this line,  Prev: Shell mode loses the current directory,  Up: Bugs and problems

6.10 Are there any security risks in Emacs?
===========================================

   • Third party packages.

     Any package you install into Emacs can run arbitrary code with the
     same privileges as the Emacs process itself.  Be aware of this when
     you use the package system (e.g.  ‘M-x list-packages’) with third
     party archives.  Use only third parties that you can trust!

   • The ‘file-local-variable’ feature.  (Yes, a risk, but easy to
     change.)

     There is an Emacs feature that allows the setting of local values
     for variables when editing a file by including specially formatted
     text near the end of the file.  This feature also includes the
     ability to have arbitrary Emacs Lisp code evaluated when the file
     is visited.  Obviously, there is a potential for Trojan horses to
     exploit this feature.

     As of Emacs 22, Emacs has a list of local variables that are known
     to be safe to set.  If a file tries to set any variable outside
     this list, it asks the user to confirm whether the variables should
     be set.  You can also tell Emacs whether to allow the evaluation of
     Emacs Lisp code found at the bottom of files by setting the
     variable ‘enable-local-eval’.

     *Note (emacs)File Variables::.

   • Synthetic X events.  (Yes, a risk; use ‘MIT-MAGIC-COOKIE-1’ or
     better.)

     Emacs accepts synthetic X events generated by the ‘SendEvent’
     request as though they were regular events.  As a result, if you
     are using the trivial host-based authentication, other users who
     can open X connections to your X workstation can make your Emacs
     process do anything, including run other processes with your
     privileges.

     The only fix for this is to prevent other users from being able to
     open X connections.  The standard way to prevent this is to use a
     real authentication mechanism, such as ‘MIT-MAGIC-COOKIE-1’.  If
     using the ‘xauth’ program has any effect, then you are probably
     using ‘MIT-MAGIC-COOKIE-1’.  Your site may be using a superior
     authentication method; ask your system administrator.

     If real authentication is not a possibility, you may be satisfied
     by just allowing hosts access for brief intervals while you start
     your X programs, then removing the access.  This reduces the risk
     somewhat by narrowing the time window when hostile users would have
     access, but _does not eliminate the risk_.

     On most computers running Unix and X, you enable and disable access
     using the ‘xhost’ command.  To allow all hosts access to your X
     server, use

          xhost +

     at the shell prompt, which (on an HP machine, at least) produces
     the following message:

          access control disabled, clients can connect from any host

     To deny all hosts access to your X server (except those explicitly
     allowed by name), use

          xhost -

     On the test HP computer, this command generated the following
     message:

          access control enabled, only authorized clients can connect


File: efaq.info,  Node: Dired claims that no file is on this line,  Prev: Security risks with Emacs,  Up: Bugs and problems

6.11 Dired says, ‘no file on this line’ when I try to do something.
===================================================================

Dired uses a regular expression to find the beginning of a file name.
In a long Unix-style directory listing (‘ls -l’), the file name starts
after the date.  The regexp has thus been written to look for the date.
By default, it should understand dates and times regardless of the
language, but if your directory listing has an unusual format, Dired may
get confused.

   There are two approaches to solving this.  The first one involves
setting things up so that ‘ls -l’ outputs a more standard format.  See
your OS manual for more information.

   The second approach involves changing the regular expression used by
dired, ‘directory-listing-before-filename-regexp’.


File: efaq.info,  Node: Compiling and installing Emacs,  Next: Finding Emacs and related packages,  Prev: Bugs and problems,  Up: Top

7 Compiling and installing Emacs
********************************

* Menu:

* Installing Emacs::
* Problems building Emacs::


File: efaq.info,  Node: Installing Emacs,  Next: Problems building Emacs,  Up: Compiling and installing Emacs

7.1 How do I install Emacs?
===========================

This answer is meant for users of Unix and Unix-like systems.  Users of
other operating systems should see the series of questions beginning
with *note Emacs for MS-DOS::, which describe where to get non-Unix
source and binaries, and how to install Emacs on those systems.

   Most GNU/Linux distributions provide pre-built Emacs packages.  If
Emacs is not installed already, you can install it by running (as root)
a command such as ‘dnf install emacs’ (Red Hat and derivatives; use
‘yum’ in older distributions) or ‘apt-get install emacs’ (Debian and
derivatives).

   If you want to compile Emacs yourself, read the file ‘INSTALL’ in the
source distribution.  In brief:

   • First download the Emacs sources.  *Note Current GNU
     distributions::, for a list of sites that make them available.  On
     <https://ftp.gnu.org>, the main GNU distribution site, sources are
     available as

     <https://ftp.gnu.org/pub/gnu/emacs/emacs-VERSION.tar.gz>

     (Replace ‘VERSION’ with the relevant version number, e.g., ‘23.1’.)

   • Next uncompress and extract the source files.  This requires the
     ‘gzip’ and ‘tar’ programs, which are standard utilities.  If your
     system does not have them, these can also be downloaded from
     <https://ftp.gnu.org>.

     GNU ‘tar’ can uncompress and extract in a single-step:

          tar -zxvf emacs-VERSION.tar.gz

   • At this point, the Emacs sources should be sitting in a directory
     called ‘emacs-VERSION’.  On most common Unix and Unix-like systems,
     you should be able to compile Emacs with the following commands:

          cd emacs-VERSION
          ./configure         # configure Emacs for your particular system
          make                # use Makefile to build components, then Emacs

     If the ‘make’ completes successfully, the odds are fairly good that
     the build has gone well.  (*Note Problems building Emacs::, if you
     weren’t successful.)

   • By default, Emacs is installed in ‘/usr/local’.  To actually
     install files, become the superuser and type

          make install

     Note that ‘make install’ will overwrite ‘/usr/local/bin/emacs’ and
     any Emacs Info files that might be in ‘/usr/local/share/info/’.


File: efaq.info,  Node: Problems building Emacs,  Prev: Installing Emacs,  Up: Compiling and installing Emacs

7.2 What should I do if I have trouble building Emacs?
======================================================

First look in the file ‘etc/PROBLEMS’ (where you unpack the Emacs
source) to see if there is already a solution for your problem.  Next,
look for other questions in this FAQ that have to do with Emacs
installation and compilation problems.

   If you’d like to have someone look at your problem and help solve it,
see *note Help installing Emacs::.

   If you cannot find a solution in the documentation, please report the
problem (*note Reporting bugs::).


File: efaq.info,  Node: Finding Emacs and related packages,  Next: Key bindings,  Prev: Compiling and installing Emacs,  Up: Top

8 Finding Emacs and related packages
************************************

* Menu:

* Finding Emacs on the Internet::
* Finding a package with particular functionality::
* Packages that do not come with Emacs::
* Spell-checkers::
* Current GNU distributions::
* Difference between Emacs and XEmacs::
* Emacs for minimalists::
* Emacs for MS-DOS::
* Emacs for MS-Windows::
* Emacs for GNUstep::
* Emacs for macOS::


File: efaq.info,  Node: Finding Emacs on the Internet,  Next: Finding a package with particular functionality,  Up: Finding Emacs and related packages

8.1 Where can I get Emacs on the net?
=====================================

Information on downloading Emacs is available at the Emacs home-page
(https://www.gnu.org/software/emacs/).

   *Note Installing Emacs::, for information on how to obtain and build
the latest version of Emacs, and see *note Current GNU distributions::,
for a list of archive sites that make GNU software available.


File: efaq.info,  Node: Finding a package with particular functionality,  Next: Packages that do not come with Emacs,  Prev: Finding Emacs on the Internet,  Up: Finding Emacs and related packages

8.2 How do I find an Emacs Lisp package that does XXX?
======================================================

First of all, you should check to make sure that the package isn’t
already available.  For example, typing ‘M-x apropos <RET> python <RET>’
lists all functions and variables containing the string ‘python’.

   It is also possible that the package is on your system, but has not
been loaded.  To see which packages are available for loading, look
through your computer’s lisp directory (*note File-name conventions::).
The Lisp source to most packages contains a short description of how
they should be loaded, invoked, and configured—so before you use or
modify a Lisp package, see if the author has provided any hints in the
source code.

   The command ‘C-h p’ (‘finder-by-keyword’) allows you to browse the
constituent Emacs packages.

   For advice on how to find extra packages that are not part of Emacs,
see *note Packages that do not come with Emacs::.


File: efaq.info,  Node: Packages that do not come with Emacs,  Next: Spell-checkers,  Prev: Finding a package with particular functionality,  Up: Finding Emacs and related packages

8.3 Where can I get Emacs Lisp packages that don’t come with Emacs?
===================================================================

The easiest way to add more features to your Emacs is to use the command
‘M-x list-packages’.  This contacts the GNU ELPA (https://elpa.gnu.org)
(“Emacs Lisp Package Archive”) server and fetches the list of additional
packages that it offers.  These are GNU packages that are available for
use with Emacs, but are distributed separately from Emacs itself, for
reasons of space, etc.  You can browse the resulting ‘*Packages*’ buffer
to see what is available, and then Emacs can automatically download and
install the packages that you select.  *Note (emacs)Packages::.

   There are other Emacs Lisp package archives.  To use additional
archives, you can customize the ‘package-archives’ variable.  Those
archives have no affiliation with GNU Emacs, and we do not monitor how
they are maintained.  They may pay close attention to correctness and
safety of the code, or they may give only cursory attention.

   Also, packages hosted on these other archives may encourage or
require you to install and use other nonfree programs.  Unless you can
verify that a package is free software, and that it functions without
installing any nonfree software, we recommend for your freedom’s sake
that you stay away from it.

   The GNU Emacs sources mailing list
(https://lists.gnu.org/mailman/listinfo/gnu-emacs-sources), which is
gatewayed to the Emacs sources newsgroup (news:gnu.emacs.sources)
(although the connection between the two can be unreliable) is an
official place where people can post or announce their extensions to
Emacs.

   The Emacs Wiki (https://emacswiki.org) contains pointers to some
additional extensions.  WikEmacs (https://wikemacs.org) is an
alternative wiki for Emacs.

   The Emacs Lisp List (ELL)
(http://www.damtp.cam.ac.uk/user/sje30/emacs/ell.html), has pointers to
many Emacs Lisp files, but at time of writing it is no longer being
updated.

   It is impossible for us to list here all the sites that offer Emacs
Lisp packages.  If you are interested in a specific feature, then after
checking Emacs itself and GNU ELPA, a web search is often the best way
to find results.


File: efaq.info,  Node: Spell-checkers,  Next: Current GNU distributions,  Prev: Packages that do not come with Emacs,  Up: Finding Emacs and related packages

8.4 Spell-checkers
==================

Various spell-checkers are compatible with Emacs, including:

Hunspell
     <http://hunspell.sourceforge.net/>

GNU Aspell
     <http://aspell.net/>

Ispell
     <http://fmg-www.cs.ucla.edu/geoff/ispell.html>

Enchant
     <https://abiword.github.io/enchant/>


File: efaq.info,  Node: Current GNU distributions,  Next: Difference between Emacs and XEmacs,  Prev: Spell-checkers,  Up: Finding Emacs and related packages

8.5 Where can I get other up-to-date GNU stuff?
===============================================

The most up-to-date official GNU software is normally kept at

   <https://ftp.gnu.org/pub/gnu>

   A list of sites mirroring ‘ftp.gnu.org’ can be found at

   <https://www.gnu.org/prep/ftp>


File: efaq.info,  Node: Difference between Emacs and XEmacs,  Next: Emacs for minimalists,  Prev: Current GNU distributions,  Up: Finding Emacs and related packages

8.6 What is the difference between Emacs and XEmacs (formerly Lucid Emacs)?
===========================================================================

XEmacs was a branch version of Emacs that is no longer actively
developed.  XEmacs was first called Lucid Emacs, and was initially
derived from a prerelease version of Emacs 19.  In this FAQ, we use the
name “Emacs” only for the official version.

   XEmacs last released a new version on January 30, 2009, and it lacks
many important features that exists in Emacs.  In the past, it was not
uncommon for Emacs packages to include code for compatibility with
XEmacs.  Nowadays, although some packages still maintain such
compatibility code, several of the more popular built-in and third party
packages have either stopped supporting XEmacs or were developed
exclusively for Emacs.

   Some XEmacs code has been contributed to Emacs, and we would like to
use other parts, but the earlier XEmacs maintainers did not always keep
track of the authors of contributed code, which makes it impossible for
the FSF to get copyright papers signed for that code.  (The FSF requires
these papers for all the code included in the Emacs release, aside from
generic C support packages that retain their separate identity and are
not integrated into the code of Emacs proper.)

   If you want to talk about these two versions and distinguish them,
please call them “Emacs” and “XEmacs.” To contrast “XEmacs” with “GNU
Emacs” would be misleading, since XEmacs too has its origin in the work
of the GNU Project.  Terms such as “Emacsen” and “(X)Emacs” are not
wrong, but they are not very clear, so it is better to write “Emacs and
XEmacs.”


File: efaq.info,  Node: Emacs for minimalists,  Next: Emacs for MS-DOS,  Prev: Difference between Emacs and XEmacs,  Up: Finding Emacs and related packages

8.7 I don’t have enough disk space to install Emacs
===================================================

GNU Zile is a lightweight Emacs clone.  Zile is short for ‘Zile Is Lossy
Emacs’.  It has all of Emacs’s basic editing features.  The Zile binary
typically has a size of about 130 kbytes, so this can be useful if you
are in an extremely space-restricted environment.  More information is
available from

   <https://www.gnu.org/software/zile/>


File: efaq.info,  Node: Emacs for MS-DOS,  Next: Emacs for MS-Windows,  Prev: Emacs for minimalists,  Up: Finding Emacs and related packages

8.8 Where can I get Emacs for MS-DOS?
=====================================

To build Emacs from source for MS-DOS, see the instructions in the file
‘msdos/INSTALL’ in the distribution.  The DOS port builds and runs on
plain DOS, and also on all versions of MS-Windows from version 3.X
onwards, including Windows XP and Vista.

   The file ‘etc/PROBLEMS’ contains some additional information
regarding Emacs under MS-DOS.

   A pre-built binary distribution of the old Emacs 24 is available, as
described at

   <http://www.delorie.com/pub/djgpp/current/v2gnu/emacs.README>

   For a list of other MS-DOS implementations of Emacs (and Emacs
look-alikes), consult the list of “Emacs implementations and
literature,” available at

   <http://www.finseth.com/emacs.html>

   Note that while many of these programs look similar to Emacs, they
often lack certain features, such as the Emacs Lisp extension language.


File: efaq.info,  Node: Emacs for MS-Windows,  Next: Emacs for GNUstep,  Prev: Emacs for MS-DOS,  Up: Finding Emacs and related packages

8.9 Where can I get Emacs for Microsoft Windows?
================================================

There is a separate FAQ for Emacs on MS-Windows, *note (efaq-w32)Top::.
For MS-DOS, *note Emacs for MS-DOS::.


File: efaq.info,  Node: Emacs for GNUstep,  Next: Emacs for macOS,  Prev: Emacs for MS-Windows,  Up: Finding Emacs and related packages

8.10 Where can I get Emacs for GNUstep?
=======================================

Beginning with version 23.1, Emacs supports GNUstep natively.  See the
file ‘nextstep/INSTALL’ in the distribution.


File: efaq.info,  Node: Emacs for macOS,  Prev: Emacs for GNUstep,  Up: Finding Emacs and related packages

8.11 Where can I get Emacs for macOS?
=====================================

Beginning with version 22.1, Emacs supports macOS natively.  See the
file ‘nextstep/INSTALL’ in the distribution.


File: efaq.info,  Node: Key bindings,  Next: Alternate character sets,  Prev: Finding Emacs and related packages,  Up: Top

9 Key bindings
**************

* Menu:

* Binding keys to commands::
* Invalid prefix characters::
* Terminal setup code works after Emacs has begun::
* Working with function and arrow keys::
* X key translations for Emacs::
* Backspace invokes help::
* Swapping keys::
* Producing C-XXX with the keyboard::
* No Meta key::
* No Escape key::
* Compose Character::
* Binding combinations of modifiers and function keys::
* Meta key does not work in xterm::
* ExtendChar key does not work as Meta::
* SPC no longer completes file names::


File: efaq.info,  Node: Binding keys to commands,  Next: Invalid prefix characters,  Up: Key bindings

9.1 How do I bind keys (including function keys) to commands?
=============================================================

Keys can be bound to commands either interactively or in your ‘.emacs’
file.  To interactively bind keys for all modes, type ‘M-x
global-set-key <RET> KEY CMD <RET>’.

   To bind a key just in the current major mode, type ‘M-x local-set-key
<RET> KEY CMD <RET>’.

   *Note (emacs)Key Bindings::.

   To make the process of binding keys interactively easier, use the
following “trick”: First bind the key interactively, then immediately
type ‘C-x <ESC> <ESC> C-a C-k C-g’.  Now, the command needed to bind the
key is in the kill ring, and can be yanked into your ‘.emacs’ file.  If
the key binding is global, no changes to the command are required.  For
example,

     (global-set-key [f1] 'help-for-help)

can be placed directly into the ‘.emacs’ file.  If the key binding is
local, the command is used in conjunction with the ‘add-hook’ function.
For example, in TeX mode, a local binding might be

     (add-hook 'tex-mode-hook
       (lambda ()
        (local-set-key [f1] 'help-for-help)))

   • Control characters in key sequences, in the form yanked from the
     kill ring are given in their graphic form—i.e., <CTRL> is shown as
     ‘^’, <TAB> as a set of spaces (usually 8), etc.  You may want to
     convert these into their vector or string forms.

   • If a prefix key of the character sequence to be bound is already
     bound as a complete key, then you must unbind it before the new
     binding.  For example, if ‘ESC {’ is previously bound:

          (global-unset-key [?\e ?{])   ;;   or
          (local-unset-key [?\e ?{])

   • Aside from commands and “lambda lists,” a vector or string also can
     be bound to a key and thus treated as a macro.  For example:

          (global-set-key [f10] [?\C-x?\e?\e?\C-a?\C-k?\C-g])  ;;  or
          (global-set-key [f10] "\C-x\e\e\C-a\C-k\C-g")


File: efaq.info,  Node: Invalid prefix characters,  Next: Terminal setup code works after Emacs has begun,  Prev: Binding keys to commands,  Up: Key bindings

9.2 Why does Emacs say ‘Key sequence XXX uses invalid prefix characters’?
=========================================================================

Usually, one of two things has happened.  In one case, the control
character in the key sequence has been misspecified (e.g., ‘C-f’ used
instead of ‘\C-f’ within a Lisp expression).  In the other case, a
“prefix key” in the keystroke sequence you were trying to bind was
already bound as a “complete key”.  Historically, the ‘ESC [’ prefix was
usually the problem, in which case you should evaluate either of these
forms before attempting to bind the key sequence:

     (global-unset-key [?\e ?[])  ;;  or
     (global-unset-key "\e[")


File: efaq.info,  Node: Terminal setup code works after Emacs has begun,  Next: Working with function and arrow keys,  Prev: Invalid prefix characters,  Up: Key bindings

9.3 Why doesn’t this [terminal or window-system setup] code work in my ‘.emacs’ file, but it works just fine after Emacs starts up?
===================================================================================================================================

During startup, Emacs initializes itself according to a given code/file
order.  If some of the code executed in your ‘.emacs’ file needs to be
postponed until the initial terminal or window-system setup code has
been executed but is not, then you will experience this problem (this
code/file execution order is not enforced after startup).

   To postpone the execution of Emacs Lisp code until after terminal or
window-system setup, treat the code as a “lambda list” and add it to
‘emacs-startup-hook’ (or ‘tty-setup-hook’ in Emacs 24.4 and newer).  For
example,

     (add-hook 'emacs-startup-hook
               (lambda ()
                (when (string-match "\\`vt220" (or (getenv "TERM") ""))
                  ;; Make vt220's "Do" key behave like M-x:
                  (global-set-key [do] 'execute-extended-command))))

   For information on what Emacs does every time it is started, see the
‘lisp/startup.el’ file.


File: efaq.info,  Node: Working with function and arrow keys,  Next: X key translations for Emacs,  Prev: Terminal setup code works after Emacs has begun,  Up: Key bindings

9.4 How do I tell what characters or symbols my function or arrow keys emit?
============================================================================

Type ‘C-h c’ then the function or arrow keys.  The command will return
either a function key symbol or character sequence (see the Emacs
documentation for an explanation).  This works for other keys as well.


File: efaq.info,  Node: X key translations for Emacs,  Next: Backspace invokes help,  Prev: Working with function and arrow keys,  Up: Key bindings

9.5 How do I set the X key “translations” for Emacs?
====================================================

Emacs is not written using the Xt library by default, so there are no
“translations” to be set.  (We aren’t sure how to set such translations
if you do build Emacs with Xt; please let us know if you’ve done this!)

   The only way to affect the behavior of keys within Emacs is through
‘xmodmap’ (outside Emacs) or ‘define-key’ (inside Emacs).  The
‘define-key’ command should be used in conjunction with the
‘local-function-key-map’ map.  For instance,

     (define-key function-key-map [M-<TAB>] [?\M-\t])

defines the ‘M-<TAB>’ key sequence.


File: efaq.info,  Node: Backspace invokes help,  Next: Swapping keys,  Prev: X key translations for Emacs,  Up: Key bindings

9.6 Why does the <Backspace> key invoke help?
=============================================

The <Backspace> key (on most keyboards) generates ASCII code 8.  ‘C-h’
sends the same code.  In Emacs by default ‘C-h’ invokes help-command.
This is intended to be easy to remember since the first letter of ‘help’
is ‘h’.  The easiest solution to this problem is to use ‘C-h’ (and
<Backspace>) for help and <DEL> (the <Delete> key) for deleting the
previous character.

   For many people this solution may be problematic:

   • They normally use <Backspace> outside of Emacs for deleting the
     previous character.  This can be solved by making <DEL> the command
     for deleting the previous character outside of Emacs.  On many Unix
     systems, this command will remap <DEL>:

          stty erase '^?'

   • The user may prefer the <Backspace> key for deleting the previous
     character because it is more conveniently located on their keyboard
     or because they don’t even have a separate <Delete> key.  In this
     case, the <Backspace> key should be made to behave like <Delete>.
     There are several methods.

        − Some terminals (e.g., VT3## terminals) and terminal emulators
          (e.g., TeraTerm) allow the character generated by the
          <Backspace> key to be changed from a setup menu.

        − You may be able to get a keyboard that is completely
          programmable, or a terminal emulator that supports remapping
          of any key to any other key.

        − With Emacs 21.1 and later, you can control the effect of the
          <Backspace> and <Delete> keys, on both dumb terminals and a
          windowed displays, by customizing the option
          ‘normal-erase-is-backspace-mode’, or by invoking ‘M-x
          normal-erase-is-backspace’.  See the documentation of these
          symbols (*note Emacs Lisp documentation::) for more info.

        − It is possible to swap the <Backspace> and <DEL> keys inside
          Emacs:

               (keyboard-translate ?\C-h ?\C-?)

          This is the recommended method of forcing <Backspace> to act
          as <DEL>, because it works even in modes which bind <DEL> to
          something other than ‘delete-backward-char’.

          Similarly, you could remap <DEL> to act as ‘C-d’, which by
          default deletes forward:

               (keyboard-translate ?\C-? ?\C-d)

          *Note Swapping keys::, for further details about
          ‘keyboard-translate’.

        − Another approach is to switch key bindings and put help on
          ‘C-x h’ instead:

               (global-set-key "\C-h" 'delete-backward-char)

               ;; overrides mark-whole-buffer
               (global-set-key "\C-xh" 'help-command)

          This method is not recommended, though: it only solves the
          problem for those modes which bind <DEL> to
          ‘delete-backward-char’.  Modes which bind <DEL> to something
          else, such as ‘view-mode’, will not work as you expect when
          you press the <Backspace> key.  For this reason, we recommend
          the ‘keyboard-translate’ method, shown above.

          Other popular key bindings for help are ‘M-?’ and ‘C-x ?’.

     Don’t try to bind <DEL> to ‘help-command’, because there are many
     modes that have local bindings of <DEL> that will interfere.

   When Emacs 21 or later runs on a windowed display, it binds the
<Delete> key to a command which deletes the character at point, to make
Emacs more consistent with keyboard operation on these systems.

   For more information about troubleshooting this problem, see *note If
<DEL> Fails to Delete: (emacs)DEL Does Not Delete.


File: efaq.info,  Node: Swapping keys,  Next: Producing C-XXX with the keyboard,  Prev: Backspace invokes help,  Up: Key bindings

9.7 How do I swap two keys?
===========================

You can swap two keys (or key sequences) by using the
‘keyboard-translate’ function.  For example, to turn ‘C-h’ into <DEL>
and <DEL> to ‘C-h’, use

     (keyboard-translate ?\C-h ?\C-?)  ; translate 'C-h' to DEL
     (keyboard-translate ?\C-? ?\C-h)  ; translate DEL to 'C-h'.

The first key sequence of the pair after the function identifies what is
produced by the keyboard; the second, what is matched for in the
keymaps.

   However, in the specific case of ‘C-h’ and <DEL>, you should toggle
‘normal-erase-is-backspace-mode’ instead of calling
‘keyboard-translate’.  *Note (emacs)DEL Does Not Delete::.

   Keyboard translations are not the same as key bindings in keymaps.
Emacs contains numerous keymaps that apply in different situations, but
there is only one set of keyboard translations, and it applies to every
character that Emacs reads from the terminal.  Keyboard translations
take place at the lowest level of input processing; the keys that are
looked up in keymaps contain the characters that result from keyboard
translation.


File: efaq.info,  Node: Producing C-XXX with the keyboard,  Next: No Meta key,  Prev: Swapping keys,  Up: Key bindings

9.8 How do I produce C-XXX with my keyboard?
============================================

On terminals (but not under X), some common “aliases” are:

‘C-2’ or ‘C-<SPC>’
     ‘C-@’

‘C-6’
     ‘C-^’

‘C-7’ or ‘C-S--’
     ‘C-_’

‘C-4’
     ‘C-\’

‘C-5’
     ‘C-]’

‘C-/’
     ‘C-?’

   Often other aliases exist; use the ‘C-h c’ command and try <CTRL>
with all of the digits on your keyboard to see what gets generated.  You
can also try the ‘C-h w’ command if you know the name of the command.


File: efaq.info,  Node: No Meta key,  Next: No Escape key,  Prev: Producing C-XXX with the keyboard,  Up: Key bindings

9.9 What if I don’t have a <Meta> key?
======================================

On many keyboards, the <Alt> key acts as <Meta>, so try it.

   Instead of typing ‘M-a’, you can type ‘<ESC> a’.  In fact, Emacs
converts ‘M-a’ internally into ‘<ESC> a’ anyway (depending on the value
of ‘meta-prefix-char’).  Note that you press <Meta> and ‘a’ together,
but with <ESC>, you press <ESC>, release it, and then press ‘a’.


File: efaq.info,  Node: No Escape key,  Next: Compose Character,  Prev: No Meta key,  Up: Key bindings

9.10 What if I don’t have an <Escape> key?
==========================================

Type ‘C-[’ instead.  This should send ASCII code 27 just like an Escape
key would.  ‘C-3’ may also work on some terminal (but not under X). For
many terminals (notably DEC terminals) <F11> generates <ESC>.  If not,
the following form can be used to bind it:

     ;; F11 is the documented ESC replacement on DEC terminals.
     (define-key function-key-map [f11] [?\e])


File: efaq.info,  Node: Compose Character,  Next: Binding combinations of modifiers and function keys,  Prev: No Escape key,  Up: Key bindings

9.11 Can I make my <Compose Character> key behave like a <Meta> key?
====================================================================

On a dumb terminal such as a VT220, no.  It is rumored that certain
VT220 clones could have their <Compose> key configured this way.  If
you’re using X, you might be able to do this with the ‘xmodmap’ command.


File: efaq.info,  Node: Binding combinations of modifiers and function keys,  Next: Meta key does not work in xterm,  Prev: Compose Character,  Up: Key bindings

9.12 How do I bind a combination of modifier key and function key?
==================================================================

You can represent modified function keys in vector format by adding
prefixes to the function key symbol.  For example (from the Emacs
documentation):

     (global-set-key [?\C-x right] 'forward-page)

where ‘?\C-x’ is the Lisp character constant for the character ‘C-x’.

   You can use the modifier keys <Control>, <Meta>, <Hyper>, <Super>,
<Alt>, and <Shift> with function keys.  To represent these modifiers,
prepend the strings ‘C-’, ‘M-’, ‘H-’, ‘s-’, ‘A-’, and ‘S-’ to the symbol
name.  Here is how to make ‘H-M-RIGHT’ move forward a word:

     (global-set-key [H-M-right] 'forward-word)

   • Not all modifiers are permitted in all situations.  <Hyper>,
     <Super>, and <Alt> are not available on Unix character terminals.
     Non-ASCII keys and mouse events (e.g., ‘C-=’ and ‘mouse-1’) also
     fall under this category.

   *Note Binding keys to commands::, for general key binding
instructions.


File: efaq.info,  Node: Meta key does not work in xterm,  Next: ExtendChar key does not work as Meta,  Prev: Binding combinations of modifiers and function keys,  Up: Key bindings

9.13 Why doesn’t my <Meta> key work in an ‘xterm’ window?
=========================================================

*Note Single-Byte Character Set Support: (emacs)Unibyte Mode.

   If the advice in the Emacs manual fails, try all of these methods
before asking for further help:

   • You may have big problems using ‘mwm’ as your window manager.
     (Does anyone know a good generic solution to allow the use of the
     <Meta> key in Emacs with ‘mwm’?)

   • For X11: Make sure it really is a <Meta> key.  Use ‘xev’ to find
     out what keysym your <Meta> key generates.  It should be either
     ‘Meta_L’ or ‘Meta_R’.  If it isn’t, use ‘xmodmap’ to fix the
     situation.  If <Meta> does generate ‘Meta_L’ or ‘Meta_R’, but ‘M-x’
     produces a non-ASCII character, put this in your ‘~/.Xdefaults’
     file:

           XTerm*eightBitInput:   false
           XTerm*eightBitOutput:  true

   • Make sure the ‘pty’ the ‘xterm’ is using is passing 8 bit
     characters.  ‘stty -a’ (or ‘stty everything’) should show ‘cs8’
     somewhere.  If it shows ‘cs7’ instead, use ‘stty cs8 -istrip’ (or
     ‘stty pass8’) to fix it.

   • If there is an ‘rlogin’ connection between ‘xterm’ and Emacs, the
     ‘-8’ argument may need to be given to rlogin to make it pass all 8
     bits of every character.

   • If Emacs is running on Ultrix, it is reported that evaluating
     ‘(set-input-mode t nil)’ helps.

   • If all else fails, you can make ‘xterm’ generate ‘<ESC> W’ when you
     type ‘M-W’, which is the same conversion Emacs would make if it got
     the ‘M-W’ anyway.  In X11R4, the following resource specification
     will do this:

          XTerm.VT100.EightBitInput: false

     (This changes the behavior of the ‘insert-eight-bit’ action.)

     With older ‘xterm’s, you can specify this behavior with a
     translation:

          XTerm.VT100.Translations: #override \
            Meta<KeyPress>: string(0x1b) insert()

     You might have to replace ‘Meta’ with ‘Alt’.


File: efaq.info,  Node: ExtendChar key does not work as Meta,  Next: SPC no longer completes file names,  Prev: Meta key does not work in xterm,  Up: Key bindings

9.14 Why doesn’t my <ExtendChar> key work as a <Meta> key under HP-UX 8.0 and 9.x?
==================================================================================

This is a result of an internationalization extension in X11R4 and the
fact that HP is now using this extension.  Emacs assumes that the
‘XLookupString’ function returns the same result regardless of the
<Meta> key state which is no longer necessarily true.  Until Emacs is
fixed, the temporary kludge is to run this command after each time the X
server is started but preferably before any xterm clients are:

     xmodmap -e 'remove mod1 = Mode_switch'

   This will disable the use of the extra keysyms systemwide, which may
be undesirable if you actually intend to use them.


File: efaq.info,  Node: SPC no longer completes file names,  Prev: ExtendChar key does not work as Meta,  Up: Key bindings

9.15 Why doesn’t <SPC> complete file names anymore?
===================================================

Starting with Emacs 22.1, ‘SPC’ no longer completes file names in the
minibuffer, so that file names with embedded spaces could be typed
without the need to quote the spaces.

   You can get the old behavior by binding ‘SPC’ to
‘minibuffer-complete-word’ in the minibuffer, as follows:

     (define-key minibuffer-local-filename-completion-map (kbd "SPC")
       'minibuffer-complete-word)

     (define-key minibuffer-local-must-match-filename-map (kbd "SPC")
       'minibuffer-complete-word)


File: efaq.info,  Node: Alternate character sets,  Next: Mail and news,  Prev: Key bindings,  Up: Top

10 Alternate character sets
***************************

* Menu:

* Emacs does not display 8-bit characters::
* Inputting eight-bit characters::
* Right-to-left alphabets::
* How to add fonts::


File: efaq.info,  Node: Emacs does not display 8-bit characters,  Next: Inputting eight-bit characters,  Up: Alternate character sets

10.1 How do I make Emacs display 8-bit characters?
==================================================

*Note Single-byte Character Set Support: (emacs)Unibyte Mode.  On a
Unix, when Emacs runs on a text-only terminal display or is invoked with
‘emacs -nw’, you typically need to use ‘set-terminal-coding-system’ to
tell Emacs what the terminal can display, even after setting the
language environment; otherwise non-ASCII characters will display as
‘?’.  On other operating systems, such as MS-DOS and MS-Windows, Emacs
queries the OS about the character set supported by the display, and
sets up the required terminal coding system automatically.


File: efaq.info,  Node: Inputting eight-bit characters,  Next: Right-to-left alphabets,  Prev: Emacs does not display 8-bit characters,  Up: Alternate character sets

10.2 How do I input eight-bit characters?
=========================================

Various methods are available for input of eight-bit characters.  *Note
Single-byte Character Set Support: (emacs)Unibyte Mode.  For more
sophisticated methods, *note (emacs)Input Methods::.


File: efaq.info,  Node: Right-to-left alphabets,  Next: How to add fonts,  Prev: Inputting eight-bit characters,  Up: Alternate character sets

10.3 Where is an Emacs that can handle Semitic (right-to-left) alphabets?
=========================================================================

Emacs supports display and editing of bidirectional scripts, such as
Arabic, Farsi, and Hebrew, since version 24.1.  *Note bidirectional
display: New in Emacs 24.


File: efaq.info,  Node: How to add fonts,  Prev: Right-to-left alphabets,  Up: Alternate character sets

10.4 How do I add fonts for use with Emacs?
===========================================

First, download and install the BDF font files and any auxiliary
packages they need.  The GNU Intlfonts distribution can be found on the
GNU Software Directory Web site
(https://directory.fsf.org/localization/intlfonts.html).

   Next, if you are on X Window system, issue the following two commands
from the shell’s prompt:

       xset +fp /usr/local/share/emacs/fonts
       xset fp rehash

(Modify the first command if you installed the fonts in a directory that
is not ‘/usr/local/share/emacs/fonts’.)  You also need to arrange for
these two commands to run whenever you log in, e.g., by adding them to
your window-system startup file, such as ‘~/.xsessionrc’ or
‘~/.gnomerc’.

   Now, add the following line to your ‘~/.emacs’ init file:

       (add-to-list 'bdf-directory-list "/usr/share/emacs/fonts/bdf")

(Again, modify the file name if you installed the fonts elsewhere.)

   Finally, if you wish to use the installed fonts with ‘ps-print’, add
the following line to your ‘~/.emacs’:

       (setq ps-multibyte-buffer 'bdf-font-except-latin)

   A few additional steps are necessary for MS-Windows; they are listed
below.

   First, make sure _all_ the directories with BDF font files are
mentioned in ‘bdf-directory-list’.  On Unix and GNU/Linux systems, one
normally runs ‘make install’ to install the BDF fonts in the same
directory.  By contrast, Windows users typically don’t run the Intlfonts
installation command, but unpack the distribution in some directory,
which leaves the BDF fonts in its subdirectories.  For example, assume
that you unpacked Intlfonts in ‘C:/Intlfonts’; then you should set
‘bdf-directory-list’ as follows:

       (setq bdf-directory-list
         '("C:/Intlfonts/Asian"
           "C:/Intlfonts/Chinese" "C:/Intlfonts/Chinese.X"
           "C:/Intlfonts/Chinese.BIG" "C:/Intlfonts/Ethiopic"
           "C:/Intlfonts/European" "C:/Intlfonts/European.BIG"
           "C:/Intlfonts/Japanese" "C:/Intlfonts/Japanese.X"
           "C:/Intlfonts/Japanese.BIG" "C:/Intlfonts/Korean.X"
           "C:/Intlfonts/Misc"))

   Next, you need to set up the variable ‘w32-bdf-filename-alist’ to an
alist of the BDF fonts and their corresponding file names.  Assuming you
have set ‘bdf-directory-list’ to name all the directories with the BDF
font files, the following Lisp snippet will set up
‘w32-bdf-filename-alist’:

       (setq w32-bdf-filename-alist
          (w32-find-bdf-fonts bdf-directory-list))

   Now, create fontsets for the BDF fonts:

       (create-fontset-from-fontset-spec
        "-*-fixed-medium-r-normal-*-16-*-*-*-c-*-fontset-bdf,
        japanese-jisx0208:-*-*-medium-r-normal-*-16-*-*-*-c-*-jisx0208.1983-*,
        katakana-jisx0201:-*-*-medium-r-normal-*-16-*-*-*-c-*-jisx0201*-*,
        latin-jisx0201:-*-*-medium-r-normal-*-16-*-*-*-c-*-jisx0201*-*,
        japanese-jisx0208-1978:-*-*-medium-r-normal-*-16-*-*-*-c-*-jisx0208.1978-*,
        thai-tis620:-misc-fixed-medium-r-normal--16-160-72-72-m-80-tis620.2529-1,
        lao:-misc-fixed-medium-r-normal--16-160-72-72-m-80-MuleLao-1,
        tibetan-1-column:-TibMdXA-fixed-medium-r-normal--16-160-72-72-m-80-MuleTibetan-1,
        ethiopic:-Admas-Ethiomx16f-Medium-R-Normal--16-150-100-100-M-160-Ethiopic-Unicode,
        tibetan:-TibMdXA-fixed-medium-r-normal--16-160-72-72-m-160-MuleTibetan-0")

   Many of the international bdf fonts from Intlfonts are type 0, and
therefore need to be added to font-encoding-alist:

       (setq font-encoding-alist
             (append '(("MuleTibetan-0" (tibetan . 0))
                       ("GB2312"        (chinese-gb2312 . 0))
                       ("JISX0208"      (japanese-jisx0208 . 0))
                       ("JISX0212"      (japanese-jisx0212 . 0))
                       ("VISCII"        (vietnamese-viscii-lower . 0))
                       ("KSC5601"       (korean-ksc5601 . 0))
                       ("MuleArabic-0"  (arabic-digit . 0))
                       ("MuleArabic-1"  (arabic-1-column . 0))
                       ("MuleArabic-2"  (arabic-2-column . 0)))
                     font-encoding-alist))

   You can now use the Emacs font menu to select the ‘bdf: 16-dot
medium’ fontset, or you can select it by setting the default font in
your ‘~/.emacs’:

       (set-frame-font "fontset-bdf")


File: efaq.info,  Node: Mail and news,  Next: Concept index,  Prev: Alternate character sets,  Up: Top

11 Mail and news
****************

* Menu:

* Changing the included text prefix::
* Saving a copy of outgoing mail::
* Expanding aliases when sending mail::
* Sorting the messages in an Rmail folder::
* Rmail writes to /var/spool/mail::
* Replying to the sender of a message::
* Automatically starting a mail or news reader::
* Reading news with Emacs::
* Making Gnus faster::
* Catching up in all newsgroups::


File: efaq.info,  Node: Changing the included text prefix,  Next: Saving a copy of outgoing mail,  Up: Mail and news

11.1 How do I change the included text prefix in mail/news followups?
=====================================================================

If you read mail with Rmail, set the variable ‘mail-yank-prefix’.  For
Gnus, set ‘message-yank-prefix’.  For VM, set ‘vm-included-text-prefix’.
For mh-e, set ‘mh-ins-buf-prefix’.

   For fancier control of citations, use Supercite (*note the Supercite
Manual: (sc)Top.).

   To prevent Emacs from including various headers of the replied-to
message, set the value of ‘mail-yank-ignored-headers’ to an appropriate
regexp.


File: efaq.info,  Node: Saving a copy of outgoing mail,  Next: Expanding aliases when sending mail,  Prev: Changing the included text prefix,  Up: Mail and news

11.2 How do I save a copy of outgoing mail?
===========================================

You can either mail yourself a copy by including a ‘BCC’ header in the
mail message, or store a copy of the message directly to a file by
including an ‘FCC’ header.

   If you use standard mail, you can automatically create a ‘BCC’ to
yourself by putting

     (setq mail-self-blind t)

in your ‘.emacs’ file.  You can automatically include an ‘FCC’ field by
putting something like the following in your ‘.emacs’ file:

     (setq mail-archive-file-name (expand-file-name "~/outgoing"))

   The output file will be in Unix mail format.

   If you use ‘mh-e’, add an ‘FCC’ or ‘BCC’ field to your components
file.

   It does not work to put ‘set record filename’ in the ‘.mailrc’ file.


File: efaq.info,  Node: Expanding aliases when sending mail,  Next: Sorting the messages in an Rmail folder,  Prev: Saving a copy of outgoing mail,  Up: Mail and news

11.3 Why doesn’t Emacs expand my aliases when sending mail?
===========================================================

*Note The Emacs Manual: (emacs)Mail Aliases.

   • Normally, Emacs expands aliases when you send the message.  To
     expand them before this, use ‘M-x expand-mail-aliases’.

   • Emacs normally only reads the ‘.mailrc’ file once per session, when
     you start to compose your first mail message.  If you edit the file
     after this, you can use ‘M-x build-mail-aliases’ to make Emacs
     reread it.  Prior to Emacs 24.1, this is not an interactive
     command, so you must instead type ‘M-: (build-mail-aliases) <RET>’.

   • If you like, you can expand mail aliases as abbrevs, as soon as you
     type them in.  To enable this feature, execute the following:

          (add-hook 'mail-mode-hook 'mail-abbrevs-setup)

     Note that the aliases are expanded automatically only after you
     type a word-separator character (e.g., <RET> or ‘,’).  You can
     force their expansion by moving point to the end of the alias and
     typing ‘C-x a e’ (‘M-x expand-abbrev’).


File: efaq.info,  Node: Sorting the messages in an Rmail folder,  Next: Rmail writes to /var/spool/mail,  Prev: Expanding aliases when sending mail,  Up: Mail and news

11.4 How can I sort the messages in my Rmail folder?
====================================================

In Rmail, type ‘C-c C-s C-h’ to get a list of sorting functions and
their key bindings.


File: efaq.info,  Node: Rmail writes to /var/spool/mail,  Next: Replying to the sender of a message,  Prev: Sorting the messages in an Rmail folder,  Up: Mail and news

11.5 Why does Rmail need to write to ‘/var/spool/mail’?
=======================================================

This is the behavior of the ‘movemail’ program which Rmail uses.  This
indicates that ‘movemail’ is configured to use lock files.

   RMSは記しています:

     Certain systems require lock files to interlock access to mail
     files.  On these systems, ‘movemail’ must write lock files, or you
     risk losing mail.  You simply must arrange to let ‘movemail’ write
     them.

     Other systems use the ‘flock’ system call to interlock access.  On
     these systems, you should configure ‘movemail’ to use ‘flock’.


File: efaq.info,  Node: Replying to the sender of a message,  Next: Automatically starting a mail or news reader,  Prev: Rmail writes to /var/spool/mail,  Up: Mail and news

11.6 How can I force Rmail to reply to the sender of a message, but not the other recipients?
=============================================================================================

Ron Isaacson says: When you hit ‘r’ to reply in Rmail, by default it Ccs
all of the original recipients (everyone on the original ‘To’ and ‘CC’
lists).  With a prefix argument (i.e., typing ‘C-u’ before ‘r’), it
replies only to the sender.  However, going through the whole ‘C-u’
business every time you want to reply is a pain.  This is the best fix
I’ve been able to come up with:

     (defun rmail-reply-t ()
       "Reply only to the sender of the current message. (See rmail-reply.)"
       (interactive)
       (rmail-reply t))

     (add-hook 'rmail-mode-hook
       (lambda ()
         (define-key rmail-mode-map "r" 'rmail-reply-t)
         (define-key rmail-mode-map "R" 'rmail-reply)))


File: efaq.info,  Node: Automatically starting a mail or news reader,  Next: Reading news with Emacs,  Prev: Replying to the sender of a message,  Up: Mail and news

11.7 How do I make Emacs automatically start my mail/news reader?
=================================================================

To start Emacs in Gnus:

     emacs -f gnus

in Rmail:

     emacs -f rmail

   A more convenient way to start with Gnus:

     alias gnus 'emacs -f gnus'
     gnus

   It is probably unwise to automatically start your mail or news reader
from your ‘.emacs’ file.  This would cause problems if you needed to run
two copies of Emacs at the same time.  Also, this would make it
difficult for you to start Emacs quickly when you needed to.


File: efaq.info,  Node: Reading news with Emacs,  Next: Making Gnus faster,  Prev: Automatically starting a mail or news reader,  Up: Mail and news

11.8 How do I read news under Emacs?
====================================

Use ‘M-x gnus’.  For more information on Gnus, *note the Gnus Manual:
(gnus)Top, which includes *note the Gnus FAQ: (gnus)Frequently Asked
Questions.


File: efaq.info,  Node: Making Gnus faster,  Next: Catching up in all newsgroups,  Prev: Reading news with Emacs,  Up: Mail and news

11.9 How do I make Gnus faster?
===============================

From the Gnus FAQ (*note Reading news with Emacs::):

     If you have a slow machine, or are just really impatient, there are
     a few things you can do to make Gnus run faster.

     Set ‘gnus-check-new-newsgroups’ and ‘gnus-check-bogus-newsgroups’
     to ‘nil’ to make startup faster.

     Set ‘gnus-show-threads’, ‘gnus-use-cross-reference’ and
     ‘gnus-nov-is-evil’ to ‘nil’ to make entering and exiting the
     summary buffer faster.


File: efaq.info,  Node: Catching up in all newsgroups,  Prev: Making Gnus faster,  Up: Mail and news

11.10 How do I catch up all newsgroups in Gnus?
===============================================

In the ‘*Newsgroup*’ buffer, type ‘M-< C-x ( c y C-x ) M-0 C-x e’

   Leave off the initial ‘M-<’ if you only want to catch up from point
to the end of the ‘*Newsgroup*’ buffer.


File: efaq.info,  Node: Concept index,  Prev: Mail and news,  Up: Top

Concept Index
*************

 [index ]
* Menu:

* #ifdef, selective display of:          Hiding #ifdef lines.  (line  6)
* $ in file names:                       Editing files with $ in the name.
                                                               (line  6)
* -debug-init option:                    Debugging a customization file.
                                                               (line  6)
* ., equivalent to vi command:           Repeating commands.   (line  6)
* .emacs debugging:                      Debugging a customization file.
                                                               (line  6)
* .emacs file, errors in:                Errors with init files.
                                                               (line  6)
* .emacs file, locating:                 Setting up a customization file.
                                                               (line  6)
* .emacs file, setting up:               Setting up a customization file.
                                                               (line  6)
* .Xdefaults:                            Emacs ignores X resources.
                                                               (line  6)
* /var/spool/mail and Rmail:             Rmail writes to /var/spool/mail.
                                                               (line  6)
* 24-bit direct color mode:              Colors on a TTY.      (line 43)
* Abbrevs, turning on by default:        Turning on abbrevs by default.
                                                               (line  6)
* Acronyms, definitions for:             Common acronyms.      (line  6)
* add fonts for use with Emacs:          How to add fonts.     (line  6)
* Adding to load-path:                   Changing load-path.   (line  6)
* Alternate character sets:              Alternate character sets.
                                                               (line  6)
* Alternative Info file viewers:         Viewing Info files outside of Emacs.
                                                               (line  6)
* Anti-aliased fonts:                    New in Emacs 23.      (line  6)
* Antivirus programs, and Shell Mode:    Problems with Shell Mode.
                                                               (line 11)
* Apple computers, Emacs for:            Emacs for macOS.      (line  6)
* Apropos:                               Learning how to do something.
                                                               (line 20)
* Arabic:                                Right-to-left alphabets.
                                                               (line  6)
* Archived postings from gnu.emacs.help: Newsgroup archives.   (line  6)
* Arrow keys, symbols generated by:      Working with function and arrow keys.
                                                               (line  6)
* Aspell:                                Spell-checkers.       (line  6)
* Associating modes with files:          Associating modes with files.
                                                               (line  6)
* auto-fill-mode, activating automatically: Turning on auto-fill by default.
                                                               (line  6)
* auto-fill-mode, introduction to:       Wrapping words automatically.
                                                               (line  6)
* auto-mode-alist, modifying:            Associating modes with files.
                                                               (line  6)
* Auto-saving:                           Disabling auto-save-mode.
                                                               (line  6)
* automatic display of Lisp APIs:        New in Emacs 25.      (line 17)
* Automatic entry to auto-fill-mode:     Turning on auto-fill by default.
                                                               (line  6)
* Automatic filing of outgoing mail:     Saving a copy of outgoing mail.
                                                               (line  6)
* <Backspace> key invokes help:          Backspace invokes help.
                                                               (line  6)
* Backup files in a single directory:    Disabling backups.    (line 30)
* Backups, disabling:                    Disabling backups.    (line  6)
* Basic editing with Emacs:              Basic editing.        (line  6)
* Basic keys:                            Basic keys.           (line  6)
* Bazaar repository, Emacs:              Latest version of Emacs.
                                                               (line  6)
* Beeping, turning off:                  Turning off beeping.  (line  6)
* Beginning editing:                     Basic editing.        (line  6)
* Bell, visible:                         Turning off beeping.  (line  6)
* Bell, volume of:                       Turning the volume down.
                                                               (line  6)
* bidirectional display:                 New in Emacs 24.      (line 20)
* bidirectional editing:                 New in Emacs 25.      (line 28)
* bidirectional scripts:                 Right-to-left alphabets.
                                                               (line  6)
* bignum support:                        New in Emacs 27.      (line  6)
* Binding keys to commands:              Binding keys to commands.
                                                               (line  6)
* Binding modifiers and function keys:   Binding combinations of modifiers and function keys.
                                                               (line  6)
* bracketed paste mode:                  New in Emacs 25.      (line 21)
* Bug reporting:                         Reporting bugs.       (line  6)
* Bugs and problems:                     Bugs and problems.    (line  6)
* Building Emacs from source:            Installing Emacs.     (line  6)
* C-h, definition of:                    Basic keys.           (line  6)
* C-M-h, definition of:                  Basic keys.           (line  6)
* Case sensitivity in replacements:      Controlling case sensitivity.
                                                               (line 12)
* Case sensitivity of searches:          Controlling case sensitivity.
                                                               (line  6)
* case-fold-search:                      Controlling case sensitivity.
                                                               (line  6)
* case-replace:                          Controlling case sensitivity.
                                                               (line 12)
* Catching up all newsgroups in Gnus:    Catching up in all newsgroups.
                                                               (line  6)
* character folding in searches:         New in Emacs 25.      (line 31)
* Character sets:                        New in Emacs 23.      (line 11)
* Checking spelling:                     Spell-checkers.       (line  6)
* Colorizing text:                       Turning on syntax highlighting.
                                                               (line  6)
* Colors on a TTY:                       Colors on a TTY.      (line  6)
* Colors on text-only terminals:         New in Emacs 21.      (line 14)
* Column, displaying the current:        Displaying the current line or column.
                                                               (line  6)
* Command description in the manual:     Learning how to do something.
                                                               (line 23)
* Commands, binding keys to:             Binding keys to commands.
                                                               (line  6)
* Commands, extended:                    Extended commands.    (line  6)
* Commands, repeating many times:        Repeating commands.   (line  6)
* Common acronyms, definitions for:      Common acronyms.      (line  6)
* Common requests:                       Common requests.      (line  6)
* Compilation error messages:            Going to a line by number.
                                                               (line  6)
* Compiler error messages, recognizing:  Compiler error messages.
                                                               (line  6)
* Compiling and installing Emacs:        Compiling and installing Emacs.
                                                               (line  6)
* Compiling Emacs for DOS:               Emacs for MS-DOS.     (line  6)
* <Compose Character> key, using as <Meta>: Compose Character. (line  6)
* Console, colors:                       Colors on a TTY.      (line  6)
* Contracting the FSF:                   Contacting the FSF.   (line  6)
* Control characters, generating:        Producing C-XXX with the keyboard.
                                                               (line  6)
* Control characters, working with:      Working with unprintable characters.
                                                               (line  6)
* Control key, notation for:             Basic keys.           (line  6)
* Control-Meta characters, notation for: Basic keys.           (line  6)
* Conventions for file names:            File-name conventions.
                                                               (line  6)
* Copying outgoing mail to a file:       Saving a copy of outgoing mail.
                                                               (line  6)
* COPYING, description of file:          Informational files for Emacs.
                                                               (line  6)
* Copyleft, real meaning of:             Real meaning of copyleft.
                                                               (line  6)
* Creating new menu options:             Modifying pull-down menus.
                                                               (line  6)
* Crosspostings make Gnus catching up slow: Making Gnus faster.
                                                               (line  6)
* Current directory and shell-mode:      Shell mode loses the current directory.
                                                               (line  6)
* Current GNU distributions:             Current GNU distributions.
                                                               (line  6)
* Customization file, setting up:        Setting up a customization file.
                                                               (line  6)
* Customize groups:                      Using Customize.      (line  6)
* Customize indentation:                 Customizing C and C++ indentation.
                                                               (line  6)
* Customizing faces:                     Using Customize.      (line  6)
* Customizing variables:                 Using Customize.      (line  6)
* Daemon mode:                           New in Emacs 23.      (line 17)
* Debugging .emacs file:                 Debugging a customization file.
                                                               (line  6)
* Debugging .emacs file <1>:             Errors with init files.
                                                               (line  6)
* Decoration level, in font-lock-mode:   Turning on syntax highlighting.
                                                               (line 34)
* <DEL> key does not delete:             Backspace invokes help.
                                                               (line  6)
* <DEL>, definition of:                  Basic keys.           (line  6)
* delete-selection-mode:                 Replacing highlighted text.
                                                               (line  6)
* Deleting menus and menu options:       Deleting menus and menu options.
                                                               (line  6)
* Development, Emacs:                    Latest version of Emacs.
                                                               (line  6)
* Difference Emacs and XEmacs:           Difference between Emacs and XEmacs.
                                                               (line  6)
* Differences between Emacs 19 and Emacs 20: New in Emacs 20.  (line  6)
* Differences between Emacs 20 and Emacs 21: New in Emacs 21.  (line  6)
* Differences between Emacs 21 and Emacs 22: New in Emacs 22.  (line  6)
* Differences between Emacs 22 and Emacs 23: New in Emacs 23.  (line  6)
* Differences between Emacs 23 and Emacs 24: New in Emacs 24.  (line  6)
* Differences between Emacs 24 and Emacs 25: New in Emacs 25.  (line  6)
* Differences between Emacs 25 and Emacs 26: New in Emacs 26.  (line  6)
* Differences between Emacs 26 and Emacs 27: New in Emacs 27.  (line  6)
* Differences between Unix and Emacs regexps: Using regular expressions.
                                                               (line  6)
* direct color in terminals:             Colors on a TTY.      (line 20)
* Directories and files that come with Emacs: File-name conventions.
                                                               (line  6)
* Directory, current in shell-mode:      Shell mode loses the current directory.
                                                               (line  6)
* Directory-local variables:             New in Emacs 23.      (line 23)
* Dired does not see a file:             Dired claims that no file is on this line.
                                                               (line  6)
* Disabling auto-save-mode:              Disabling auto-save-mode.
                                                               (line  6)
* Disabling backups:                     Disabling backups.    (line  6)
* Discussion of the GPL:                 Real meaning of copyleft.
                                                               (line  6)
* Displaying eight-bit characters:       Emacs does not display 8-bit characters.
                                                               (line  6)
* Displaying the current line or column: Displaying the current line or column.
                                                               (line  6)
* DISTRIB, description of file:          Informational files for Emacs.
                                                               (line  6)
* <Do> key:                              Extended commands.    (line 16)
* Documentation:                         New in Emacs 22.      (line 66)
* Documentation for etags:               Documentation for etags.
                                                               (line  6)
* Documentation on Emacs Lisp:           Emacs Lisp documentation.
                                                               (line  6)
* Documentation, installing new Texinfo files: Installing Texinfo documentation.
                                                               (line  6)
* DOS, Emacs for:                        Emacs for MS-DOS.     (line  6)
* double-buffering:                      New in Emacs 26.      (line 16)
* Downloading and installing Emacs:      Installing Emacs.     (line  6)
* Downloading Emacs:                     Finding Emacs on the Internet.
                                                               (line  6)
* Drag-and-drop:                         New in Emacs 22.      (line  6)
* early init file:                       New in Emacs 27.      (line 28)
* Echoed commands in shell-mode:         ^M in the shell buffer.
                                                               (line  6)
* Editing files with $ in the name:      Editing files with $ in the name.
                                                               (line  6)
* Editing MS-DOS files:                  Editing MS-DOS files. (line  6)
* Eight-bit characters, displaying:      Emacs does not display 8-bit characters.
                                                               (line  6)
* Eight-bit characters, entering:        Inputting eight-bit characters.
                                                               (line  6)
* Eight-bit characters, working with:    Working with unprintable characters.
                                                               (line  6)
* Emacs 20, new features in:             New in Emacs 20.      (line  6)
* Emacs 21, new features in:             New in Emacs 21.      (line  6)
* Emacs 22, new features in:             New in Emacs 22.      (line  6)
* Emacs 23, new features in:             New in Emacs 23.      (line  6)
* Emacs 24, new features in:             New in Emacs 24.      (line  6)
* Emacs 25, new features in:             New in Emacs 25.      (line  6)
* Emacs 26, new features in:             New in Emacs 26.      (line  6)
* Emacs 27, new features in:             New in Emacs 27.      (line  6)
* Emacs entries for termcap/terminfo:    Termcap/Terminfo entries for Emacs.
                                                               (line  6)
* Emacs for MS-DOS:                      Emacs for MS-DOS.     (line  6)
* Emacs for MS-Windows:                  Emacs for MS-Windows. (line  6)
* Emacs Lisp Archive:                    Packages that do not come with Emacs.
                                                               (line  6)
* Emacs Lisp List:                       Packages that do not come with Emacs.
                                                               (line  6)
* Emacs Lisp Manual:                     New in Emacs 22.      (line 66)
* Emacs Lisp Reference Manual:           Emacs Lisp documentation.
                                                               (line  6)
* Emacs manual, obtaining a printed or HTML copy of: Getting a printed manual.
                                                               (line  6)
* Emacs manual, reading topics in:       Emacs manual.         (line  6)
* Emacs name origin:                     Origin of the term Emacs.
                                                               (line  6)
* Emacs server functions:                Using an already running Emacs process.
                                                               (line  6)
* emacsclient:                           Using an already running Emacs process.
                                                               (line  6)
* Enchant:                               Spell-checkers.       (line  6)
* Enchant support:                       New in Emacs 26.      (line 35)
* Entering eight-bit characters:         Inputting eight-bit characters.
                                                               (line  6)
* Epoch:                                 Difference between Emacs and XEmacs.
                                                               (line  6)
* Error in .emacs:                       Errors with init files.
                                                               (line  6)
* Error in init file:                    Errors with init files.
                                                               (line  6)
* Errors when building Emacs:            Problems building Emacs.
                                                               (line  6)
* Errors, recognizing compiler:          Compiler error messages.
                                                               (line  6)
* <ESC>, definition of:                  Basic keys.           (line  6)
* Escape key, lacking:                   No Escape key.        (line  6)
* Escape sequences in ls output:         Escape sequences in shell output.
                                                               (line  6)
* etags, documentation for:              Documentation for etags.
                                                               (line  6)
* Evaluating Lisp code:                  Evaluating Emacs Lisp code.
                                                               (line  6)
* eww:                                   New in Emacs 25.      (line 37)
* Expanding aliases when sending mail:   Expanding aliases when sending mail.
                                                               (line  6)
* explicit-shell-file-name:              Problems with Shell Mode.
                                                               (line  6)
* <ExtendChar> key as <Meta>:            ExtendChar key does not work as Meta.
                                                               (line  6)
* Extended commands:                     Extended commands.    (line  6)
* FAQ for Emacs on MS-Windows:           Emacs for MS-Windows. (line  6)
* FAQ for Gnus:                          Reading news with Emacs.
                                                               (line  6)
* FAQ notation:                          FAQ notation.         (line  6)
* FAQ, font-lock-mode:                   Turning on syntax highlighting.
                                                               (line  6)
* FAQ, obtaining the:                    Obtaining the FAQ.    (line  6)
* Farsi:                                 Right-to-left alphabets.
                                                               (line  6)
* Faster, starting Gnus:                 Making Gnus faster.   (line  6)
* File extensions and modes:             Associating modes with files.
                                                               (line  6)
* File name, displaying in the titlebar: Displaying the current file name in the titlebar.
                                                               (line  6)
* File names containing $, editing:      Editing files with $ in the name.
                                                               (line  6)
* file-local-variable and security:      Security risks with Emacs.
                                                               (line  6)
* File-name conventions:                 File-name conventions.
                                                               (line  6)
* Files included with Emacs:             Informational files for Emacs.
                                                               (line  6)
* Files, maximum size:                   Problems with very large files.
                                                               (line  6)
* Files, replacing strings across multiple: Replacing text across multiple files.
                                                               (line  6)
* Filing outgoing mail:                  Saving a copy of outgoing mail.
                                                               (line  6)
* Fill prefix:                           Automatic indentation.
                                                               (line 18)
* fill-column, default value:            Wrapping words automatically.
                                                               (line  6)
* Filling automatically:                 Turning on auto-fill by default.
                                                               (line  6)
* Finding an Emacs Lisp package:         Finding a package with particular functionality.
                                                               (line  6)
* Finding commands and variables:        Learning how to do something.
                                                               (line 27)
* Finding current GNU software:          Current GNU distributions.
                                                               (line  6)
* Finding Emacs and related packages:    Finding Emacs and related packages.
                                                               (line  6)
* Finding Emacs on the Internet:         Finding Emacs on the Internet.
                                                               (line  6)
* Finding other packages:                Packages that do not come with Emacs.
                                                               (line  6)
* Finding topics in the Emacs manual:    Emacs manual.         (line  6)
* Folder, sorting messages in an Rmail:  Sorting the messages in an Rmail folder.
                                                               (line  6)
* font-lock-mode:                        Turning on syntax highlighting.
                                                               (line  6)
* Frame parameters:                      Emacs ignores frame parameters.
                                                               (line  6)
* frame-title-format:                    Displaying the current file name in the titlebar.
                                                               (line  6)
* Free Software Foundation, contacting:  Contacting the FSF.   (line  6)
* Freetype fonts:                        New in Emacs 23.      (line  6)
* FSF, definition of:                    Common acronyms.      (line  6)
* Fullscreen mode:                       Fullscreen mode on MS-Windows.
                                                               (line  6)
* Function documentation:                Emacs Lisp documentation.
                                                               (line  6)
* Function keys and modifiers:           Binding combinations of modifiers and function keys.
                                                               (line  6)
* Function keys, symbols generated by:   Working with function and arrow keys.
                                                               (line  6)
* Functionality, finding a particular package: Finding a package with particular functionality.
                                                               (line  6)
* General Public License, real meaning of: Real meaning of copyleft.
                                                               (line  6)
* General questions:                     General questions.    (line  6)
* Generating control characters:         Producing C-XXX with the keyboard.
                                                               (line  6)
* Getting help:                          Getting help.         (line  6)
* GNU mailing lists:                     Guidelines for newsgroup postings.
                                                               (line  6)
* GNU newsgroups, appropriate messages for: Guidelines for newsgroup postings.
                                                               (line  6)
* GNU, definition of:                    Common acronyms.      (line  6)
* Gnus FAQ:                              Reading news with Emacs.
                                                               (line  6)
* Gnus is slow when catching up:         Making Gnus faster.   (line  6)
* Gnus newsreader:                       Reading news with Emacs.
                                                               (line  6)
* Gnus, Catching up all newsgroups in:   Catching up in all newsgroups.
                                                               (line  6)
* Gnus, starting faster:                 Making Gnus faster.   (line  6)
* GNUstep port:                          New in Emacs 23.      (line 19)
* GNUstep, Emacs for:                    Emacs for GNUstep.    (line  6)
* Going to a line by number:             Going to a line by number.
                                                               (line  6)
* Good bug reports:                      Reporting bugs.       (line  6)
* GPL, definition of:                    Common acronyms.      (line  6)
* GPL, real meaning of:                  Real meaning of copyleft.
                                                               (line  6)
* GTK+ Toolkit:                          New in Emacs 22.      (line  6)
* HarfBuzz:                              New in Emacs 27.      (line 13)
* Hebrew, handling with Emacs:           Right-to-left alphabets.
                                                               (line  6)
* Help for Emacs:                        Learning how to do something.
                                                               (line  6)
* Help installing Emacs:                 Help installing Emacs.
                                                               (line  6)
* Help invoked by <Backspace>:           Backspace invokes help.
                                                               (line  6)
* Help system, entering the:             Basic editing.        (line  6)
* hide-ifdef, C/C++ expressions in macros: New in Emacs 25.    (line 47)
* hide-ifdef-mode:                       Hiding #ifdef lines.  (line  6)
* Hiding #ifdef text:                    Hiding #ifdef lines.  (line  6)
* Highlighting and replacing text:       Replacing highlighted text.
                                                               (line  6)
* Highlighting based on syntax:          Turning on syntax highlighting.
                                                               (line  6)
* Highlighting matching parentheses:     Matching parentheses. (line  6)
* horizontal scroll bars:                New in Emacs 25.      (line 62)
* horizontal scrolling of current line:  New in Emacs 26.      (line 27)
* How to submit a bug report:            Reporting bugs.       (line  6)
* HP-UX, the <ExtendChar> key:           ExtendChar key does not work as Meta.
                                                               (line  6)
* Hunspell:                              Spell-checkers.       (line  6)
* Iconification under the X Window System: Forcing Emacs to iconify itself.
                                                               (line  6)
* Ignored X resources:                   Emacs ignores X resources.
                                                               (line  6)
* Ignoring case in searches:             Controlling case sensitivity.
                                                               (line  6)
* Included text prefix, changing:        Changing the included text prefix.
                                                               (line  6)
* Indentation, how to customize:         Customizing C and C++ indentation.
                                                               (line  6)
* Indenting new lines:                   Automatic indentation.
                                                               (line  6)
* Indenting of switch:                   Indenting switch statements.
                                                               (line  6)
* Index search in a manual:              Learning how to do something.
                                                               (line 13)
* Info file viewers:                     Viewing Info files outside of Emacs.
                                                               (line  6)
* Info files, how to install:            Installing Texinfo documentation.
                                                               (line  6)
* Info, finding topics in:               Emacs manual.         (line  6)
* Informational files included with Emacs: Informational files for Emacs.
                                                               (line  6)
* Init file debugging:                   Debugging a customization file.
                                                               (line  6)
* Init file, errors in:                  Errors with init files.
                                                               (line  6)
* Init file, setting up:                 Setting up a customization file.
                                                               (line  6)
* Input, 8-bit characters:               Inputting eight-bit characters.
                                                               (line  6)
* <Insert>:                              Overwrite mode.       (line  6)
* Installation help:                     Help installing Emacs.
                                                               (line  6)
* Installing Emacs:                      Installing Emacs.     (line  6)
* Installing Texinfo documentation:      Installing Texinfo documentation.
                                                               (line  6)
* intlfonts:                             How to add fonts.     (line  6)
* Invalid prefix characters:             Invalid prefix characters.
                                                               (line  6)
* isearch yanking:                       Yanking text in isearch.
                                                               (line  6)
* Ispell:                                Spell-checkers.       (line  6)
* JSON, native parsing:                  New in Emacs 27.      (line 16)
* Just-In-Time syntax highlighting:      Turning on syntax highlighting.
                                                               (line 26)
* Key bindings:                          Key bindings.         (line  6)
* Key translations under X:              X key translations for Emacs.
                                                               (line  6)
* keyboard-translate:                    Swapping keys.        (line  6)
* Keymaps and menus:                     Modifying pull-down menus.
                                                               (line  6)
* Keys, binding to commands:             Binding keys to commands.
                                                               (line  6)
* Keys, swapping:                        Swapping keys.        (line  6)
* Lacking an Escape key:                 No Escape key.        (line  6)
* Large files, opening:                  Problems with very large files.
                                                               (line  6)
* Latest FAQ version, obtaining the:     Obtaining the FAQ.    (line  6)
* Latest version of Emacs:               Latest version of Emacs.
                                                               (line  6)
* Learning more about Gnus:              Reading news with Emacs.
                                                               (line  6)
* Learning to do something in Emacs:     Learning how to do something.
                                                               (line  6)
* Length of tab character:               Changing the length of a Tab.
                                                               (line  6)
* Levels of syntax highlighting:         Turning on syntax highlighting.
                                                               (line 34)
* lexical binding:                       New in Emacs 24.      (line 10)
* <LFD>, definition of:                  Basic keys.           (line  6)
* line number display:                   New in Emacs 26.      (line 22)
* Line number, displaying the current:   Displaying the current line or column.
                                                               (line  6)
* Line wrap:                             Wrapping words automatically.
                                                               (line  6)
* line-number-mode:                      Displaying the current line or column.
                                                               (line  6)
* Lisp forms, evaluating:                Evaluating Emacs Lisp code.
                                                               (line  6)
* Lisp packages that do not come with Emacs: Packages that do not come with Emacs.
                                                               (line  6)
* load-path, modifying:                  Changing load-path.   (line  6)
* loadable modules:                      New in Emacs 25.      (line 11)
* Lookup a subject in a manual:          Learning how to do something.
                                                               (line 13)
* ls in Shell mode:                      Escape sequences in shell output.
                                                               (line  6)
* Lucid Emacs:                           Difference between Emacs and XEmacs.
                                                               (line  6)
* M-x, meaning of:                       Extended commands.    (line  6)
* MACHINES, description of file:         Informational files for Emacs.
                                                               (line  6)
* Macintosh, Emacs for:                  Emacs for macOS.      (line  6)
* macOS Cocoa:                           New in Emacs 23.      (line 19)
* macOS, Emacs for:                      Emacs for macOS.      (line  6)
* Mail alias expansion:                  Expanding aliases when sending mail.
                                                               (line  6)
* Mail and news:                         Mail and news.        (line  6)
* Mail reader, starting automatically:   Automatically starting a mail or news reader.
                                                               (line  6)
* Mail replies, inserting a prefix character: Inserting text at the beginning of each line.
                                                               (line  6)
* Mail, saving outgoing automatically:   Saving a copy of outgoing mail.
                                                               (line  6)
* mail-yank-prefix:                      Inserting text at the beginning of each line.
                                                               (line  6)
* Mailing lists, appropriate messages for: Guidelines for newsgroup postings.
                                                               (line  6)
* Major mode for shell scripts:          Associating modes with files.
                                                               (line 16)
* Manual, obtaining a printed or HTML copy of: Getting a printed manual.
                                                               (line  6)
* Matching parentheses:                  Matching parentheses. (line  6)
* Maximize frame:                        Fullscreen mode on MS-Windows.
                                                               (line  6)
* Maximum file size:                     Problems with very large files.
                                                               (line  6)
* Maximum line width, default value:     Wrapping words automatically.
                                                               (line  6)
* Menus and keymaps:                     Modifying pull-down menus.
                                                               (line  6)
* Menus, creating or modifying:          Modifying pull-down menus.
                                                               (line  6)
* Menus, deleting:                       Deleting menus and menu options.
                                                               (line  6)
* <Meta> key and xterm:                  Meta key does not work in xterm.
                                                               (line  6)
* <Meta> key, notation for:              Basic keys.           (line  6)
* <Meta> key, what to do if you lack it: No Meta key.          (line  6)
* <Meta>, using <Compose Character> for: Compose Character.    (line  6)
* <Meta>, using <ExtendChar> for:        ExtendChar key does not work as Meta.
                                                               (line  6)
* Microsoft files, editing:              Editing MS-DOS files. (line  6)
* Microsoft Windows, Emacs for:          Emacs for MS-Windows. (line  6)
* Misspecified key sequences:            Invalid prefix characters.
                                                               (line  6)
* mode-line-format:                      Displaying the current line or column.
                                                               (line  6)
* Modes, associating with file extensions: Associating modes with files.
                                                               (line  6)
* Modifiers and function keys:           Binding combinations of modifiers and function keys.
                                                               (line  6)
* Modifying load-path:                   Changing load-path.   (line  6)
* Modifying pull-down menus:             Modifying pull-down menus.
                                                               (line  6)
* Mouse wheel:                           New in Emacs 22.      (line 23)
* movemail and security:                 Security risks with Emacs.
                                                               (line  6)
* MS-DOS files, editing:                 Editing MS-DOS files. (line  6)
* MS-DOS, Emacs for:                     Emacs for MS-DOS.     (line  6)
* Multi-tty support:                     New in Emacs 23.      (line 14)
* Multilingual Environment:              New in Emacs 22.      (line 52)
* Multiple files, replacing across:      Replacing text across multiple files.
                                                               (line  6)
* New lines, indenting of:               Automatic indentation.
                                                               (line  6)
* New modes:                             New in Emacs 22.      (line 47)
* New Texinfo files, installing:         Installing Texinfo documentation.
                                                               (line  6)
* News reader, starting automatically:   Automatically starting a mail or news reader.
                                                               (line  6)
* News replies, inserting a prefix character: Inserting text at the beginning of each line.
                                                               (line  6)
* NEWS, description of file:             Informational files for Emacs.
                                                               (line  6)
* Newsgroups, appropriate messages for:  Guidelines for newsgroup postings.
                                                               (line  6)
* NeXTstep port:                         New in Emacs 23.      (line 19)
* No Escape key:                         No Escape key.        (line  6)
* No <Meta> key:                         No Meta key.          (line  6)
* Not enough disk space to install Emacs: Emacs for minimalists.
                                                               (line  6)
* Notation for keys:                     Basic keys.           (line  6)
* Official GNU software sites:           Current GNU distributions.
                                                               (line  6)
* Old Usenet postings for GNU groups:    Newsgroup archives.   (line  6)
* One space following periods:           Filling paragraphs with a single space.
                                                               (line  6)
* Opening very large files:              Problems with very large files.
                                                               (line  6)
* Ordering GNU software:                 Contacting the FSF.   (line 10)
* Origin of the term “Emacs”:            Origin of the term Emacs.
                                                               (line  6)
* Original version of Emacs:             Origin of the term Emacs.
                                                               (line  6)
* Overview of help systems:              Learning how to do something.
                                                               (line  6)
* overwrite-mode:                        Overwrite mode.       (line  6)
* Overwriting existing text:             Overwrite mode.       (line  6)
* Package, finding:                      Finding a package with particular functionality.
                                                               (line  6)
* packages, installing more:             New in Emacs 24.      (line  6)
* Packages, those that do not come with Emacs: Packages that do not come with Emacs.
                                                               (line  6)
* Pairs of parentheses, highlighting:    Matching parentheses. (line  6)
* paren.el:                              Matching parentheses. (line  6)
* Parentheses, matching:                 Matching parentheses. (line  6)
* pasting text on text terminals:        New in Emacs 25.      (line 21)
* Periods, one space following:          Filling paragraphs with a single space.
                                                               (line  6)
* picture-mode:                          Forcing the cursor to remain in the same column.
                                                               (line  6)
* portable dumper:                       New in Emacs 27.      (line 20)
* Posting messages to newsgroups:        Guidelines for newsgroup postings.
                                                               (line  6)
* Prefix character, inserting in mail/news replies: Inserting text at the beginning of each line.
                                                               (line  6)
* Prefix characters, invalid:            Invalid prefix characters.
                                                               (line  6)
* Prefix in mail/news followups, changing: Changing the included text prefix.
                                                               (line  6)
* Prefixing a region with some text:     Inserting text at the beginning of each line.
                                                               (line  6)
* Prefixing lines:                       Automatic indentation.
                                                               (line 18)
* Previous line, indenting according to: Automatic indentation.
                                                               (line  6)
* Printed Emacs manual, obtaining:       Getting a printed manual.
                                                               (line  6)
* Printing a Texinfo file:               Printing a Texinfo file.
                                                               (line  6)
* Printing documentation:                Printing a Texinfo file.
                                                               (line  6)
* Problems building Emacs:               Problems building Emacs.
                                                               (line  6)
* Producing control characters:          Producing C-XXX with the keyboard.
                                                               (line  6)
* project:                               New in Emacs 25.      (line 59)
* Pull-down menus, creating or modifying: Modifying pull-down menus.
                                                               (line  6)
* Quoting in mail messages:              Changing the included text prefix.
                                                               (line  6)
* Reading news under Emacs:              Reading news with Emacs.
                                                               (line  6)
* Reading the Emacs manual:              Learning how to do something.
                                                               (line  8)
* Reading topics in the Emacs manual:    Emacs manual.         (line  6)
* Recognizing non-standard compiler errors: Compiler error messages.
                                                               (line  6)
* Recompilation:                         Going to a line by number.
                                                               (line  6)
* Recursive search/replace operations:   Replacing text across multiple files.
                                                               (line  6)
* Reducing the increment when scrolling: Scrolling only one line.
                                                               (line  6)
* Reference card for Emacs:              Learning how to do something.
                                                               (line  6)
* Reference cards, in other languages:   Learning how to do something.
                                                               (line 36)
* Reference manual for Emacs Lisp:       Emacs Lisp documentation.
                                                               (line  6)
* Regexps:                               Using regular expressions.
                                                               (line  6)
* Regexps and unprintable characters:    Working with unprintable characters.
                                                               (line  6)
* Regexps for recognizing compiler errors: Compiler error messages.
                                                               (line  6)
* Regular expressions:                   Using regular expressions.
                                                               (line  6)
* Remaining in the same column, regardless of contents: Forcing the cursor to remain in the same column.
                                                               (line  6)
* Removing yourself from GNU mailing lists: Unsubscribing from Emacs lists.
                                                               (line  6)
* Repeating commands many times:         Repeating commands.   (line  6)
* Replacing highlighted text:            Replacing highlighted text.
                                                               (line  6)
* Replacing newlines:                    Searching for/replacing newlines.
                                                               (line  6)
* Replacing strings across files:        Replacing text across multiple files.
                                                               (line  6)
* Replacing, and case sensitivity:       Controlling case sensitivity.
                                                               (line 12)
* Replies to mail/news, inserting a prefix character: Inserting text at the beginning of each line.
                                                               (line  6)
* Replying only to the sender of a message: Replying to the sender of a message.
                                                               (line  6)
* Reporting bugs:                        Reporting bugs.       (line  6)
* Repository, Emacs:                     Latest version of Emacs.
                                                               (line  6)
* Resources, X:                          Valid X resources.    (line  6)
* <RET>, definition of:                  Basic keys.           (line  6)
* Richard Stallman, acronym for:         Common acronyms.      (line  6)
* Right-to-left alphabets:               Right-to-left alphabets.
                                                               (line  6)
* right-to-left languages:               New in Emacs 24.      (line 20)
* Rmail and /var/spool/mail:             Rmail writes to /var/spool/mail.
                                                               (line  6)
* rmail, and HTML mails:                 New in Emacs 25.      (line 40)
* Rmail, replying to the sender of a message in: Replying to the sender of a message.
                                                               (line  6)
* Rmail, sorting messages in:            Sorting the messages in an Rmail folder.
                                                               (line  6)
* RMS, definition of:                    Common acronyms.      (line  6)
* Saving a copy of outgoing mail:        Saving a copy of outgoing mail.
                                                               (line  6)
* Saving at frequent intervals:          Disabling auto-save-mode.
                                                               (line  6)
* Scrolling only one line:               Scrolling only one line.
                                                               (line  6)
* Searching for newlines:                Searching for/replacing newlines.
                                                               (line  6)
* Searching for unprintable characters:  Working with unprintable characters.
                                                               (line  6)
* Searching without case sensitivity:    Controlling case sensitivity.
                                                               (line  6)
* Security with Emacs:                   Security risks with Emacs.
                                                               (line  6)
* Selectively displaying #ifdef code:    Hiding #ifdef lines.  (line  6)
* Self-paced tutorial, invoking the:     Basic editing.        (line  6)
* Semitic alphabets:                     Right-to-left alphabets.
                                                               (line  6)
* Sender, replying only to:              Replying to the sender of a message.
                                                               (line  6)
* Sending mail with aliases:             Expanding aliases when sending mail.
                                                               (line  6)
* Set number capability in vi emulators: Displaying the current line or column.
                                                               (line 24)
* Setting the included text character:   Changing the included text prefix.
                                                               (line  6)
* Setting X resources:                   Valid X resources.    (line  6)
* Shell buffer, echoed commands and ^M in: ^M in the shell buffer.
                                                               (line  6)
* Shell Mode, problems:                  Problems with Shell Mode.
                                                               (line  6)
* shell-mode and current directory:      Shell mode loses the current directory.
                                                               (line  6)
* Show matching paren as in vi:          Matching parentheses. (line 26)
* Single space following periods:        Filling paragraphs with a single space.
                                                               (line  6)
* Slow catch up in Gnus:                 Making Gnus faster.   (line  6)
* Sorting messages in an Rmail folder:   Sorting the messages in an Rmail folder.
                                                               (line  6)
* Source code, building Emacs from:      Installing Emacs.     (line  6)
* Sources for current GNU distributions: Current GNU distributions.
                                                               (line  6)
* SPC file name completion:              SPC no longer completes file names.
                                                               (line  6)
* <SPC>, definition of:                  Basic keys.           (line  6)
* Spell-checker:                         Spell-checkers.       (line  6)
* Stallman, Richard, acronym for:        Common acronyms.      (line  6)
* Starting Gnus faster:                  Making Gnus faster.   (line  6)
* Starting mail/news reader automatically: Automatically starting a mail or news reader.
                                                               (line  6)
* Status of Emacs:                       Status of Emacs.      (line  6)
* Stuff, current GNU:                    Current GNU distributions.
                                                               (line  6)
* support for push commands in VC:       New in Emacs 25.      (line 44)
* Supported systems:                     New in Emacs 22.      (line  9)
* Suspending Emacs:                      Forcing Emacs to iconify itself.
                                                               (line  6)
* Swapping keys:                         Swapping keys.        (line  6)
* switch, indenting:                     Indenting switch statements.
                                                               (line  6)
* Symbols generated by function keys:    Working with function and arrow keys.
                                                               (line  6)
* Syntax highlighting:                   Turning on syntax highlighting.
                                                               (line  6)
* Syntax highlighting on a TTY:          Colors on a TTY.      (line  6)
* Synthetic X events and security:       Security risks with Emacs.
                                                               (line  6)
* systemd support:                       New in Emacs 26.      (line  8)
* Tab length:                            Changing the length of a Tab.
                                                               (line  6)
* <TAB>, definition of:                  Basic keys.           (line  6)
* tabs:                                  New in Emacs 27.      (line 33)
* TECO:                                  Origin of the term Emacs.
                                                               (line  6)
* Termcap:                               Termcap/Terminfo entries for Emacs.
                                                               (line  6)
* Terminal setup code in .emacs:         Terminal setup code works after Emacs has begun.
                                                               (line  6)
* Terminfo:                              Termcap/Terminfo entries for Emacs.
                                                               (line  6)
* Texinfo documentation, installing:     Installing Texinfo documentation.
                                                               (line  6)
* Texinfo file, printing:                Printing a Texinfo file.
                                                               (line  6)
* Text indentation:                      Automatic indentation.
                                                               (line  6)
* Text strings, putting regexps in:      Using regular expressions.
                                                               (line  6)
* themes:                                New in Emacs 24.      (line 28)
* threads:                               New in Emacs 26.      (line  6)
* Titlebar, displaying the current file name in: Displaying the current file name in the titlebar.
                                                               (line  6)
* Toggling overwrite-mode:               Overwrite mode.       (line  6)
* Toolbar support:                       New in Emacs 21.      (line  6)
* Translations for keys under X:         X key translations for Emacs.
                                                               (line  6)
* TTY colors:                            New in Emacs 21.      (line 14)
* Tutorial, invoking the:                Basic editing.        (line  6)
* Unbundled packages:                    Packages that do not come with Emacs.
                                                               (line  6)
* Unicode:                               New in Emacs 23.      (line 11)
* Unicode 11.0.0:                        New in Emacs 26.      (line 49)
* Unicode 9.0.0:                         New in Emacs 25.      (line 25)
* Unicode characters, typing easily:     New in Emacs 25.      (line 14)
* Unix regexps, differences from Emacs:  Using regular expressions.
                                                               (line  6)
* Unix systems, installing Emacs on:     Installing Emacs.     (line  6)
* Unprintable characters, working with:  Working with unprintable characters.
                                                               (line  6)
* Unsubscribing from GNU mailing lists:  Unsubscribing from Emacs lists.
                                                               (line  6)
* Up-to-date GNU stuff:                  Current GNU distributions.
                                                               (line  6)
* Usenet archives for GNU groups:        Newsgroup archives.   (line  6)
* Usenet groups, appropriate messages for: Guidelines for newsgroup postings.
                                                               (line  6)
* Usenet reader in Emacs:                Reading news with Emacs.
                                                               (line  6)
* Using an existing Emacs process:       Using an already running Emacs process.
                                                               (line  6)
* Variable documentation:                Emacs Lisp documentation.
                                                               (line  6)
* Variable-size fonts:                   New in Emacs 21.      (line  6)
* Version, latest:                       Latest version of Emacs.
                                                               (line  6)
* Vertical movement in empty documents:  Forcing the cursor to remain in the same column.
                                                               (line  6)
* Very large files, opening:             Problems with very large files.
                                                               (line  6)
* Viewing Info files:                    Viewing Info files outside of Emacs.
                                                               (line  6)
* Visible bell:                          Turning off beeping.  (line  6)
* Volume of bell:                        Turning the volume down.
                                                               (line  6)
* w32-bdf-filename-alist:                How to add fonts.     (line 55)
* w32-find-bdf-fonts:                    How to add fonts.     (line 55)
* Why Emacs?:                            Origin of the term Emacs.
                                                               (line 22)
* Windows files, editing:                Editing MS-DOS files. (line  6)
* Working with arrow keys:               Working with function and arrow keys.
                                                               (line  6)
* Working with function keys:            Working with function and arrow keys.
                                                               (line  6)
* Working with unprintable characters:   Working with unprintable characters.
                                                               (line  6)
* Wrapping lines:                        Wrapping words automatically.
                                                               (line  6)
* Wrapping word automatically:           Wrapping words automatically.
                                                               (line  6)
* X and tty displays:                    New in Emacs 23.      (line 14)
* X events and security:                 Security risks with Emacs.
                                                               (line  6)
* X key translations:                    X key translations for Emacs.
                                                               (line  6)
* X resources:                           Valid X resources.    (line  6)
* X resources being ignored:             Emacs ignores X resources.
                                                               (line  6)
* X Window System and iconification:     Forcing Emacs to iconify itself.
                                                               (line  6)
* XDG convention:                        New in Emacs 27.      (line 26)
* XEmacs:                                Difference between Emacs and XEmacs.
                                                               (line  6)
* xref:                                  New in Emacs 25.      (line 51)
* Xterm and <Meta> key:                  Meta key does not work in xterm.
                                                               (line  6)
* xwidgets:                              New in Emacs 25.      (line  6)
* Yanking text into the search string:   Yanking text in isearch.
                                                               (line  6)
* Zile:                                  Emacs for minimalists.
                                                               (line  6)



Tag Table:
Node: Top1370
Node: FAQ notation4218
Node: Basic keys4745
Ref: Basic keys-Footnote-17203
Node: Extended commands7308
Node: Emacs manual8708
Node: File-name conventions10081
Node: Common acronyms11969
Node: General questions12970
Node: Real meaning of copyleft13437
Node: Guidelines for newsgroup postings15177
Node: Newsgroup archives17209
Node: Reporting bugs17979
Node: Unsubscribing from Emacs lists20941
Node: Contacting the FSF21607
Node: Getting help22088
Node: Basic editing22616
Node: Learning how to do something24417
Node: Getting a printed manual27694
Node: Emacs Lisp documentation28767
Node: Installing Texinfo documentation29691
Node: Printing a Texinfo file34804
Node: Viewing Info files outside of Emacs36595
Node: Informational files for Emacs37312
Node: Help installing Emacs38776
Node: Obtaining the FAQ39459
Node: Status of Emacs40130
Node: Origin of the term Emacs40614
Node: Latest version of Emacs42239
Node: New in Emacs 2743986
Node: New in Emacs 2646256
Node: New in Emacs 2549517
Node: New in Emacs 2453656
Node: New in Emacs 2356730
Node: New in Emacs 2258534
Node: New in Emacs 2162450
Node: New in Emacs 2063631
Node: Common requests64520
Node: Setting up a customization file66185
Node: Using Customize67827
Node: Colors on a TTY68881
Node: Debugging a customization file73132
Node: Displaying the current line or column74204
Node: Displaying the current file name in the titlebar76643
Node: Turning on abbrevs by default78072
Node: Associating modes with files79005
Node: Replacing highlighted text80180
Node: Controlling case sensitivity81262
Node: Working with unprintable characters82286
Node: Searching for/replacing newlines83965
Node: Yanking text in isearch84373
Node: Wrapping words automatically84705
Node: Turning on auto-fill by default85192
Node: Changing load-path85918
Node: Using an already running Emacs process86405
Node: Compiler error messages88444
Node: Indenting switch statements88807
Node: Customizing C and C++ indentation89418
Node: Overwrite mode92128
Node: Turning off beeping92662
Node: Turning the volume down93218
Node: Automatic indentation93926
Node: Matching parentheses95700
Node: Hiding #ifdef lines97388
Node: Repeating commands97880
Node: Valid X resources99021
Node: Evaluating Emacs Lisp code99503
Node: Changing the length of a Tab101063
Node: Inserting text at the beginning of each line101806
Node: Forcing the cursor to remain in the same column102900
Node: Forcing Emacs to iconify itself103530
Node: Using regular expressions103899
Node: Replacing text across multiple files104943
Node: Documentation for etags106155
Node: Disabling backups106570
Node: Disabling auto-save-mode108112
Node: Going to a line by number109033
Node: Modifying pull-down menus110547
Node: Deleting menus and menu options113793
Node: Turning on syntax highlighting114532
Node: Scrolling only one line117446
Node: Editing MS-DOS files118138
Node: Filling paragraphs with a single space118921
Node: Escape sequences in shell output119342
Node: Fullscreen mode on MS-Windows120152
Node: Bugs and problems121232
Node: Problems with very large files122280
Node: ^M in the shell buffer123224
Node: Problems with Shell Mode125082
Node: Termcap/Terminfo entries for Emacs125774
Node: Errors with init files127044
Node: Emacs ignores X resources127889
Node: Emacs ignores frame parameters129765
Node: Editing files with $ in the name130623
Node: Shell mode loses the current directory131079
Node: Security risks with Emacs132033
Node: Dired claims that no file is on this line135345
Node: Compiling and installing Emacs136295
Node: Installing Emacs136558
Node: Problems building Emacs139019
Node: Finding Emacs and related packages139707
Node: Finding Emacs on the Internet140254
Node: Finding a package with particular functionality140801
Node: Packages that do not come with Emacs141995
Node: Spell-checkers144436
Node: Current GNU distributions144898
Node: Difference between Emacs and XEmacs145352
Node: Emacs for minimalists147229
Node: Emacs for MS-DOS147845
Node: Emacs for MS-Windows148913
Node: Emacs for GNUstep149263
Node: Emacs for macOS149604
Node: Key bindings149910
Node: Binding keys to commands150573
Node: Invalid prefix characters152670
Node: Terminal setup code works after Emacs has begun153542
Node: Working with function and arrow keys154931
Node: X key translations for Emacs155475
Node: Backspace invokes help156312
Node: Swapping keys160191
Node: Producing C-XXX with the keyboard161452
Node: No Meta key162138
Node: No Escape key162706
Node: Compose Character163280
Node: Binding combinations of modifiers and function keys163782
Node: Meta key does not work in xterm165038
Node: ExtendChar key does not work as Meta167353
Node: SPC no longer completes file names168272
Node: Alternate character sets169014
Node: Emacs does not display 8-bit characters169314
Node: Inputting eight-bit characters170112
Node: Right-to-left alphabets170558
Node: How to add fonts171017
Node: Mail and news175549
Node: Changing the included text prefix176067
Node: Saving a copy of outgoing mail176770
Node: Expanding aliases when sending mail177753
Node: Sorting the messages in an Rmail folder179062
Node: Rmail writes to /var/spool/mail179433
Node: Replying to the sender of a message180275
Node: Automatically starting a mail or news reader181365
Node: Reading news with Emacs182108
Node: Making Gnus faster182489
Node: Catching up in all newsgroups183166
Node: Concept index183562

End Tag Table


Local Variables:
coding: utf-8
End:
