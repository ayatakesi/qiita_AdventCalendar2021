\input texinfo   @c -*- mode: texinfo; -*-
@c ===========================================================================
@c
@c This file was generated with po4a. Translate the source file.
@c
@c ===========================================================================
@c %**start of header
@setfilename ../../info/efaq.info
@settitle GNU Emacs FAQ
@include docstyle.texi
@c %**end of header

@include emacsver.texi

@c This file is maintained by Romain Francoise <rfrancoise@gnu.org>.
@c Feel free to install changes without prior permission (but I'd
@c appreciate a notice if you do).

@copying
Copyright @copyright{} 2001--2021 Free Software Foundation, Inc.@* Copyright
@copyright{} 1994, 1995, 1996, 1997, 1998, 1999, 2000 Reuven M. Lerner@*
Copyright @copyright{} 1992, 1993 Steven Byrnes@* Copyright @copyright{}
1990, 1991, 1992 Joseph Brian Wells@*

@quotation
This list of frequently asked questions about GNU Emacs with answers
(``FAQ'') may be translated into other languages, transformed into other
formats (e.g., Texinfo, Info, HTML, PDF), and updated with new information.

The same conditions apply to any derivative of the FAQ as apply to the FAQ
itself.  Every copy of the FAQ must include this notice or an approved
translation, information on who is currently maintaining the FAQ and how to
contact them (including their e-mail address), and information on where the
latest version of the FAQ is archived (including FTP information).

The FAQ may be copied and redistributed under these conditions, except that
the FAQ may not be embedded in a larger literary work unless that work
itself allows free copying and redistribution.

[This version has been heavily edited since it was included in the Emacs
distribution in 1999.]
@end quotation
@end copying

@dircategory Emacs
@direntry
* Emacs FAQ: (efaq).         Frequently Asked Questions about Emacs.
@end direntry

@c The @titlepage stuff only appears in the printed version
@titlepage
@sp 10
@center @titlefont{GNU Emacs FAQ}

@c The following two commands start the copyright page.
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@node Top, FAQ notation, (dir), (dir)
@top The GNU Emacs FAQ

これはGNU EmacsのFAQ(Frequently Asked Questions: よくある質問)です。

このFAQはGNU Emacsの一部として保守されています。何か間違いを見つけたり提案がある場合には、それらを報告するために@kbd{M-x
report-emacs-bug}を使うようお願いします。

これはEmacs
@value{EMACSVER}とともに配布されているバージョンのFAQであり、主にそのバージョンについて記述しています。それより古いバージョンについての情報があったとしても、(今となっては歴史的な関心のためだけとなった)非常に古いリリースに関する詳細は削除されています。これらに興味がある場合には古いバージョンのEmacsに同梱されているバージョンのFAQ、あるいはこのドキュメントのEmacsソースレポジトリのヒストリーを参照してください。

Emacsのリリースバージョンはとても安定しているので、常に最新リリースの実行をお勧めします。

このFAQは非常に頻繁に更新されている訳ではありません。Emacsについての疑問がある場合には、Emacsマニュアルが最良の出発点であることが多々あります。

@ifnottex
@insertcopying
@end ifnottex

@menu
* FAQ notation::
* General questions::
* Getting help::
* Status of Emacs::
* Common requests::
* Bugs and problems::
* Compiling and installing Emacs::
* Finding Emacs and related packages::
* Key bindings::
* Alternate character sets::
* Mail and news::
* Concept index::            
@end menu

@c ------------------------------------------------------------
@node FAQ notation
@chapter FAQの表記について
@cindex FAQ notation

このチャプターではGNU Emacs
FAQ、並びにEmacsドキュメントで使用する表記について説明します。これがFAQを読む最初の機会の場合、あるいはFAQで使用されている表記や用語について混乱したらこのセクションを参照してください。

@menu
* Basic keys::
* Extended commands::
* Emacs manual::
* File-name conventions::
* Common acronyms::          
@end menu

@node Basic keys
@section @kbd{C-h}、@kbd{C-M-a}、@key{RET}、@kbd{@key{ESC} a}等は何を意味するのか?
@cindex Basic keys
@cindex Control key, notation for
@cindex @key{Meta} key, notation for
@cindex Control-Meta characters, notation for
@cindex @kbd{C-h}, definition of
@cindex @kbd{C-M-h}, definition of
@cindex @key{DEL}, definition of
@cindex @key{ESC}, definition of
@cindex @key{LFD}, definition of
@cindex @key{RET}, definition of
@cindex @key{SPC}, definition of
@cindex @key{TAB}, definition of
@cindex Notation for keys

@itemize @bullet

@item
@kbd{C-x}:@key{Control}キーを押したまま@kbd{x}キーを押下する

@item
@kbd{M-x}: @key{Meta}キー(コンピューターに@key{Meta}キーがなければ@pxref{No Meta
key}を参照)を押したまま@kbd{x}キーを押下する

@item
@kbd{M-C-x}: @key{Control}と@key{Meta}の両方を押したまま@kbd{x}キーを押下する

@item
@kbd{C-M-x}: 上記と同義

@item
@key{LFD}: ラインフィードまたは改行; @kbd{C-j}と同じ

@item
@key{RET}: @key{Return}のこと、@key{Enter}と記される場合もあり; @kbd{C-m}と同じ

@item
@key{DEL}: @key{Delete}のこと、通常は@key{Backspace}と@strong{同じではない}; @kbd{C-?}と同じ
(deleteでEmacsのヘルプが呼び出される場合には@ref{Backspace invokes help}を参照)

@item
@key{ESC}: Escapeのこと; @kbd{C-[}と同じ

@item
@key{TAB}: Tabのこと; @kbd{C-i}と同じ

@item
@key{SPC}: Spaceバー

@end itemize

1つのキー(およびいくつかの単一キーシーケンス)より長いキーシーケンスは以下のようにクォート内部や行にその文字自体を記述します:

@display
  @kbd{M-x frobnicate-while-foo @key{RET}}
@end display

@noindent
このようなキーシーケンス内にある実際のスペースはすべて無視する必要があります; 実際にスペースキーの押下を意味するのは@key{SPC}だけです。

@kbd{C-x}
(@kbd{C-?}は例外)により送信される@acronym{ASCII}コードは単に@kbd{x}を押下時に送信される値から96(大文字の@kbd{X}では64)を減じた値であり、これは0から31になるでしょう。UnixおよびGNU/Linuxの端末においては、@kbd{M-x}が送信する@acronym{ASCII}コードは単に@kbd{x}を押下時に送信される値に128を加えた値になります。基本的には@key{Control}はビット5とビット6をオフにして、@key{Meta}はビット7をオンにします@footnote{
DOSおよびWindowsの端末では@key{Meta}キー押下時にビット7をセットしません。}。

@c FIXME I cannot understand the previous sentence.
@kbd{C-?}
(別名@key{DEL})は@acronym{ASCII}コードの127です。127はビットの5と6がどちらもオンなので、@kbd{C-?}を``control''キーと呼ぶのは誤った呼び方です。更にほとんどありませんが@kbd{C-?}が@acronym{ASCII}コードの127を生成するキーボードも存在します。

@ref{Keys,,, emacs, The GNU Emacs Manual}を参照してください。

@node Extended commands
@section @file{M-x @var{command}}の意味は?
@cindex Extended commands
@cindex Commands, extended
@cindex @kbd{M-x}, meaning of

@kbd{M-x
@var{command}}は@kbd{M-x}をタイプしてからコマンドの名前、その後に@key{RET}をタイプする(@kbd{M-x}や@key{RET}の意味があやふやなら@xref{Basic
keys}を参照)。

(デフォルトでは)@kbd{M-x}はコマンド@code{execute-extended-command}を呼び出します。このコマンドによってコマンド名を覚えていれば任意のEmacsコマンドを実行できます。コマンド名を覚えることができなければ補完には@key{TAB}や@key{SPC}、利用可能なコマンドの一覧は@kbd{?}、以前に入力したコマンドの確認には@kbd{M-p}と@kbd{M-n}(または上下の矢印)をタイプできます。Emacsの@dfn{コマンド(command)}とは@dfn{インタラクティブ(interactive:
対話的)}なEmacs関数のことです。

@cindex @key{Do} key
システム管理者によって@code{execute-extended-command}呼び出しが別のキーにバインドされているかもしれません。@kbd{Do}とラベル付けされたキーをもつようなキーボードなら、これを行うための良い候補になります。

非インタラクティブなEmacs関数の実行が必要なら@ref{Evaluating Emacs Lisp code}を参照してください。

@node Emacs manual
@section EmacsマニュアルでトピックXXXを読むには?
@cindex Emacs manual, reading topics in
@cindex Reading topics in the Emacs manual
@cindex Finding topics in the Emacs manual
@cindex Info, finding topics in

わたしたちがEmacsマニュアル内のある@var{topic}を参照する際には、@kbd{C-h i m emacs @key{RET} m
@var{topic} @key{RET}}とタイプすれば(壊れていなければ)そのマニュアルノードの中を読むことができます。

これはInfo、つまりGNUハイパーテキストドキュメントブラウザを呼び出します。Infoの使用方法をまだご存知なければ、Info内で@kbd{?}をタイプしてください。

わたしたちが@var{topic}:@var{subtopic}で参照する場合には@kbd{C-h i m emacs @key{RET} m
@var{topic} @key{RET} m @var{subtopic} @key{RET}}とタイプしてください。

これらのコマンドが期待した通りに機能しなければ、システム管理者がInfoファイルをインストールしていないか、正しくインストールされていないかもしれません。この場合には苦情を申し立てるべきでしょう。

Info内でこのFAQを読んでいるなら、リファレンス上で単に@key{RET}を押下すればフォローできます。

Emacsマニュアルのハードコードをご所望なら@xref{Getting a printed manual}を参照してください。

@node File-name conventions
@section @file{src/config.h}、@file{site-lisp/default.el}等は何なのか?
@cindex File-name conventions
@cindex Conventions for file names
@cindex Directories and files that come with Emacs

これらはEmacsとともに配布されるファイルです。Emacsディストリビューションは@file{etc}、@file{lisp}、@file{src}等のサブディレクトリーに分かれています。これらの内のいくつか(@file{etc}や@file{lisp}など)はインストール済みEmacsとソースの両方に存在しますが、ソース内でのみ見いだせるものもあります(@file{src}など)。

ineEmacsを使っているもののシステム上のどこにあるか判らない場合には、Emacsを起動して@kbd{C-h v data-directory
@key{RET}}とタイプしてください。表示されるディレクトリー名は、@file{etc}ディレクトリーがインストールされたフルパスになるでしょう(このフルパスはEmacs変数@code{data-directory}に記録されており、@kbd{C-h
v}でこの値と変数のドキュメントが表示される)。

Infoディレクトリーはの場所(Infoドキュメントが格納されている場所)変数@code{Info-default-directory-list}に保持されています。この変数の値(ディレクトリー名のリスト)を確認するには@kbd{C-h
v Info-default-directory-list
@key{RET}}を使用してください。このリスト内にある最後のディレクトリーに、恐らくもっとも多くのInfoファイルが格納されているでしょう。デフォルトではEmacsのInfoドキュメントは@file{/usr/local/share/info}にあります。

@file{etc}ディレクトリー内にあるいくつかのファイルに関する情報については@ref{Informational files for
Emacs}を参照してください。

@node Common acronyms
@section FSF、GNU、RMS、GPLとは何なのか?
@cindex FSF, definition of
@cindex GNU, definition of
@cindex RMS, definition of
@cindex Stallman, Richard, acronym for
@cindex Richard Stallman, acronym for
@cindex GPL, definition of
@cindex Acronyms, definitions for
@cindex Common acronyms, definitions for

@table @asis

@item FSF
フリーソフトウェア財団(Free Software Foundation)

@item GNU
GNU's Not Unix(GNUはUnixではない)

@item RMS
Richard Matthew Stallman

@item GPL
GNU 一般公衆利用許諾書(GNU GENERAL PUBLIC LICENSE)

@end table

フリーソフトウェア財団(Free Software Foundation)のタイトルにある``フリー(free)''とは、``ゼロコスト(zero
cost)''ではなく``自由(freedom)''を意図した単語です。GPLの対象となるソフトウェアにたいして、もし望むなら誰でも対価を請求できます。とはいえ実際にはGPLが課した自由により、誰でもGPLソフトウェアの再販や譲渡を行う権利を有するので、常に誰か他の人からより少ない金額でソフトウェアを入手できることから低価格へとつながります。

@c ------------------------------------------------------------
@node General questions
@chapter 一般的な質問
@cindex General questions

このチャプターではEmacs、フリーソフトウェア財団や関連する組織にたいする一般的な問いが含まれています。

@menu
* Real meaning of copyleft::
* Guidelines for newsgroup postings::
* Newsgroup archives::
* Reporting bugs::
* Unsubscribing from Emacs lists::
* Contacting the FSF::       
@end menu

@node Real meaning of copyleft
@section GNUのcopyleftとは法的に実際には何を意味するのか?
@cindex Copyleft, real meaning of
@cindex GPL, real meaning of
@cindex General Public License, real meaning of
@cindex Discussion of the GPL

GNU
一般公衆利用許諾書、いわゆるGPL(コピーレフト)の真の法的な意味合いは、裁判官がその有効性と範囲を裁定した場合にのみ明らかになります。判例として定められるようなGPLが関与する著作権侵害の訴訟はこれまでに一度もありませんでした。GPL条件への違反によって企業への訴訟が起こされましたが、これまでのところすべてが法廷外で(原告に有利に)和解されています。この問題に関しての議論は、どうかこの問題について大々的に罵り合うために作成されたニュースグループ@uref{news:gnu.misc.discuss}で行ってください。

RMSは記しています:

@quotation
GNUコピーレフトの法的な意味は、Emacsがフリーソフトウェアプロジェクトであり、Emacsに関連する作業もフリーソフトウェアであるべくだという精神ほど重要ではありません。``フリー(free)''とはすべてのユーザーがEmacsを学び、共有して、変更や改善を行う自由(freedom)をもっているという意味です。すべての人がこの自由を有することを保証するために、あなたがEmacsのあるバージョンや関連プログラムを配布する際には、それを受け取る人にソースコードも渡すことによって、あなたが楽しんだのと同じ自由を分け与えてください。
@end quotation

@node Guidelines for newsgroup postings
@section What are appropriate messages for the various Emacs newsgroups?
@cindex Newsgroups, appropriate messages for
@cindex GNU newsgroups, appropriate messages for
@cindex Usenet groups, appropriate messages for
@cindex Mailing lists, appropriate messages for
@cindex Posting messages to newsgroups

@cindex GNU mailing lists
Emacsメーリングリストのは@uref{https://savannah.gnu.org/mail/?group=emacs, the Emacs
Savannah page}に記述があります。それらのうちのいくつかはニュースグループへゲートウェイされています。

Emacsプログラム全般に関する議論はニュースグループ@uref{news:comp.emacs}、@uref{news:gnu.emacs.help}はGNU
Emacsに特化したニュースグループです。したがってある問いにたいして適切なニュースグループは1つだけなので、両方のグループへのクロスポストには意味がありません。

問題について大いに罵り合うために作成された@uref{news:gnu.misc.discuss}を除いて、``非フリー(non-free)''なソフトウェアを推奨するようなメッセージは@code{gnu.*}ニュースグループのすべてにおいて受け入れ難いものとみなされます。``非フリー''なソフトウェアにはエンドユーザーが自由にソースコードを改変したり拡張機能の取り替えができないすべてのソフトウェアが含まれます。そのようなソフトウェアを推奨するフォローアップを投稿する際には、@samp{Newsgroups:}行から@code{gnu.*}グループを削除するよう注意してください。

@uref{news:gnu.emacs.bug}はバグレポートを目にする場所ですが、このニュースグループに直接バグレポートを投稿することは避けてください(@ref{Reporting
bugs}を参照)。

最後にGNUのメーリングリストやニュースグループに投稿する前に@url{https://www.gnu.org/philosophy/kind-communication.html,
GNU Kind Communications Guidelines}を一読することをお勧めします。

@node Newsgroup archives
@section @uref{news:gnu.emacs.help}や他のGNUグループへの古い投稿はどこで入手できる?
@cindex Archived postings from @code{gnu.emacs.help}
@cindex Usenet archives for GNU groups
@cindex Old Usenet postings for GNU groups

網羅する範囲において意図していない齟齬があるかもしれませんが、FSFはGNUメーリングリストすべてのアーカイブを長年保守してきました。このアーカイブが@uref{https://lists.gnu.org/r/,
the GNU mail archive}でウェブ上で閲覧できます。

@uref{http://groups.google.com/groups/dir?q=gnu&,
Google}のようなウェブベースのUsenet検索サービスでも@code{gnu.*}はアーカイブされています。

@node Reporting bugs
@section Emacsのバグやその他の問題はどこにレポートすれば?
@cindex Bug reporting
@cindex Good bug reports
@cindex How to submit a bug report
@cindex Reporting bugs

コマンド@kbd{M-x
report-emacs-bug}を使用するのがEmacsのバグを報告する正しい方法です。このコマンドは必要な情報と正しいEメールアドレス@email{bug-gnu-emacs@@gnu.org}でメールバッファーをセットアップします。ここに送信したものはニュースグループ@uref{news:gnu.emacs.bug}でも目にすることができますが、バグレポートの提出にはどうかニュースではなくEメールを使用してください。これによって信頼できる返信アドレスが保証されるので、詳細についてあなたに連絡をとることができるようになります。

バグを報告する前に必ずEmacsマニュアルの``Bugs''セクションを読んでください。マニュアルには有用なバグレポートを投稿する方法(@ref{Bugs,
, Reporting Bugs, emacs, The GNU Emacs
Manual}を参照)が詳細に渡って記述されています(マニュアルの読み方が判らなければ@ref{Emacs manual}を参照)。

RMSは述べています:

@quotation
バグレポートを@url{https://lists.gnu.org/mailman/listinfo/help-gnu-emacs, the
help-gnu-emacs mailing list}
(@uref{news:gnu.emacs.help}に投稿される効果をもつ)に送信するのは、ほとんどは問題を解決するアイデアをもたない単なるユーザーである多数の人たちに不必要に費やさせるので望ましくありません。@url{https://lists.gnu.org/mailman/listinfo/bug-gnu-emacs,
The bug-gnu-emacs
list}なら何をするべきか恐らくもっと知識があり、他のものよりもEmacsのメッセージを受け取りたいと表明している、より少ない人たちにメッセージを届けられます。
@end quotation

RMSは@uref{news:gnu.emacs.help}へ投稿しても問題がない場合について述べています:

@quotation
バグをレポートして利用可能な修整について収穫が得られなかったら適切な遅延(1週間とか)を経た後で、あなたを助けられる誰かに助けを求めるために@code{gnu.emacs.help}へ投稿することに問題はありません。
@end quotation

バグを発見したのか確信がもてない場合には、RMSの好意による以下のそれほど徹底はされていないリストを検討してみてください:

@quotation
Emacsがクラッシュしたら、それはバグです。Emacsのビルド時にコンパイルがエラーとなるなら、それはバグです。ビルド時にEmacsがクラッシュしたら、それはバグです。ドキュメントに記述された通りにLispコードが処理を行わなければ、それはバグです。
@end quotation

@node Unsubscribing from Emacs lists
@section How do I unsubscribe from a mailing list?
@cindex Unsubscribing from GNU mailing lists
@cindex Removing yourself from GNU mailing lists

あなたが@var{list}という名前のGNUメーリングリストからメールを受信しているなら、アドレス@email{@var{list}-request@@gnu.org}にリクエストを送信すれば登録解除できるはずです。メーリングリストのメールには通常ならメッセージヘッダー(@samp{List-Unsubscribe:})、あるいはフッターのいずれかに登録を解除する方法を告げる情報が含まれています。

@node Contacting the FSF
@section How do I contact the FSF?
@cindex Contracting the FSF
@cindex Free Software Foundation, contacting

最新の情報は@uref{https://www.fsf.org/about/contact.html, the FSF contact
web-page}を参照してください。一般的な対応なら@email{info@@fsf.org}に送信できます。

@cindex Ordering GNU software
FSFに直接アイテムを注文する方法の詳細は@uref{https://shop.fsf.org/, FSF on-line
store}を参照してください。

@c ------------------------------------------------------------
@node Getting help
@chapter 助けを得るには
@cindex Getting help

このチャプターではEmacsでヘルプを得る方法について説明します。

@menu
* Basic editing::
* Learning how to do something::
* Getting a printed manual::
* Emacs Lisp documentation::
* Installing Texinfo documentation::
* Printing a Texinfo file::
* Viewing Info files outside of Emacs::
* Informational files for Emacs::
* Help installing Emacs::
* Obtaining the FAQ::        
@end menu

@node Basic editing
@section Emacsは初めて; 基本的な編集を行うには?
@cindex Basic editing with Emacs
@cindex Beginning editing
@cindex Tutorial, invoking the
@cindex Self-paced tutorial, invoking the
@cindex Help system, entering the

マイペースで学べるチュートリアルを呼び出すには@kbd{C-h
t}とタイプします。単に@kbd{C-h}とタイプすることでヘルプシステムにエンターします。このチュートリアルはEmacs
22以降はフランス語、ドイツ語、日本語、ロシア語等、英語以外の多くの言語で利用できるようになりました。言語を選んでチュートリアルを開始するには@kbd{M-x
help-with-tutorial-spec-language @key{RET}}とタイプしてください。

ローカルのキーボードを処理するために、@kbd{C-h}が@key{DEL}のように振る舞うようにシステム管理者が変更しているかもしれません。ヘルプの呼び出しにはかわりに@kbd{M-x
help-for-help}を使用できます。システム上でヘルプを呼び出すキー(もしあれば)を見つけるには@kbd{M-x where-is
@key{RET} help-for-help
@key{RET}}とタイプします。これはエコーエリア内にカンマで区切られたキーシーケンスのリストをプリントします。リストされた各キーシーケンスの最後の文字は無視してください。結果として得られたキーシーケンス(@key{F1}が一般的)のそれぞれがヘルプを呼び出します。

Emacsのヘルプが単一のキーで呼び出せればもっとも良く機能します。この値は変数@code{help-char}に格納されているはずです。

@uref{http://web.psung.name/emacs/}ではEmacsのスライドやチュートリアルをいくつか見つけることができます。

@node Learning how to do something
@section Emacsで何かを行う方法を見つけるには?
@cindex Help for Emacs
@cindex Learning to do something in Emacs
@cindex Reference card for Emacs
@cindex Overview of help systems

Emacsで物事を行う方法を見つけるには複数の手法があります。

@itemize @bullet

@cindex Reading the Emacs manual
@item
Infoハイパーテキストリーダーを通じてEmacsマニュアルの完全なテキストが利用できます。Infoモードでマニュアルを表示するには@kbd{C-h
r}とタイプしてください。Infoにエンター直後に@kbd{h}とタイプすれば、その使用方法に関する短いチュートリアルが提供されるでしょう。

@cindex Lookup a subject in a manual
@cindex Index search in a manual
@item
特定の問題やコマンド、変数について述べているマニュアルのセクションを素早く見つけるには@kbd{C-h i m emacs @key{RET} i
@var{topic} @key{RET}}とタイプします。これで正しいマニュアル箇所に辿り着けないようなら、必要なものが見つかるまで@kbd{,}
(カンマ)を繰り返し押下してください(@kbd{i}と@kbd{,}はEmacsマニュアルの全インデックスからタイプされた@var{topic}を探すインデックス検索関数を呼び出すキー)。

@cindex Apropos
@item
@kbd{C-h a} (@kbd{M-x
command-apropos})を使用すれば、特定の単語を含んだすべてのコマンド(実際には正規表現にマッチしたコマンド)を一覧できます。

@cindex Command description in the manual
@item
コマンド@kbd{C-h F}
(@code{Info-goto-emacs-command-node})はコマンド名の入力を求めて、そのコマンドの記述があるEmacsマニュアルのセクションの検索を試みます。

@cindex Finding commands and variables
@item
@kbd{M-x apropos}を使用すれば名前に特定の単語を含んだ関数およびコマンドをすべて一覧できます。

@item
@kbd{M-x
apropos-documentation}を使用すればドキュメントが正規表現または文字列ににマッチする関数およびコマンドをすべて一覧できます。

@item
FSFからマニュアルのハードコードを注文できます。@ref{Getting a printed manual}を参照してください。

@cindex Reference cards, in other languages
@item
コマンドとそれらを呼び出すキーを一覧する印刷されたリファレンスカードを入手できます。$2(または$10か$18)でFSFに注文するか、Emacsディストリビューション内のファイル@file{etc/refcards/refcard.tex}または@file{etc/refcards/refcard.pdf}を自分でプリントできます。バージョン21.1以降のEmacsディストリビューションには複数の言語に翻訳されたリファレンスカードが同梱されています。@file{etc/refcards/@var{lang}-refcard.*}
(@var{lang}は言語のアルファベット2文字コード)という名前のファイルを探してみてください。たとえばドイツ語バージョンのリファレンスカードは@file{etc/refcards/de-refcard.tex}と@file{etc/refcards/de-refcard.pdf}にあります。

@item
Emacsには他にもヘルプや情報を得るためのコマンドが多数存在します。これらのコマンドの一覧を得るには@kbd{C-h}の後に@samp{?}をタイプしてください。

@end itemize

@node Getting a printed manual
@section Emacsマニュアルの印刷版コピーを入手するには?
@cindex Printed Emacs manual, obtaining
@cindex Manual, obtaining a printed or HTML copy of
@cindex Emacs manual, obtaining a printed or HTML copy of

Emacsマニュアルの印刷されたコピーわFSFに注文できます。詳細は@uref{https://shop.fsf.org/, FSF on-line
store}を参照してください。

この数百ページに及ぶマニュアルを自分でプリントする勇気があるなら、マニュアルの完全なTexinfoソースもEmacsディストリビューションの@file{doc/emacs}ディレクトリーにあります(@ref{Printing
a Texinfo file}を参照)。

どうしても自分でコピーをプリントする必要があるものの@TeX{}がない場合には、

@uref{https://www.gnu.org/software/emacs/manual/}からPostScriptやPDF(あるいはHTML)のバージョンを入手できます。

Emacsからマニュアルを閲覧する方法については@ref{Learning how to do something}を参照してください。

@node Emacs Lisp documentation
@section Emacs Lispではどこでドキュメントを入手すれば?
@cindex Documentation on Emacs Lisp
@cindex Function documentation
@cindex Variable documentation
@cindex Emacs Lisp Reference Manual
@cindex Reference manual for Emacs Lisp

Emacsでは関数なら@kbd{C-h f}、変数なら@kbd{C-h v}とタイプしてドキュメントを入手できます。

詳細についてはEmacs LispリファレンスマニュアルがInfo形式で利用可能です(@ref{Top, Emacs Lisp,, elisp, The
Emacs Lisp Reference Manual}を参照)。

FSFにマニュアルのハードコードを注文することもできます。詳細は@uref{https://shop.fsf.org/, FSF on-line
store}を参照してください(このマニュアルは常にプリントされているる訳ではない)。

Emacs LispリファレンスマニュアルのHTMLバージョンは

@uref{https://www.gnu.org/software/emacs/elisp-manual/elisp.html}から利用できます。

@node Installing Texinfo documentation
@section Texinfoドキュメントをインストールするには?
@cindex Texinfo documentation, installing
@cindex Installing Texinfo documentation
@cindex New Texinfo files, installing
@cindex Documentation, installing new Texinfo files
@cindex Info files, how to install

Emacsのリリースにはビルド前のInfoファイルが同梱されており、通常のインストールプロセスによって正しい場所に配置されます。これはInfoファイルを提供するほとんどのアプリケーションにも当てはまります。以降は手作業で追加のInfoファイルをインストールしたいユーザーだけに関係のあるセクションです。

まずはTexinfoソースファイルをInfoファイルにしなければなりません。

@uref{https://www.gnu.org/software/texinfo/}にあるTexinfoパッケージの一部として利用可能なスタンドアロンプログラム@file{makeinfo}を使用してこれを行うことができます。

TexinfoフォーマットについてはTexinfoパッケージに同梱されているTexinfoマニュアルを読んでください。このマニュアルはInfoフォーマットでもインストールされるので、Emacsから@kbd{C-h
i m texinfo @key{RET}}とタイプして読むことができます。

@c FIXME is this a complete alternative?
@c Probably not, given that we require makeinfo to build Emacs.
かわりに変換したいマニュアルのTexinfoソースファイルをEmacsでvisitした後にコマンド@kbd{M-x
texinfo-format-buffer}を使用することもできます。

@code{texinfo-format-buffer}と@file{makeinfo}はどちらも実行結果のInfoファイルをEmacsのInfoツリーにインストールしません。Infoファイルをインストールするには以下の手順を行ってください:

@enumerate
@item
インストール済みEmacsディストリビューションの@file{info}ディレクトリーにファイルを移動する。場所が判らなければ@ref{File-name
conventions}を参照のこと。

@item
メインのInfoディレクトリーメニュー更新のために、以下のようにしてTexinfoディストリビューションの一部である@code{install-info}コマンドを実行する。:

@example
 install-info --info-dir=@var{dir-path} @var{dir-path}/@var{file}
@end example

@noindent
ここで@var{dir-path}は生成したInfoファイルをコピーしたディレクトリーへのフルパス、@var{file}は生成してインストールしたいInfoファイルの名前。

インストール済みの@code{install-info}コマンドがなければインストール済みEmacsディストリビューションのファイル@file{info/dir}を編集してインストールされているInfoパッケージ内のトップレベルノードに行を追加できる。このファイル内にある例にしたがえばよい。フォーマットは:

@example
* Topic: (relative-pathname).  Short description of topic.
@end example

@end enumerate

Infoファイルをインストールしたいが必要な権限がない場合にはいくつかのオプションがあります:

@itemize @bullet
@item
使用する前に実際にInfoファイルがインストールされている必要はない。@code{info}コマンドにプレフィクス引数を使用して、ミニバッファーでInfoファイルの名前を指定できる。これによりそのInfoファイル内の@samp{Top}という名前のノードに移動する。たとえばホームディレクトリーにある@file{@var{info-file}}という名前のInfoファイルを閲覧するには、以下のようにタイプできる:

@example
@kbd{C-u C-h i ~/@var{info-file} @key{RET}}
@end example

かわりにファイルの名前を以下のようにカッコ内にタイプして(Infoモードで@kbd{g}押下により呼び出される)@code{Info-goto-node}コマンドにファイル名を与えることができる。

@example
@kbd{C-h i g (~/@var{info-file}) @key{RET}}
@end example

@item
自分用のInfoディレクトリーを作成できる。変数@code{Info-default-directory-list}の値にパス名を追加することによってEmacsにInfoディレクトリーの場所を伝えることができる。たとえばホームディレクトリーにある@file{Info}という名前のサブディレクトリーを個人用のInfoディレクトリーとして使用するには以下を@file{.emacs}ファイルに追加すればよい:

@lisp
(add-to-list 'Info-default-directory-list "~/Info")
@end lisp

このディレクトリーには@file{dir}という名前のトップレベルInfoファイルが必要になるだろう。これはそのディレクトリーにあるInfoファイルのエントリーだけをリストスル点を除き、システムの@file{dir}がもつすべてをもつ。(偶然にも)このディレクトリー内のすべてのファイルが他の@file{dir}ファイルから参照されていれば、これは必要ないかもしれない。@code{Info-default-directory-list}内のすべての@file{dir}ファイルのノードリストはInfoシステムによってマージされる。

@end itemize

@node Printing a Texinfo file
@section Texinfoファイルをプリントするには?
@cindex Printing a Texinfo file
@cindex Texinfo file, printing
@cindex Printing documentation

Infoファイルから見栄えの良いプリント出力は得られません。マニュアルのプリント用には、依然としてオリジナルのTexinfoソースファイルが不可欠です。

システムに@TeX{}がインストールされていれば以下のステップを行います:

@enumerate

@item
Texinfoファイルの先頭の行が以下のようになっていることを確認:

@example
\input texinfo
@end example

@samp{texinfo}を@file{texinfo.tex}ファイルのフルパスに変更(またはカレントディレクトリーにコピーまたはリンク)する必要があるかもしれない。これはEmacsに同梱されている@file{doc/misc/texinfo.tex}である。

@item
@kbd{texi2dvi
@var{texinfo-source}}とタイプする。ここで@var{texinfo-source}はプリントしたコピーを生成したいTexinfoソースファイル名。@samp{texi2dvi}スクリプトはGNU
Texinfoディストリビューションの一部である。

@samp{texi2pdf}の場合には、かわりにPDFファイルを生成する。

@item
あなたのサイトでDVIファイルを通常プリントするのと同じ方法でDVIファイル@file{@var{texinfo-source}.dvi}をプリントする。たとえばPostScriptプリンターをもっていれば、そのプリンターでDVIファイルをプリントするために@code{dvips}プログラムを実行する。

@end enumerate

より一般的な手順については最新のTexinfoパッケージを調べてください(@ref{Installing Texinfo
documentation}を参照)。

@node Viewing Info files outside of Emacs
@section Emacsを使わずにInfoファイルを閲覧できる?
@cindex Viewing Info files
@cindex Info file viewers
@cindex Alternative Info file viewers

はい。以下はいくつかの候補プログラムです:

@itemize @bullet

@item
Texinfoパッケージに同梱されているInfoプログラムのスタンドアロンバージョンである@code{info}。詳細は@xref{Installing
Texinfo documentation}を参照のこと。

@item
X Window
systemの下で実行され、Tcl/Tkを使用するInfoビューアーのTkinfo。Tkinfoは@uref{http://math-www.uni-paderborn.de/~axel/tkinfo/}で入手できる。

@end itemize

@node Informational files for Emacs
@section 利用できるEmacs情報のファイルは?
@cindex Informational files included with Emacs
@cindex Files included with Emacs
@cindex @file{COPYING}, description of file
@cindex @file{DISTRIB}, description of file
@cindex @file{MACHINES}, description of file
@cindex @file{NEWS}, description of file

これはよくある質問ではありませんが、そうあるべきなのです!
あなたに読んでもらうためｎ、Emacsおよび関連するGNUプロジェクトの様相に関する様々な情報ファイルが利用可能です。

以下のファイル(やその他のファイルも)はEmacsディストリビューション(どこにあるか判らなければ@ref{File-name
conventions}を参照)の@file{etc}ディレクトリー内にあります。これらのファイルの多くはEmacsの@samp{Help}メニュー、あるいは@kbd{C-h
?} (@kbd{M-x help-for-help})とタイプして利用することができます。

@table @file

@item COPYING
GNU 一般公衆利用許諾書(GNU GENERAL PUBLIC LICENSE)

@item DISTRIB
Emacsの可用性に関する情報

@item MACHINES
様々なマシンおよびシステムにおけるEmacsの状況

@item NEWS
Emacsのニュース、ユーザーの目に見える最新の変更履歴

@end table

@cite{GNU's Bulletin}の未解決問題を含むより詳細なGNU情報については

@uref{https://www.gnu.org/bulletins/bulletins.html}、および

@uref{http://www.cs.pdx.edu/~trent/gnu/gnu.html}を参照してください。

@node Help installing Emacs
@section Emacsのインストールでどこに助けを求めれば?
@cindex Installation help
@cindex Help installing Emacs

インストールにおける基本的なヒントについては@ref{Installing Emacs}、インストールに何か問題がある場合には@ref{Problems
building Emacs}を参照してください。

@uref{https://www.fsf.org/resources/service/, The GNU Service
directory}にはEmacsやその他のGNUソフトウェアのインストールや使用において有償による手助けを提案する企業や個人が一覧されています。

@node Obtaining the FAQ
@section このFAQの最新版はどこで入手できる?
@cindex FAQ, obtaining the
@cindex Latest FAQ version, obtaining the

Emacs
FAQはInfo形式としてEmacsに同梱されています。任意のEmacsフレームトップにあるEmacsメニューバーの@samp{Help}メニューあら@samp{Emacs
FAQ}オプションを選択、あるいは@kbd{C-h C-f} (@kbd{M-x
view-emacs-FAQ})とタイプしてくださいこれを読むことができます。開発版の最新バージョンはEmacsの開発用レポジトリから利用できます(@ref{Latest
version of Emacs}を参照)。

@c ------------------------------------------------------------
@node Status of Emacs
@chapter Emacsの状況について
@cindex Status of Emacs

このチャプターでは最新バージョンの状況も含めたEmacsに関する基本情報を提供します。

@menu
* Origin of the term Emacs::
* Latest version of Emacs::
* New in Emacs 27::
* New in Emacs 26::
* New in Emacs 25::
* New in Emacs 24::
* New in Emacs 23::
* New in Emacs 22::
* New in Emacs 21::
* New in Emacs 20::          
@end menu

@node Origin of the term Emacs
@section ``Emacs''という名前の由良は?
@cindex Origin of the term ``Emacs''
@cindex Emacs name origin
@cindex TECO
@cindex Original version of Emacs

@c gls@@east.sun.com
Emacsは元々はEditor
MACroSの略語でした。RMSは``その時点ではITS上の略語として@kbd{E}は使用されていなかったのでEmacsという名前を採用した''と述べています。最初のEmacsは1976年にMITにおいてRMSがPDP-10上のITS
(the Incompatible Timesharing System)のエディターTECO (Text Editor and COrrector,
originally Tape Editor and
COrrector)のために記述したマクロのセットでした。RMSはすでにTECOを再プログラム可能な``リアルタイム''のフルスクリーンモードに拡張済みでした。Emacsは多くの異なるTECOコマンドセットとキーバインディングを統合するプロジェクトとして、MITにおいてGuy
Steeleによって開始されて、RMSによって完成されました。

TECOのコードは行がノイズのように見えると多くの人が言っています。これは@uref{news:alt.lang.teco}で読むことができます。誰かがTECO実装をEmacs
Lispで記述しました(これを見つけるには@ref{Packages that do not come with
Emacs}を参照)。Emacsの内部でオリジナルのTECOを実行するのは興味深いプロジェクトになるでしょう。

@cindex Why Emacs?
Emacsという名前をもつ理由としてそれほど深刻ではない候補についてはファイル@file{etc/JOKES}を調べてください(@ref{File-name
conventions}を参照)。

@node Latest version of Emacs
@section Emacsの最新バージョンとは?
@cindex Version, latest
@cindex Latest version of Emacs
@cindex Development, Emacs
@cindex Repository, Emacs
@cindex Bazaar repository, Emacs

Emacs
@value{EMACSVER}はこれが記述されたカレントのバージョンです。2つのコンポーネントからなるバージョンナンバーは、リリースバージョンであることを表します(例:
@samp{24.5})。3つのコンポーネントからなるバージョンナンバーは開発バージョンを表します(たとえば@samp{28.0.50}、いずれ@samp{28.1}となる)。

Emacsは活動的な開発の下にあり@uref{https://savannah.gnu.org/projects/emacs/,
Savannah}でホスティングされています。そこで示された手順にしたがってプロジェクトレポジトリをクローンしてください。

リリース前にはEmacsにたいして多くの変更が施されるので、開発版のバージョンナンバーに特別な意味はありません。開発レポジトリから取得した日付を参考にするほうが良いでしょう。開発版は通常は日常的の使用にたいしてかなり堅牢ですが、最新機能より安定性の方が重要ならリリース版に固執した方が良いかもしれません。

以降のセクションでは最近のEmacsのリリースにおける主要な新機能を一覧にしました。Emacsのあるバージョンにおける変更の完全な詳細については@kbd{C-h
C-n}とタイプしてください。Emacs
22以降では古いバージョンにおいて何が新機能かうぃ読むために、このコマンドにプレフィクス引数を与えることができます。

@node New in Emacs 27
@section Emacs 27は何が違う?
@cindex Differences between Emacs 26 and Emacs 27
@cindex Emacs 27, new features in

@itemize
@cindex bignum support
@item
ネイティブでは大き過ぎるサイズの整数をサポートするために@acronym{GMP}ライブラリー(GNU Multiple Precision
libraryl:
GNU多倍長整数ライブラリー)を使用するようになった。ネイティブでサポートされる整数は``fixnums''、それより大きい整数は``bignum''とされる。bignumで意味をもつすべての数学、比較、および論理(``ビット''とも呼ばれる)の演算操作はfixnumとbignumの両方をサポートするようになった。

@cindex HarfBuzz
@item
デフォルトのシェーピングエンジン(shaping engine: 整形エンジン)としてEmacsはHarfBuzzを使用するようになった。

@cindex JSON, native parsing
@item
@file{json.el}より高速な@acronym{JSON}解析のネイティブサポート。

@item
Cairoによる描画が実験的機能ではなくなった。

@cindex portable dumper
@item
Emacsがunexecではなく``portable
dumper''を使用するようになった。これは現代的なシステムのメモリー割り当てにたいする互換性を向上して、とりわけ現代的なオペレーティングシステムのほとんどが使用している@acronym{ASLR}(Address
Space Layout Randomization: アドレス空間配置のランダム化)をよりサポートする。

@cindex XDG convention
@item
initファイルにたいしてEmacsが@acronym{XDG}規約を使用可能になった。

@cindex early init file
@item
早期initファイル(early init file)を使用してEmacsを設定できるようになった。これの主要目的は正規initファイル(regular
init file)のロード前に発生するパッケージシステムの初期化にたいして、その方法のカスタマイズを可能にすることである。

@cindex tabs
@item
タブ(タブバーとタブライン)にたいするビルトインサポート。

@item
ImageMagickを必要としないイメージのリサイズおよびローテートのサポート。
@end itemize

Emacs 27における変更の完全なリストは、Emacsの@file{NEWS}ファイル (@kbd{C-h n})を参照してください。

@node New in Emacs 26
@section Emacs 26は何が違う?
@cindex Differences between Emacs 25 and Emacs 26
@cindex Emacs 26, new features in

@itemize
@cindex threads
@item
EmacsがLispスレッドによる限定された並列処理を提供するようになった。

@cindex systemd support
@item
Emacsでの@code{systemd}サポート。新たなコマンドラインオプション@option{--fg-daemon}はこのサポートの一部であり、forkせずにフォアグラウンドで@option{--daemon}と同じように実行される。

@item
24ビットトゥルーカラーの機能を提供するテキスト端末上でのEmacsによる24ビットトゥルーカラーサポート。@ref{Colors on a
TTY}を参照のこと。

@cindex double-buffering
@item
X上のEmacsがほとんどの状況においてディスプレーのちらつきをなくすダブルバッファリングをサポートするようになった。

@item
マウスやタッチパッドを使用してEmacsディスプレーを水平方向にスクロールできるようになった。

@cindex line number display
@item
Emacsの表示において@code{display-line-numbers-mode}コマンドを通じた行番号表示のためのオプション機能が含まれるようになった。この機能は@code{linum}のようなパッケージが提案するものと等価な表示をより高速に行い、更に相対的行番号など多くのオプション機能も提供する。

@cindex horizontal scrolling of current line
@item
行の切り詰め時にウィンドウディスプレーの自動的な水平スクロールが、Emacsがカーソルを表示するカレント行でのみオプションで有効にできるようになった。このモードでは他のすべてのウィンドウ行にたいして、表示領域外にある文字を表示するためのスクロールは行われない。

@item
トルコ語とギリシャ語のスクリプトの特別ケースを大文字小文字変換が配慮するようになった。

@cindex Enchant support
@item
EnchantサポートがEmacsのスペルチェックコマンドの一部となった。

@item
TrampがGoogle Driveファイルシステムをサポートするようになった。

@item
ビルドされたマシンの詳細を省いてEmacsをビルドできるようになり、これにより再現可能なビルドの生成が容易になった。

@item
Enriched
Textモードに関するセキュリティの脆弱性が削除された。以前のEnrichedモードではテキストの一部として@code{display}プロパティの保存ができた。これらのプロパティは任意のLispコードの評価をサポートしており、外部ソースからEnrichedテキストを受け取るEmacsユーザーを脆弱性に晒していた。Enriched
Textモードがデコードした@code{display}プロパティ内の任意のLispフォームの実行はデフォルトで無効になった。

@cindex Unicode 11.0.0
@item
Emacs 26.2には最新のUnicode標準バージョン11.0.0.からインポートされたデータファイルが同梱される。
@end itemize

Emacs 26における変更の完全なリストは、Emacsの@file{NEWS}ファイル (@kbd{C-h n})を参照してください。

@node New in Emacs 25
@section Emacs 25は何が違う?
@cindex Differences between Emacs 24 and Emacs 25
@cindex Emacs 25, new features in

@itemize
@cindex xwidgets
@item
gtk3とwebkitgtk3がインストールされていればEmacsがバッファー内にネイティブウィジェットを埋め込めるようになった。たとえば埋め込みのwebkitブラウザウィンドウにアクセスするには@kbd{M-x
xwidget-webkit-browse-url}とタイプすればよい。

@cindex loadable modules
@item
共有ライブラリーとしてコンパイルされた外部モジュールをEmacsが動的にロード可能になった。

@cindex Unicode characters, typing easily
@item
いくつかの一般的な文字にたいして略記が@kbd{C-x 8}に新規で追加された。略記のリストは@kbd{C-x 8 C-h}とタイプする。

@cindex automatic display of Lisp APIs
@item
新しいマイナーモード@code{global-eldoc-mode}がデフォルトで有効になり、ポイント位置にあるEmacs
Lispフォームの引数をエコーエリアまたはモードラインに表示するようになった。

@cindex pasting text on text terminals
@cindex bracketed paste mode
@item
``bracketed paste
mode''をサポートするテキスト端末では、Emacsがそのモードをデフォルトで使用するようになった。このモードではEmacsはペーストされたテキストとユーザーがタイプしたテキストを区別できる。

@cindex Unicode 9.0.0
@item
Emacs 25には最新のUnicode標準バージョン9.0.0.からインポートされたデータファイルが同梱される。

@cindex bidirectional editing
@item
双方向編集のサポートは、最新のUnicode標準バージョン9.0.0.が要請するすべての機能を含むように更新された。

@cindex character folding in searches
@item
検索コマンドがマッチでの文字フォールディング(folding:
折り畳み)を行うようになった。これはcaseフォールディング(大文字小文字を無視)と似ているが、case(大文字小文字)の違いを無視するのではなく、ダイアクリティカルマークを無視して二重引用符の様々な変種をマッチする等、類似した文字間のより広範な区別を無視する。

@cindex eww
@item
EmacsウェブブラウザEWWが可変ピッチフォントをレンダリングするように拡張され、それ以外にも新たな機能が加わった。

@cindex rmail, and HTML mails
@item
libxml2とともにEmacsをビルドした場合、あるいはLynxブラウザがインストールされていれば、RmailがHTMLメールメッセージをレンダリングするようになった。

@cindex support for push commands in VC
@item
VCがBzr、Git、Hg用に実装された@code{push}コマンドを基本的にサポートするようになった。

@cindex hide-ifdef, C/C@t{++} expressions in macros
@item
Hide-IfDefモードがマクロ、マクロ引数展開、対話的マクロ評価、@code{#define}されたシンボルのスキャンにおいてすべてのC/C@t{++}式をサポートするようになった。

@cindex xref
@item
新パッケージXrefがEtagsのフロントエンドとUIを置き換えた。Xrefは関数、マクロ、データ構造等の定義の検索や移動、そして定義に移動する前の場所に戻るための汎用フレームワークおよび新たなコマンドを提供する。バックエンドの1つとしてTAGSテーブルを読み込むetags.elのコードは依然として使用しているものの、Etagsコマンドの多くは置き換えられるか廃止された。結果としてポピュラーなキーバインディング@kbd{M-.}および@kbd{M-,}はXrefコマンドを呼び出すように変更された。

@cindex project
@item
新パッケージProjectはプロジェクトを取り扱うたねの汎用インフラストラクチャを提供する。

@cindex horizontal scroll bars
@item
Emacsはツールキットのツールバーを提供するいくつかのプラットフォーム、すなわちGtk+、Lucid、Motif、Windowsにおいて水平スクロールバーを描画できるようになった。

@end itemize

Emacs 25における変更の完全なリストは、Emacsの@file{NEWS}ファイル (@kbd{C-h n})を参照してください。

@node New in Emacs 24
@section Emacs 24は何が違う?
@cindex Differences between Emacs 23 and Emacs 24
@cindex Emacs 24, new features in

@itemize
@cindex packages, installing more
@item
Emacsにパッケージマネージャーが含まれるようになった。これを開始するには@kbd{M-x
list-packages}とタイプする。これを使用すれば更に多くのLispパッケージをダウンロードして自動でインストールできる。

@cindex lexical binding
@item
Emacs Lispがファイル単位にもとづくレキシカルバインディングをサポートするようになった。@emph{レキシカルバインディング(lexical
binding)}では変数参照はバインディング構文内にテキスト的に配置されていなければならない。これはローカルなテキストスコープ外部で定義された変数をプログラムが参照可能な@emph{ダイナミックバインディング(dynamic
binding)}とは対照的である。Lispファイルはファイルコンテンツがレキシカルバインディング和使用していると解釈するよう示すために、ローカル変数セッティング@code{lexical-binding:
t}を使用できる。詳細についてはEmacs Lispリファレンスマニュアルを参照のこと。

@cindex bidirectional display
@cindex right-to-left languages
@item
英語のような自然言語のいくつかは左から右へと記述される。それ以外のアラビア語などは右から左に記述される。Emacsはこれらの形式が混交した、いわゆる``双方向テキスト(bidirectional
text)''をサポートするようになった。

@item
テキスト選択の処理が改善されて、外部クリップボードとより統合された。

@cindex themes
@item
新たなコマンド@kbd{customize-themes}によってEmacsの外観の変更が容易になった。

@item
GTK+ 3ツールキットとともにEmacsをコンパイルできるようになった。

@item
コンパイル時に新たに複数の外部ライブラリーを含めることをサポートする。

@itemize

@item
SELinux(``Security-Enhanced
Linux'')とは、従来の``Unixスタイル''より複雑なファイルアクセスコントロールを提供するLinuxカーネルの機能。

@item
ImageMagickディスプレーライブラリー。これによりEmacsでより多くのイメージ形式を表示でき、ローテーションのような変換も行うことができるようになる。

@item
安全なネットワーク通信のためのGnuTLSライブラリー。メールサーバーがサポートしていれば、EmacsはEメールにたいしてこれを透過的に使用する。

@item
XML構造解析のためのlibxml2ライブラリー。
@end itemize

@item
ウィンドウおよびバッファー表示の処理における柔軟性の向上。

@end itemize

いつも通り詳細については@file{NEWS}ファイルを参照してください。


@node New in Emacs 23
@section Emacs 23は何が違う?
@cindex Differences between Emacs 22 and Emacs 23
@cindex Emacs 23, new features in

@itemize

@cindex Anti-aliased fonts
@cindex Freetype fonts
@item
Emacsにfreetype、fontconfigを含む複数のフォントバックエンドを使用可能なフォントコードが新たに追加された。EmacsはアンチエイリアスにXftライブラリー、複雑なテキストレイアウトとテキストシェーピングにotfやm17nのライブラリーを使用できる。

@cindex Unicode
@cindex Character sets
@item
Emacs文字セットがUnicodeのスーパーセットになった。新たに複数の言語環境が追加された。

@cindex Multi-tty support
@cindex X and tty displays
@item
Emacsが同一セッションでXディスプレーとttyの両方を使用できるようになった(@samp{multi-tty})。

@cindex Daemon mode
@item
Emacsをバックグラウンドでデーモンとして開始できるようになった。

@cindex NeXTstep port
@cindex GNUstep port
@cindex macOS Cocoa
@item
新たにEmacsのNeXTstepポートが登場した。これはGNUstepおよび(Cocoaライブラリーを介して)Mac OS
Xをサポートする。Emacs 22においてMac OS XをサポートしていたEmacsのCarbonポートは削除された。

@cindex Directory-local variables
@item
ファイルローカル変数と同様の方法でディレクトリーローカル変数を定義できるようになった。

@item
Transient Markモードがデフォルトでオンになった。

@end itemize

@noindent
他にもシリアルポートアクセスのサポート、D-Busバインディング、行移動における新たなVisual
Lineモード、補完の改善、PDFやPostScript、DVIを閲覧するための新モード(@samp{DocView})、(XMLドキュメント編集用の)nXMLモード、新しいバージョンコントロールシステム用にVCを更新する等の変更が含まれます。


@node New in Emacs 22
@section Emacs 22は何が違う?
@cindex Differences between Emacs 21 and Emacs 22
@cindex Emacs 22, new features in

@itemize
@cindex GTK+ Toolkit
@cindex Drag-and-drop
@item
GTK+ウィジェットとともにEmacsをビルドできるようになり、X上でのドラッグアンドドロップ操作がサポートされた。

@cindex Supported systems
@item
Emacs 22ではS390およびx86-64マシン上のGNU/Linuxシステム、Mac OS
XおよびCygwinオペレーティングシステムにたいするサポートを提供する。

@item
ネイティブのMS-WindowsおよびMac OS Xのビルドにイメージ、ツールバー、ツールチップの完全サポートが含められた。

@item
Font Lockモード、Auto Compressionモード、File Name Shadowモードがデフォルトで有効になった。

@item
バッファーの最大サイズが増加した。32ビットマシンのEmacs 23.1では256MB、Emacs 23.2以降は512MB。

@item
@kbd{mouse-2}に加えて@kbd{mouse-1}でリンクをフォローできるようになった。

@cindex Mouse wheel
@item
マウスホイールのサポートがデフォルトでオンになった。

@item
ウィンドウフリンジがカスタマイズ可能になった。

@item
選択されたウィンドウのモードラインがハイライトされるようになった。

@item
ミニバッファーのプロンプトは独自のフェイスで表示される。

@item
abbrev定義を起動時に読み込む。

@item
GrepモードがCompilationモードから切り離されて、新たにgrep特有のオプションおよびコマンドをもつようになった。

@item
Emacsオリジナルのマクロシステムは、新たに多くのコマンドおよび機能、ファンクションキーF3とF4を使用するシンプルなインターフェイスを提供するKmacroパッケージに置き換えられた。マクロはマクロリングに格納されるとともに、対話的にデバッグと編集ができるようになった。

@item
GDBにたいする完全にグラフィカルなユーザーインターフェイスとしてGUD(Grand Unified
Debugger)が使用できるようになった。これは伝統的な開発環境で見い出すことができる多くの機能を提供するとともに、ブレークポイントの操作、ウォッチポイントの追加、コールスタック表示等を容易にする。ブレークポイントはソースバッファー内に視覚的に示される。

@item
@cindex New modes
Calc、TRAMP、URL、IDO、CUA、ERC、rcirc、Table、Image-Dired、SES、Ruler、Org、PGG、Flymake、Password、Printing、Reveal、wdired、t-mouse、longlines、savehist、Confモード、Pythonモード、DNSモードなど新たに多くのモードとパッケージがEmacsに含められた。

@cindex Multilingual Environment
@item
LeimはEmacsの一部となった。Unicodeサポートが更に改善されてbelarusian、bulgarian-bds、bulgarian-phonetic、chinese-sisheng、croatian、dutch、georgian、latin-alt-postfix、latin-postfix、latin-prefix、latvian-keyboard、lithuanian-numeric、lithuanian-keyboard、malayalam-inscript、rfc1345、russian-computer、sgml、slovenian、tamil-inscript、ucs、ukrainian-computer、vietnamese-telex、welshの入力メソッドが追加された。

Belarusian、Bulgarian、Chinese-EUC-TW、Croatian、French、Georgian、Italian、Latin-6、Latin-7、Latvian、Lithuanian、Malayalam、Russian、Slovenian、Swedish、Tajik、Tamil、UTF-8、Ukrainian、Welsh、Windows-1255の言語環境が追加された。

@cindex Documentation
@cindex Emacs Lisp Manual
@item
これらに加えてEmacs 22にはEmacs Lispリファレンスマニュアル(@ref{Emacs Lisp
documentation}を参照)およびEmacs Lisp Introが含められた。
@end itemize


@node New in Emacs 21
@section Emacs 21は何が違う?
@cindex Differences between Emacs 20 and Emacs 21
@cindex Emacs 21, new features in

@cindex Variable-size fonts
@cindex Toolbar support
Emacs
21ではディスプレーエンジンの徹底的な書き換えが行われました。新たなディスプレーエンジンは可変長フォント、イメージをサポートするとともに、サウンドをサポートするプラットフォームでのサウンド再生が可能になりました。結果としてウィンドウ化されたディスプレーで実行した際のEmacsの視覚的外観はより現代的なGUIプログラムを想起させるものとなり、3Dウィジェット(モードラインとスクロールバーで使用)、設定と拡張が可能なツールバー、ツールチップ(別名バルーンヘルプ)、その他が含められました。

@cindex Colors on text-only terminals
@cindex TTY colors
これらに加えてEmacs
21はテキストオンリーの端末でのフェイスがサポートされました。これはGNU/Linuxコンソールや@code{xterm}上でEmacsを@kbd{emacs
-nw}で実行した際にカラー表示されることを意味しています。


@node New in Emacs 20
@section Emacs 20は何が違う?
@cindex Differences between Emacs 19 and Emacs 20
@cindex Emacs 20, new features in

Emacsのバージョン18と19の差はよりダイナミックなものでした。一般的なユーザーのほとんどにとってもウィンドウシステムにおけるフレーム、フェイス、カラーの導入は明白な変更でした。

Emacsのバージョン19と20の間にも同様に差はあるものの多くは軽微であるか気付くのが難しいものでした。この変更の中には非ラテン文字を使用する言語用のMULEと同一ドキュメント内での複数言語の混合、Lispを使用せずに変数を変更する``Customize''機能、Macintosh、Microsoft、Unixプラットフォームにおけるファイルの自動変換が含まれます。

@c ------------------------------------------------------------
@node Common requests
@chapter よくある質問
@cindex Common requests

@menu
* Setting up a customization file::
* Using Customize::
* Colors on a TTY::
* Debugging a customization file::
* Displaying the current line or column::
* Displaying the current file name in the titlebar::
* Turning on abbrevs by default::
* Associating modes with files::
* Replacing highlighted text::
* Controlling case sensitivity::
* Working with unprintable characters::
* Searching for/replacing newlines::
* Yanking text in isearch::
* Wrapping words automatically::
* Turning on auto-fill by default::
* Changing load-path::
* Using an already running Emacs process::
* Compiler error messages::
* Indenting switch statements::
* Customizing C and C++ indentation::
* Overwrite mode::
* Turning off beeping::
* Turning the volume down::
* Automatic indentation::
* Matching parentheses::
* Hiding #ifdef lines::
* Repeating commands::
* Valid X resources::
* Evaluating Emacs Lisp code::
* Changing the length of a Tab::
* Inserting text at the beginning of each line::
* Forcing the cursor to remain in the same column::
* Forcing Emacs to iconify itself::
* Using regular expressions::
* Replacing text across multiple files::
* Documentation for etags::
* Disabling backups::
* Disabling auto-save-mode::
* Going to a line by number::
* Modifying pull-down menus::
* Deleting menus and menu options::
* Turning on syntax highlighting::
* Scrolling only one line::
* Editing MS-DOS files::
* Filling paragraphs with a single space::
* Escape sequences in shell output::
* Fullscreen mode on MS-Windows::  
@end menu

@node Setting up a customization file
@section @file{.emacs}ファイルを正しくセットアップするには?
@cindex @file{.emacs} file, setting up
@cindex @file{.emacs} file, locating
@cindex Init file, setting up
@cindex Customization file, setting up

@ref{Init File,,, emacs, The GNU Emacs Manual}を参照してください。

一般的にEmacsの新規ユーザーは@file{.emacs}ファイルを与えられるべきではありません。なぜならこれによる非標準的から混乱を招くからです。その後に彼らはなぜEmacsがドキュメント通りに振る舞わないか尋ねる質問を@url{https://lists.gnu.org/mailman/listinfo/help-gnu-emacs,
the help-gnu-emacs mailing list}に送信するのです。

EmacsにはCustomize機能が含まれています(@ref{Using Customize}を参照)。これによってEmacs
Lispに親しみのないユーザーはLispコードよりもメニューを使い、比較的判りやすい方法で@file{.emacs}ファイルを編集できます。

Customizeは確かにEmacsの設定を容易にするかもしれませんが、Emacs
Lispを習得して@file{.emacs}を直接編集するために少し時間を割くことを検討してみてください。頻繁に要求される基本的なタスクを処理することに興味があるユーザーには、シンプルな設定オプションが@ref{Init
File,,, emacs, The GNU Emacs Manual}により完全に記述されています。

ユーザーがどこで自分の@file{.emacs}ファイルを見つけられるか判らない場合があります。Emacsから@file{~/.emacs}としてファイルをvisitすることのよって、正しいファイルが見つかるでしょう。

@node Using Customize
@section Customizeを使い始めるには?
@cindex Customize groups
@cindex Customizing variables
@cindex Customizing faces

Customizeの主となるエントリーポイントは@kbd{M-x customize
@key{RET}}です。このコマンドにより利用可能なすべてのCustomizeグループを一覧するバッファーへと導かれます。そこからカスタマイズ可能なすべてのオプションおよびフェイスにアクセスして、それらの値の変更とinitファイルへの保存ができます。@ref{Easy
Customization,,, emacs, The GNU Emacs Manual}を参照してください。

(たとえば``shell''のように)あらかじめグループの名前が判っていれば@kbd{M-x customize-group
@key{RET}}を使用してください。

オプションを1つカスタマイズしたければ、@kbd{M-x customize-option
@key{RET}}を使用します。このコマンドは補完付きでカスタマイズするオプション名の入力を求めます。

@node Colors on a TTY
@section TTYで色や構文ハイライトするには?
@cindex Colors on a TTY
@cindex Syntax highlighting on a TTY
@cindex Console, colors

Emacs
21.1以降では非ウィンドウ化モード(UnixおよびGNU/Linuxテキストオンリー端末やコンソール、またはXやMS-Windowsで@samp{emacs
-nw}を呼び出した場合)でカラーとフェイスがサポートされています(MS-DOSポートではEmacs
19.29以降でカラーとフェイスがサポートされている)。Emacsは起動時に自動的にカラーサポートを検出して、利用できるようならカラーを使用します。あなたの端末がカラーをサポートしていると思えるのにEmacsがカラーを使用しない場合には、あなたのディスプレータイプにたいするカラー関連能力について@code{termcap}エントリーをチェックしてください。

コマンド@kbd{M-x
list-colors-display}はカレントディスプレーについてEmacsが関知する全カラーを展覧するウィンドウをポップアップします。

バージョン22.1以降ではシンタックスハイライトがデフォルトでオンです。

@cindex direct color in terminals
Emacs 26.1以降はターミナル(訳注:
端末=terminalはtermcapのterm)でのダイレクトカラーモードをサポートしています。EmacsがTerminfoで@samp{setb24}および@samp{setf24}のケイパビリティ(訳注:
capabilityはtermcapのcap)を見つけたら24ビットダイレクトカラーモードを使用します。ケイパビリティ文字列は、引数として1つの24ビットピクセル値を取り、24ビットカラーを端末に送信するために使用できる文字列にピクセルを変換することが期待されます。

標準のターミナル定義はこれらのケイパビリティをサポートせず、したがってカスタム定義が必要になります。

@example
$ cat terminfo-custom.src

xterm-emacs|xterm with 24-bit direct color mode for Emacs,
  use=xterm-256color,
  setb24=\E[48\:2\:\:%p1%@{65536@}%/%d\:%p1%@{256@}%/%@{255@}%&\
     %d\:%p1%@{255@}%&%dm,
  setf24=\E[38\:2\:\:%p1%@{65536@}%/%d\:%p1%@{256@}%/%@{255@}%&\
     %d\:%p1%@{255@}%&%dm,

$ tic -x -o ~/.terminfo terminfo-custom.src

$ TERM=xterm-emacs emacs -nw
@end example

@cindex 24-bit direct color mode
Emacs
27.1以降では24ビットダイレクトカラーモードの検出にたいしてTerminfoの@samp{RGB}ケイパビリティをサポートしています。複数の標準的なターミナル定義がこのケイパビリティをサポートしています。

@example
$ TERM=xterm-direct infocmp | grep seta[bf]

  setab=\E[%?%p1%@{8@}%<%t4%p1%d%e48\:2\:\:%p1%@{65536@}%/\
     %d\:%p1%@{256@}%/%@{255@}%&%d\:%p1%@{255@}%&%d%;m,
  setaf=\E[%?%p1%@{8@}%<%t3%p1%d%e38\:2\:\:%p1%@{65536@}%/\
     %d\:%p1%@{256@}%/%@{255@}%&%d\:%p1%@{255@}%&%d%;m,

$ TERM=xterm-direct emacs -nw
@end example

あなたのターミナルにXTermとの互換性がなければ、別の@env{TERM}定義を使う必要があるかもしれません。名前に@samp{direct}が含まれるすべてのターミナルが候補になり得ます。それらのうちどれがシステムにインストールされているか調べるために@command{toe}コマンドを使用できます:

@example
$ toe | grep '\-direct'

konsole-direct  konsole with direct-color indexing
vte-direct      vte with direct-color indexing
st-direct       st with direct-color indexing
xterm-direct2   xterm with direct-color indexing (old)
xterm-direct    xterm with direct-color indexing
@end example

@samp{RGB}ケイパビリティをもつターミナルは、ダイレクト。モードを認識しないアプリケーションにたいする後方互換性を保守するために、ピクセル#000001から#000007をインデックス付けされたカラーとして扱います。したがってもっとも暗い青い濃淡は利用できないかもしれません。これが問題となるようなら、@samp{setb24}と@samp{setf24}のカスタムターミナル定義を常に使用するこれができます。

@node Debugging a customization file
@section @file{.emacs}ファイルをデバッグするには?
@cindex Debugging @file{.emacs} file
@cindex @file{.emacs} debugging
@cindex Init file debugging
@cindex @samp{-debug-init} option

コマンドラインオプション@samp{-debug-init}でEmacsを開始してください。これは@file{.emacs}ファイルを評価する前にEmacs
Lispデバッガを有効して、何かうまく行かなければあなたをデバッガ内へと導きます。@file{trace-back}バッファーの上端行はエラーメッセージ、2行目か3行目には問題を引き起こした@file{.emacs}ファイルのLispコードが表示されるでしょう。

@file{.emacs}ファイル内の関数や引数の終端にカーソルを移動して@kbd{C-x C-e} (@kbd{M-x
eval-last-sexp})をタイプすれば、関数や関数の引数を個別に評価することもできます。

セットまたは使用を試みている変数の値をチェックするには@kbd{C-h v} (@kbd{M-x describe-variable})を使用できます。

@node Displaying the current line or column
@section How do I make Emacs display the current line (or column) number?
@cindex @code{line-number-mode}
@cindex Displaying the current line or column
@cindex Line number, displaying the current
@cindex Column, displaying the current
@cindex @code{mode-line-format}

デフォルトではEmacsはポイント位置のカレント行番号をモードラインに表示します。コマンド@kbd{M-x
line-number-mode}、または変数@code{line-number-mode}でこの機能のオンとオフを切り替えることができます。バッファーのバイトサイズが変数@code{line-number-display-limit}の値より大きければ、Emacsは行番号を表示しないことに注意してください。

@kbd{M-x column-number-mode}、または以下のフォームを

@lisp
(setq column-number-mode t)
@end lisp

@noindent
@file{.emacs}ファイルに記述することにより、同じようにカレント列番号を表示できます。この機能はデフォルトではオフです。

変数@code{mode-line-format}内のフォーマット指定子@code{"%c"}は、モードラインにカレント列の値っっ挿入します。この変数のセットや使用する方法についての詳細は@code{mode-line-format}のドキュメントを参照してください(@kbd{C-h
v mode-line-format @key{RET}}を使用する)。

@cindex Set number capability in @code{vi} emulators
@samp{display-line-numbers}パッケージ(Emacsのバージョン26.1で追加)は@samp{vi}の``set
number''機能のように、各行の前のテキストエリアに行番号を表示します。このオプション表示をアクティブにするにはバッファーローカル変数@code{display-line-numbers}をカスタマイズします。かわりにマイナーモード@code{display-line-numbers-mode}やグローバル版の@code{global-display-line-numbers-mode}を使うこともできます。これらのモード使用時には@code{display-line-numbers}を使用するときと同じ値で@code{display-line-numbers-type}をカスタマイズしてください。

@samp{linum}パッケージ(バージョン23.1以降のEmacsに同梱)もありますが今後配送されます。ユーザーおよび開発者にはかわりに@samp{display-line-numbers}の使用をお勧めします。(Emacsには同梱されていないパッケージ)@samp{setnu}と@samp{wb-line-number}もこの機能を実装しています。

@node Displaying the current file name in the titlebar
@section How can I modify the titlebar to contain the current file name?
@cindex Titlebar, displaying the current file name in
@cindex File name, displaying in the titlebar
@cindex @code{frame-title-format}

Emacsフレームのタイトルバーのコンテンツは、変数@code{mode-line-format}と同じ構造をもつ変数@code{frame-title-format}によって制御されます(これらの変数について情報を得るには@kbd{C-h
v}または@kbd{M-x describe-variable}を使用する)。

デフォルトではフレームのタイトルバーには、1つのフレームしか存在しない場合を除き、がカレントでvisitされているバッファーの名前が表示されます。フレームが1つの場合には、タイトルバーにはEmacsを呼び出したときの名前、およびEmacsを呼び出したマシン名が含まれます。これは@code{frame-title-format}に以下をデフォルト値としてセットすることにより行われます:

@lisp
(multiple-frames "%b" ("" invocation-name "@@" (system-name)))
@end lisp

存在するフレームの個数に関わらずフレームのタイトルバーにバッファー名が含まれるように挙動を変更するには、以下を@file{.emacs}に含めてください:

@lisp
(setq frame-title-format "%b")
@end lisp

@node Turning on abbrevs by default
@section How do I turn on abbrevs by default just in mode @var{mymode}?
@cindex Abbrevs, turning on by default

Abbrevモードは略語をタイプするとそれを展開します。特定のバッファーでこれをオンにするには@kbd{M-x
abbrev-mode}を使用します。デフォルトですべてのバッファーでオンにするには、以下を@file{.emacs}ファイルに記述してください:

@lisp
(setq-default abbrev-mode t)
@end lisp

@noindent To turn it on in a specific mode, use:

@lisp
(add-hook '@var{mymode}-mode-hook
          (lambda ()
           (setq abbrev-mode t)))
@end lisp

@noindent If your Emacs version is older then 22.1, you will also need to use:

@lisp
(condition-case ()
   (quietly-read-abbrev-file)
  (file-error nil))
@end lisp

@node Associating modes with files
@section How do I make Emacs use a certain major mode for certain files?
@cindex Associating modes with files
@cindex File extensions and modes
@cindex @code{auto-mode-alist}, modifying
@cindex Modes, associating with file extensions

名前が拡張子@file{.@var{bar}}で終わるファイルすべてにたいして特定のモード@var{foo}を使用したければ、以下でこれを行うことができるでしょう:

@lisp
(add-to-list 'auto-mode-alist '("\\.@var{bar}\\'" . @var{foo}-mode))
@end lisp

またはかわりにモード@var{foo}で編集したい任意のファイルの1行目のどこか(1行目の先頭が@samp{#!}なら2行目)に以下を記述します:

@example
-*- @var{foo} -*-
@end example

@cindex Major mode for shell scripts
変数@code{interpreter-mode-alist}はインタープリター(shellやpythonなど)に解釈されるスクリプトをロードする際にどのモードを使用するかを指定します。Emacsはスクリプトの1行目を調べて、使用されるインタープリターを判断します。詳細については@code{interpreter-mode-alist}上で@kbd{C-h
v} (または@kbd{M-x describe-variable})を使用して調べてください。

@node Replacing highlighted text
@section How can I replace highlighted text with what I type?
@cindex @code{delete-selection-mode}
@cindex Replacing highlighted text
@cindex Highlighting and replacing text

以下のLispフォームを@file{.emacs}ファイルに記述することにより自動的に開始できる@code{delete-selection-mode}を使用します。

@lisp
(delete-selection-mode 1)
@end lisp

@code{delete-selection-mode}のドキュメント文字列(@kbd{M-x describe-function @key{RET}
delete-selection-mode @key{RET}}を使用して読むことができる)によると:

@quotation
Delete
Selectionモードが有効な場合には選択がアクティブのときにテキストをタイプするとテキストで選択を置き換える。それ以外なら選択の有無に関わらずタイプしたテキストはポイント位置に挿入される。
@end quotation

このモードにより@key{DEL}を押下してハイライトされているリージョンを削除(killではない)することもできます。

@node Controlling case sensitivity
@section How do I control Emacs's case-sensitivity when searching/replacing?
@cindex @code{case-fold-search}
@cindex Case sensitivity of searches
@cindex Searching without case sensitivity
@cindex Ignoring case in searches

@c FIXME
変数@code{case-fold-search}の値は検索がcase(大文字小文字)を区別するかどうかを決定します:

@lisp
(setq case-fold-search nil) ; caseを区別
(setq case-fold-search t)   ; 検索はcaseを区別しない
@end lisp

@cindex Case sensitivity in replacements
@cindex Replacing, and case sensitivity
@cindex @code{case-replace}
同じように置換では変数@code{case-replace}が置換においてcaseを維持するかどうかを決定します。

isearchでは@kbd{M-c}で自由にcaseの区別を切り替えることもできます。

あるメジャーモードにたいしてのみcaseの区別を変更するにはメジャーモードのフックを使用します。たとえば:

@lisp
(add-hook '@var{foo}-mode-hook
          (lambda ()
           (setq case-fold-search nil)))
@end lisp

@node Working with unprintable characters
@section How do I search for, delete, or replace unprintable (eight-bit or control) characters?
@cindex Unprintable characters, working with
@cindex Working with unprintable characters
@cindex Control characters, working with
@cindex Eight-bit characters, working with
@cindex Searching for unprintable characters
@cindex Regexps and unprintable characters

たとえばバッファーには@samp{\237}のように出現する単一文字は@kbd{C-s C-q 2 3
7}とタイプして検索できます。プリントできない@strong{すべて}の文字を検索するには正規表現(@dfn{regexp})で行うのが最良です。プリント不可文字にたいするregexpは、プリント可能文字にたいする補集合を使用するのがもっとも簡単です。

@itemize @bullet

@item
プリント可能文字にたいするregexp: @samp{[\t\n\r\f -~]}

@item
プリント不可文字にたいするregexp: @samp{[^\t\n\r\f -~]}

@end itemize

@code{isearch-forward-regexp}や@code{re-search-forward}にたいする対話的な引数としてこれらのスペシャル文字をタイプするには@kbd{C-q}を使う必要があります(@samp{\t}、@samp{\n}、@samp{\r}、@samp{\f}はそれぞれ@key{TAB}、@key{LFD}、@key{RET}、@kbd{C-l}を意味する)。したがって@code{re-search-forward}を使用してプリント不可文字を検索するには:

@kbd{M-x re-search-forward @key{RET} [^ @key{TAB} C-q @key{LFD} C-q @key{RET} C-q
C-l @key{SPC} -~] @key{RET}}

@code{isearch-forward-regexp}を使用する場合は:

@kbd{C-M-s [^ @key{TAB} @key{LFD} C-q @key{RET} C-q C-l @key{SPC} -~]}

すべてのプリント不可文字を削除するには単にreplace-regexpを使用します:

@kbd{M-x replace-regexp @key{RET} [^ @key{TAB} C-q @key{LFD} C-q @key{RET} C-q
C-l @key{SPC} -~] @key{RET} @key{RET}}

置換は上で述べたのと似ています。すべてのプリント不可文字をコロンで置き換えるには以下を使用します:

M-x replace-regexp @key{RET} [^ @key{TAB} C-q @key{LFD} C-q @key{RET} C-q
C-l @key{SPC} -~] @key{RET} : @key{RET}

@node Searching for/replacing newlines
@section How do I input a newline character in isearch or query-replace?
@cindex Searching for newlines
@cindex Replacing newlines

@kbd{C-q C-j}を使用してください。詳細については@ref{Special Isearch,, Special Input for
Incremental Search, emacs, The GNU Emacs Manual}を参照してください。

@node Yanking text in isearch
@section How do I copy text from the kill ring into the search string?
@cindex Yanking text into the search string
@cindex isearch yanking

@kbd{M-y}を使用してください。@ref{Isearch Yank,,, emacs, The GNU Emacs
Manual}を参照してください。

@node Wrapping words automatically
@section How do I make Emacs wrap words for me?
@cindex Wrapping word automatically
@cindex Wrapping lines
@cindex Line wrap
@cindex @code{auto-fill-mode}, introduction to
@cindex Maximum line width, default value
@cindex @code{fill-column}, default value

@kbd{M-x
auto-fill-mode}とタイプして@code{auto-fill-mode}を有効にして使用してください。デフォルトの最大行幅は70で、これは変数@code{fill-column}により決定されます。これを自動でオンに切り替える方法については@ref{Turning
on auto-fill by default}を参照してください。

@node Turning on auto-fill by default
@section How do I turn on @code{auto-fill-mode} by default?
@cindex @code{auto-fill-mode}, activating automatically
@cindex Filling automatically
@cindex Automatic entry to @code{auto-fill-mode}

1つのバッファーだけで@code{auto-fill-mode}をオンに切り替えるには@kbd{M-x auto-fill-mode}を使用します。

特定のモードのすべてのバッファーでオンに切り替えるには、そのモードにたいするフックを使用しなければなりません。たとえばテキストバッファーのすべてで@code{auto-fill}モードをオンに切り替えるには、以下を@file{.emacs}ファイルサイ追加してください:

@lisp
(add-hook 'text-mode-hook 'turn-on-auto-fill)
@end lisp

すべてのメジャーモードで@code{auto-fill}モードをオンにするには以下を行います:

@lisp
(setq-default auto-fill-function 'do-auto-fill)
@end lisp

@node Changing load-path
@section How do I change @code{load-path}?
@cindex @code{load-path}, modifying
@cindex Modifying @code{load-path}
@cindex Adding to @code{load-path}

一般的には@code{load-path}へは追加のみにするべきです。以下のようにしてディレクトリー@var{/dir/subdir}をロードパスに追加できます:

@lisp
(add-to-list 'load-path "/dir/subdir/")
@end lisp

ホームディレクトリーにたいして相対的にこれを行うには:

@lisp
(add-to-list 'load-path "~/mysubdir/")
@end lisp

@node Using an already running Emacs process
@section How do I use an already running Emacs from another window?
@cindex @code{emacsclient}
@cindex Emacs server functions
@cindex Using an existing Emacs process

Emacsに同梱されている@code{emacsclient}は新たなEmacsを開始せずに、すでに実行中のEmacsを使用してファイルを編集するためのものです。これはすでに実行中のEmacsにリクエストを送信することによって行われます。実行中のEmacsはリクエストに応えなければなりません。

@itemize @bullet

@item
セットアップ:

@samp{emacsclient}が機能するにはEmacsが@code{server-start}関数を実行済みでなければならない。これはコマンドラインオプション:

@example
emacs -f server-start
@end example

または@file{.emacs}から@code{server-start}を呼び出すことによって行うことができる:

@lisp
(if (@var{some conditions are met}) (server-start))
@end lisp

ニュースリーダーやメールリーダーなどが@samp{emacsclient}を呼び出すようにするには、環境変数@code{EDITOR}
(@code{VISUAL}のときもある)に値@samp{emacsclient}を設定してみればよい。@samp{emacsclient}プログラムのかわりにプログラムのフルパス名を指定する必要があるかもしれない。たとえば:

@example
# cshの場合:
setenv EDITOR emacsclient

# フルパス名を使用
setenv EDITOR /usr/local/emacs/etc/emacsclient

# shの場合:
EDITOR=emacsclient ; export EDITOR
@end example

@item
通常の使い方:

@samp{emacsclient}を実行するとソケットに接続してコマンドラインオプションをEmacsに渡す。そしてEmacsは次の機会に指定されたファイルをvisitする(Emacsで行うように行番号を指定できる)。ユーザーは手動でEmacsに切り替える必要がある。ユーザーがファイルの編集を終えたら@kbd{C-x
#} (または@kbd{M-x
server-edit})とタイプしてそれを示すことができる。@code{emacsclient}に要求されたバッファーが別にある場合にはEmacsはそのバッファーに切り替えるだろう。それ以外の場合には@code{emacsclient}はexitして呼び出し元が継続できるようにシグナルを送る。

@end itemize

詳細については@ref{Emacs Server,,, emacs, The GNU Emacs Manual}を参照してください。

@node Compiler error messages
@section How do I make Emacs recognize my compiler's funny error messages?
@cindex Compiler error messages, recognizing
@cindex Recognizing non-standard compiler errors
@cindex Regexps for recognizing compiler errors
@cindex Errors, recognizing compiler

@code{compilation-error-regexp-alist}変数をカスタマイズしてください。

@node Indenting switch statements
@section How do I change the indentation for @code{switch}?
@cindex @code{switch}, indenting
@cindex Indenting of @code{switch}

以下のように@code{switch}ステートメントをインデントしたいと思う人は大勢います:

@example
f()
@{
  switch(x) @{
    case A:
      x1;
      break;
    case B:
      x2;
      break;
    default:
      x3;
  @}
@}
@end example

@noindent To achieve this, add the following line to your @file{.emacs}:

@lisp
(c-set-offset 'case-label '+)
@end lisp

@node Customizing C and C++ indentation
@section How to customize indentation in C, C@t{++}, and Java buffers?
@cindex Indentation, how to customize
@cindex Customize indentation

Emacsの@code{cc-mode}はインデントスタイルのカスタマイズ用に対話的な手順を提供しています。これはEmacsディストリビューションに同梱されている@cite{CC
Mode}マニュアルに完全な説明があります。@ref{Customizing Indentation, , Customization
Indentation, ccmode, The CC Mode Manual}を参照してください。以下はそれの短い要約です:

@enumerate
@item
気に召さないインデントの最初の行の先頭に移動して@kbd{C-c C-o}とタイプする。Emacsが構文シンボル(syntactic
symbol)の入力を求めるので、デフォルトを受諾するために@key{RET}をタイプする。

@item
Emacsがその構文シンボルのオフセットの入力を求める。その際にはカッコ内にデフォルト(現在の定義)が表示される。ここで以下のいずれかを選択できる:

@table @code
@item 0
追加のインデントなし。
@item +
基本オフセット1つ分インデントを加える。
@item -
基本オフセット1つ分インデントを戻す。
@item ++
基本オフセット2つ分インデントを加える。
@item --
基本オフセット2つ分インデントを戻す。
@item *
基本オフセットの半分インデントを加える。
@item /
基本オフセットの半分インデントを戻す。
@end table

@item
これらのシンボルのいずれかを選んだ後に@kbd{C-c C-q}をタイプして、指定したインデントに行またはブロックを再インデントする。

@item
結果が気に召さなければステップ1に戻る。そうでなければ以下の行を@file{.emacs}に追加する:

@lisp
(c-set-offset '@var{syntactic-symbol} @var{offset})
@end lisp

@noindent
ここで@var{syntactic-symbol}は行頭で@kbd{C-c
C-o}をタイプした際にEmacsが表示した名前、@var{offset}は上記のインデントシンボル(@code{+}、@code{/}、@code{0}等)のいずれかのうち対話的手順の間に選択したシンボル。

@item
インデントが気に召さない次の行へ移動してこれらの手順を繰り返す。
@end enumerate

以下のように@code{(c-set-offset ...)}によるカスタマイズ結果すべてをCモードのフック内に記述することをお勧めします:

@lisp
(defun my-c-mode-hook ()
  (c-set-offset ...)
  (c-set-offset ...))
(add-hook 'c-mode-hook 'my-c-mode-hook)
@end lisp

@noindent
@code{cc-mode}をロードしていなければ@code{c-set-offset}は利用できないので@file{.emacs}には@w{@code{(require
'cc-mode)}}を記述する必要がありますが、@code{c-mode-hook}を使用すればこれを避けることができます。

@code{c-mode-hook}はCソースファイルの場合のみ実行されることに注意してください。C@t{++}には@code{c++-mode-hook}、Javaソースには@code{java-mode-hook}を使う等してください。同一のカスタマイズが、@code{cc-mode}によってサポートされる@emph{すべて}の言語にたいして効力をもつようにしたければ@code{c-mode-common-hook}を使用してください。

@node Overwrite mode
@section How do I make Emacs ``typeover'' or ``overwrite'' instead of inserting?
@cindex @key{Insert}
@cindex @code{overwrite-mode}
@cindex Overwriting existing text
@cindex Toggling @code{overwrite-mode}

@kbd{M-x overwrite-mode}
(マイナーモード)です。これは@code{overwrite-mode}のオンオフを切り替えるのでもう一度@kbd{M-x
overwrite-mode}で簡単に@code{overwrite-mode}からexitできます。

いくつかのシステムでは@key{Insert}で@code{overwrite-mode}のオンオフが切り替わります。

@node Turning off beeping
@section How do I stop Emacs from beeping on a terminal?
@cindex Beeping, turning off
@cindex Visible bell
@cindex Bell, visible

@c martin@@cc.gatech.edu
Martin R. Frank(訳注: Texinfoファイルには"martin@@cc.gatech.edu"とコメントされてました)は記しています:

可聴ベル(audible bell)のかわりに@dfn{視覚的なベル(visible
bell)}を使うように伝えて、その視覚的ベルには何もセットしません。

つまり(あなたがtermcapをもっていると仮定して)@code{TERMCAP}環境変数に以下を記述します:

@example
... :vb=: ...
@end example

そして以下のLispフォームを評価してください:

@example
(setq visible-bell t)
@end example

@node Turning the volume down
@section How do I turn down the bell volume in Emacs running under X?
@cindex Bell, volume of
@cindex Volume of bell

Xウィンドウシステムではシェルコマンド@code{xset}のより、すべてのプログラムでベルの音量および間隔を調節できます。

引数なしで@code{xset}を呼び出すことによって、以下を含むいくつかの基本的な情報が生成されます:

@example
usage:  xset [-display host:dpy] option ...
  To turn bell off:
      -b                b off               b 0
  To set bell volume, pitch and duration:
       b [vol [pitch [dur]]]          b on
@end example

@node Automatic indentation
@section How do I tell Emacs to automatically indent a new line to the indentation of the previous line?
@cindex Indenting new lines
@cindex New lines, indenting of
@cindex Previous line, indenting according to
@cindex Text indentation

このような振る舞いはEmacs 20以降では(Textモードでは)自動で行われます。Emacs
20.2の@file{etc/NEWS}ファイルからの引用します:

@example
** Textでパラグラフを分割するのは空行のみとなった。これによってAdaptive FillモードからTextモードやその他Textモードから派生した(Mailモードのような)モードが受ける恩恵を最大にすることが可能になる。Textモードでの@key{TAB}によって@code{indent-relative}コマンドが実行されるようになった。これによって実際に違いが生じるのは、インデントされたパラグラフを使用している場合だけである。

パラグラフ開始行の先頭にスペースが欲しければ、新しいモードのParagraph Indent Textモードを使用すること。
@end example

@cindex Prefixing lines
@cindex Fill prefix
@code{auto-fill-mode} (@ref{Turning on auto-fill by
default}を参照)をオンに切り替えている場合には、@dfn{フィルプレフィクス(fill
prefix)}として特定の文字シーケンスをすべての行のプレフィクスとするようEmacsに指示することができます。行頭でプレフィクスをタイプしてポイントをタイプしたプレフィクスの後に移動、それから@kbd{C-x
.}
(@code{set-fill-prefix})とタイプしてフィルプレフィクスをセットします。それ以降はオートフィル新たな行の先頭に自動的にフィルプレフィクスを配置するとともに、@kbd{M-q}
(@code{fill-paragraph})でパラグラフを再フィルする際にはすべてのフィルプレフィクスを保守するようになります。

異なるレベルのインデントをもつパラグラフがある場合には、新たなパラグラフに移動するたびにフィルプレフィクスを正しい値にセットすることが必要になるでしょう。これを取り扱うためのパッケージが多数存在します(@ref{Packages
that do not come with Emacs}を参照)。手引きとして``fill''、および``indent''のキーワードを調べてください。

@node Matching parentheses
@section How do I show which parenthesis matches the one I'm looking at?
@cindex Parentheses, matching
@cindex @file{paren.el}
@cindex Highlighting matching parentheses
@cindex Pairs of parentheses, highlighting
@cindex Matching parentheses

@file{.emacs}ファイルで@code{show-paren-mode}を呼び出します。

@lisp
(show-paren-mode 1)
@end lisp

任意のEmacsフレーム上端にあるEmacsメニューバーの@samp{Options}メニューからオプション@samp{Paren Match
Highlighting}を選択してこのモードを有効にすることもできます。

このようなモードの代替案手段としては以下が含まれます:

@itemize @bullet

@item
右カッコ(または大カッコや角カッコ)に着目していたら、それを削除してからしで挿入する。Emacsは瞬時の間、マッチするカッコにカーソル和移動するだろう。

@item
@kbd{C-M-f} (@code{forward-sexp})および@kbd{C-M-b}
(@code{backward-sexp})はバランスのとれたカッコを1セット分スキップするので、どのカッコがマッチするか確認できる(構文テーブルを修整してバランスのとれた大カッコおよび角カッコもスキップするよう洗練することも可能)。

@cindex Show matching paren as in @code{vi}
@item
以下は@code{vi}のように@kbd{%}キーでマッチするカッコを表示させるEmacs
Lispコード。更にカーソルがカッコ上になければ通常通り単に%を挿入する。

@lisp
;; 名無しの貢献者より

(global-set-key "%" 'match-paren)

(defun match-paren (arg)
  "カッコ上ならマッチするカッコへ移動、それ以外は%を挿入"
  (interactive "p")
  (cond ((looking-at "\\s(") (forward-list 1) (backward-char 1))
        ((looking-at "\\s)") (forward-char 1) (backward-list 1))
        (t (self-insert-command (or arg 1)))))
@end lisp

@end itemize

@node Hiding #ifdef lines
@section In C mode, can I show just the lines that will be left after @code{#ifdef} commands are handled by the compiler?
@cindex @code{#ifdef}, selective display of
@cindex @code{hide-ifdef-mode}
@cindex Hiding @code{#ifdef} text
@cindex Selectively displaying @code{#ifdef} code

@kbd{M-x hide-ifdef-mode}
(マイナーモード)です。Emacsに同梱されている@file{cpp.el}も調査したいと思うかもしれません。

@node Repeating commands
@section How do I repeat a command as many times as possible?
@cindex Repeating commands many times
@cindex Commands, repeating many times
@cindex @code{.}, equivalent to @code{vi} command

最後のコマンドを繰り返すには@code{repeat}コマンド(@kbd{C-x
z})を使用します。プレフィクス引数を前置すると、そのプレフィクスは繰り返すコマンドに適用されます。

引き起こしを取得するためにミニバッファーを使用するコマンドは、@kbd{C-x @key{ESC} @key{ESC}}
(@code{repeat-complex-command})とタイプしても再呼び出しができます。@code{repeat-complex-command}では@kbd{M-p}と@kbd{M-n}(キーボードにあれば上矢印と下矢印も)をタイプすることにより、様々なcomplexコマンドすべてでタイプしたものを走査することができます。

一連のコマンドを繰り返すにはキーボードマクロを使用します。コマンドを呼び出すキーボードマクロの作成には@kbd{C-x (}と@kbd{C-x
)}を使い、その後に@kbd{C-x e}とタイプします。@ref{Keyboard Macros,,, emacs, The GNU Emacs
Manual}を参照してください。

最後の挿入/削除を再実行する@code{vi}の@code{.}コマンドが本当に欲しくて堪らなければ、それをサポートしているよう思われる、VIPERというEmacsに同梱の@code{vi}エミュレーションモードを使ってください。

@node Valid X resources
@section What are the valid X resource settings (i.e., stuff in .Xdefaults)?
@cindex Resources, X
@cindex X resources
@cindex Setting X resources

@ref{X Resources,,, emacs, The GNU Emacs Manual}を参照してください。

EmacsがXツールキットとともにコンパイルされていると仮定して、メニューバーのリソース名を確認するためにeditres(X11R5以降)のようなリソースエディターを使用することもできます。

@node Evaluating Emacs Lisp code
@section How do I execute (``evaluate'') a piece of Emacs Lisp code?
@cindex Evaluating Lisp code
@cindex Lisp forms, evaluating

Emacs Lispの@dfn{フォーム(form)}を実行(Lispスラングでは@dfn{evaluate: 評価})するには:

@itemize @bullet

@item
Emacsを実行する際に毎回評価させたければ、ホームディレクトリーにある@file{.emacs}という名前のファイルにそれを記述する。これは``あなたの@file{.emacs}ファイル''と呼ばれるものであり、あなたの個人的なカスタマイズがすべて含まれている。

@item
@file{*scratch*}バッファーでフォームをタイプしてから、それの後で@key{LFD}
(または@kbd{C-j})をタイプできる。フォームの評価結果はそのままバッファーに挿入される。

@item
@code{emacs-lisp-mode}では@kbd{C-M-x}とタイプすることでポイントの前、または周辺にあるトップレベルのフォームを評価する。

@item
任意のバッファーにおいて@kbd{C-x C-e}とタイプするとポイント直前にあるLispフォームを評価して、その値をエコーエリアにプリントする。

@item
@kbd{M-:}または@kbd{M-x
eval-expression}とタイプすることによりミニバッファーでLispフォームをタイプして、@key{RET}の押下することでそれが1回評価される。

@item
ファイル内のすべてのLispフォームをEmacsにすべて評価させるには@kbd{M-x
load-file}を使用できる(これをLispから行うにはかわりに関数@code{load}を使う)。

関数@code{load-library}、@code{eval-region}、@code{eval-buffer}、@code{require}、@code{autoload}も有用。これらについての詳細は@ref{Emacs
Lisp documentation}を参照のこと。

@end itemize

@node Changing the length of a Tab
@section How do I change Emacs's idea of the @key{TAB} character's length?
@cindex Tab length
@cindex Length of tab character

変数@code{tab-width}のデフォルト値をセットします。たとえば10文字ごとに@key{TAB}ストップをセットするには、@file{.emacs}ファイルに以下を挿入してください:

@lisp
(setq-default tab-width 10)
@end lisp

変数@code{tab-width}と変数@code{tab-stop-list}を混同しないでください。前者はリテラルの@key{TAB}文字の表示に使用されます。一方後者は特定のモードにおいて@key{TAB}文字を押下した際にどの文字が挿入されるかを制御します。

@node Inserting text at the beginning of each line
@section How do I insert <some text> at the beginning of every line?
@cindex Prefixing a region with some text
@cindex Prefix character, inserting in mail/news replies
@cindex Replies to mail/news, inserting a prefix character
@cindex @code{mail-yank-prefix}
@cindex Mail replies, inserting a prefix character
@cindex News replies, inserting a prefix character

これをバッファー全体にたいして行う場合には@kbd{M-< M-x replace-regexp @key{RET} ^ @key{RET} your
text @key{RET}}とタイプします。

リージョンにたいして行う場合には@code{string-insert-rectangle}を使用します。プレフィクスを付加したい1行目の先頭にマークをセット(@kbd{C-@key{SPC}})して、付加したい最後の行へカーソルを移動、それから@kbd{M-x
string-insert-rectangle @key{RET}}とタイプしてください。バッファー全体に行う場合には@kbd{C-x h M-x
string-insert-rectangle @key{RET}}とタイプします。

yankしたメールメッセージにプレフィクスとして@samp{>}の付加を試みているなら、変数@code{mail-yank-prefix}をセットしたいと思うかもしれません。Messageバッファーではyankしたメッセージのメッセージの引用に@kbd{M-;}
(こはリージョンのコメントアウトという汎用目的のためのメカニズムである関数@code{comment-region}を実行する)を使うことさえできます(@ref{Changing
the included text prefix}を参照)。

@node Forcing the cursor to remain in the same column
@section How do I make Emacs behave like this: when I go up or down, the cursor should stay in the same column even if the line is too short?
@cindex @code{picture-mode}
@cindex Remaining in the same column, regardless of contents
@cindex Vertical movement in empty documents

@kbd{M-x picture-mode}を使用します。

変数@code{track-eol}、および@kbd{C-x C-n}にバインドされているコマンド@code{set-goal-column}
(@ref{Moving Point, , , emacs, The GNU Emacs Manual}を参照)も確認してください。

@node Forcing Emacs to iconify itself
@section How do I tell Emacs to iconify itself?
@cindex Iconification under the X Window System
@cindex X Window System and iconification
@cindex Suspending Emacs

@kbd{C-z}はEmacsをXで実行中ならアイコン化、それ以外ならEmacsをサスペンドします。@ref{Frame Commands,,,
emacs, The GNU Emacs Manual}を参照してください。

@node Using regular expressions
@section How do I use regexps (regular expressions) in Emacs?
@cindex Regexps
@cindex Regular expressions
@cindex Differences between Unix and Emacs regexps
@cindex Unix regexps, differences from Emacs
@cindex Text strings, putting regexps in

@ref{Regexp Backslash,,, emacs, The GNU Emacs Manual}を参照してください。

演算子@code{or}は@samp{|}ではなく@samp{\|}、グルーピング演算子は@samp{\(}と@samp{\)}です。更にバックスラッシュの文字列構文は@samp{\\}です。Lisp文字列で@samp{xxx\(foo\|bar\)}のような正規表現を指定するには@samp{xxx\\(foo\\|bar\\)}を使用します。

バックスラッシュを2回記述することに注意してください!

@itemize @bullet

@item
Unixの@file{grep}、@file{sed}などとは異なり文字の補集合(@samp{[^...]})にはマッチしない文字として改行文字(@key{LFD}または@kbd{C-j}あるいは@samp{\n})が記述されていなければ改行文字はマッチする。

@item
文字構文のregexp(たとえば@samp{\sw})は文字セットにたいするregexp(たとえば@samp{[aeiou]})の内部では意味をもたない(これは実際にはregexp構文として典型的)。

@end itemize

@node Replacing text across multiple files
@section How do I perform a replace operation across more than one file?
@cindex Replacing strings across files
@cindex Multiple files, replacing across
@cindex Files, replacing strings across multiple
@cindex Recursive search/replace operations

Diredモード(@kbd{M-x dired @key{RET}}または@kbd{C-x
d})はコマンド@code{dired-do-find-regexp-and-replace}
(@kbd{Q})をサポートしています。これは複数ファイルにおける正規表現の置換を可能にします。

以下のステップにしたがうことにより、このコマンドで複数ファイルにたいする検索/置換処理を行うことができます:

@itemize @bullet
@item
@code{find-dired}、@code{find-name-dired}、@code{find-grep-dired}のいずれかを使って、処理したいファイルのリストを用意する。

@item
結果として得られたDiredバッファーで@kbd{t}を使用してすべてのファイルをマークする。

@item
@kbd{Q}を使用して、マーク済みファイルにたいする@code{query-replace-regexp}セッションを開始する。

@item
それぞれのファイルにたいしてすべての置換を承諾するために@kbd{!}を打鍵する。
@end itemize

Emacsの``tags''機能を使用して、別の方法で同じこと行うことができます。tags機能に含まれているコマンド@code{tags-query-replace}は@file{TAGS}ファイルに記述されたすべてのファイルを横断してquery-replace(問い合わせ付き置換)を行います。@ref{Identifier
Search,,, emacs, The GNU Emacs Manual}を参照してください。

@node Documentation for etags
@section Where is the documentation for @code{etags}?
@cindex Documentation for @code{etags}
@cindex @code{etags}, documentation for

@code{etags}のmanページは@code{emacs}のmanページと同じ場所にあるはずです。

たとえば@samp{etags -H}のように、コマンドラインスイッチで手早く読める説明もあります。

@node Disabling backups
@section How do I disable backup files?
@cindex Backups, disabling
@cindex Disabling backups

特に何か不幸な出来事が起こったとき等、バックアップ特は役に立つので多分これを行いたいとは思わないでしょう。

Diredでバックアップファイル(およびその他の``興味がない''ファイル)を目にすることを避けるには、@file{.emacs}ファイルに以下を追加して@code{dired-x}をロードしてください:

@lisp
(add-hook 'dired-load-hook
          (lambda ()
           (require 'dired-x)))
@end lisp

@code{dired-x}のロードにより、@kbd{M-o}でそれぞれのdiredバッファーでの(興味がないファイルの表示)の省略が切り替わります。以下を@file{.emacs}に記述すれば、新たなdiredバッファーで省略をデフォルトにできます:

@lisp
; 訳注
; FAQ執筆時以降実装が更新されているので以下のように読み変えてください。
; (現時点最新開発版28.0.??にバグレポート投げときます)
;   dired-omit-toggle -> dired-omit-mode
;   M-o               -> C-x M-o
(add-hook 'dired-mode-hook 'dired-omit-toggle)
@end lisp

Unixシェルで@samp{ls}するたびにバックアップファイルが目につきうんざりしていたら、@samp{-B}オプションでGNU
@code{ls}を試してみてください。GNU @code{ls}はGNU
Fileutilsパッケージの一部であり、@url{https://ftp.gnu.org}およびそのミラーサイトで利用可能です(@ref{Current
GNU distributions}を参照)。

バックアップ作成を無効にしたり作成方法を変更する場合には、@ref{Backup Names,,, emacs, The GNU Emacs
Manual}を参照してください。

@cindex Backup files in a single directory
Emacs
21.1から変数@code{backup-directory-alist}をカスタマイズして、Emacsがバックアップファイルを置く場所を制御できるようになりました。この変数の値は特定のパターンの名前をもつファイルにたいして、バックアップファイルを特定のディレクトリーに置くように指定します。@strong{すべて}のバックアップファイルをディレクトリー@file{dir}に置くことをEmacsに強制する要素@code{("."
. @var{dir})}を追加する等が典型的な使い方です。

@node Disabling auto-save-mode
@section How do I disable @code{auto-save-mode}?
@cindex Disabling @code{auto-save-mode}
@cindex Auto-saving
@cindex Saving at frequent intervals

特にドキュメント編集中にEmacsやコンピューターがクラッシュしたとき等、オートセーブは役に立つので多分これを行いたいとは思わないでしょう。

そのかわりにEmacsがオートセーブを行う前に待機するキーストローク数を指定する変数@code{auto-save-interval}を変更したいと思うかもしれません。この値を増加させることによって、その長さの間はEmacsにオートセーブの待機を強制します。これによって煩わしさが減るかもしれません。

Sebastian Kremerの@code{auto-save}パッケージも調べたいと思うかもしれません(@ref{Packages that do
not come with
Emacs}を参照)。このパッケージではすべてのauto-saveファイルを@file{/tmp}のような1つのディレクトリーに置くこともできます。

@code{auto-save-mode}を無効にしたり動作を変更するには、@ref{Auto Save,,, emacs, The GNU Emacs
Manual}を参照してください。

@node Going to a line by number
@section How can I go to a certain line given its number?
@cindex Going to a line by number
@cindex Compilation error messages
@cindex Recompilation

行番号で行に移動する必要があるのは確かですか?
もしかしたらコンパイラーがエラーメッセージをプリントしたソースファイル行を表示するのがあなたの望んでいることではありませんか?
もしそうならEmacsからコマンド@kbd{M-x compile}および@kbd{M-x
recompile}を使用してコンパイルすることで、より効率的にこれを行うことができます。Emacsはコンパイルエラーメッセージを自動的にインターセプトして、@file{*compilation*}と呼ばれる特別なバッファーに挿入ます。あなたはソース内の、各メッセージに対応する場所をvisitできます。問題のある行を1つずつステップスルーするには@kbd{C-x
`}とタイプします(Emacs 22からは前または次のマッチへ直接移動する@kbd{M-g M-p}および@kbd{M-g
M-n}でも使用できる。@file{*compilation*}バッファーのメッセージテキスト上で@kbd{mouse-2}をクリックするか@key{RET}を押下することによって、そのメッセージ中に記されている番号の行へ移動します。

しかし特定のテキスト行へ移動する必要が本当にあるなら@kbd{M-g M-g} (Emacs
22からは@code{goto-line}関数のデフォルトバインディング)をタイプしてください。Emacsは行番号の入力を求めてその行に移動するでしょう。

行番号を数引数として@code{goto-line}を呼び出せば、これをより高速に行うことができます。たとえば@kbd{C-u 286 M-g
M-g}はカレントバッファーの行番号286へジャンプします。

@node Modifying pull-down menus
@section How can I create or modify new pull-down menu options?
@cindex Pull-down menus, creating or modifying
@cindex Menus, creating or modifying
@cindex Creating new menu options
@cindex Modifying pull-down menus
@cindex Menus and keymaps
@cindex Keymaps and menus

メニュータイトル(@samp{File}、@samp{Edit}、@samp{Buffers}など)はそれぞれローカルキーマップおよびグローバルキーマップを表しています。メニュータイトルをマウスで選択することによって、メニューのフォーム内にそのキーマップの非@code{nil}のコンテンツが表示されます。

したがって既存メニューにメニューオプションを追加するために行う必要があるのは、適切なキーマップへの新たな定義の追加だけです。つまり@samp{Edit}メニューに@samp{Forward
Word}アイテムを追加するためには、以下のLispコードが必要です:

@lisp
(define-key global-map
  [menu-bar edit forward]
  '("Forward word" . forward-word))
@end lisp

@noindent
1行目ではグローバルメニューバーエントリーを含むグローバルキーマップにエントリーを追加しています。@code{global-map}への参照をローカルキーマップに置き換えることにより、特定のモードだけにメニューオプションが追加されます。

2行目ではメニューバーから新エントリーへのパスを記述しています。これはこのメニューエントリーを@samp{File}メニューの下に配置するには、2行目の@code{edit}という単語を@code{file}に変更すればよいことを意味します。

3行目は1つ目の要素が表示されるタイトル、2つ目の要素がメニューオプション呼び出し時に呼び出される関数であるようなコンスセルです。

既存メニューへの新オプション追加デ新たなメニューを追加するためには新たにキーマップ全体を定義しなければなりません。

@lisp
(define-key global-map [menu-bar words]
  (cons "Words" (make-sparse-keymap "Words")))
@end lisp

上記のコードは新たに疎キーマップ(sparse
keymap)を追加して名前@samp{Words}を付与、それをグローバルメニューバーにアタッチします。したがってこの新メニューへの、@samp{Forward
Word}アイテム追加には以下のようなコードが必要になるでしょう:

@lisp
(define-key global-map
  [menu-bar words forward]
  '("Forward word" . forward-word))
@end lisp

@noindent
キーマップが機能する方法により、メニューオプションはより新しく定義されたアイテムがトップになるように表示されることに注意してください。したがってメニューオプション@samp{foo}、@samp{bar}、@samp{baz}を(この順番で)定義するとメニューオプションは@samp{baz}がトップ、@samp{foo}がボトムに表示されます。

これを回避する1つの方法として関数@code{define-key-after}の使用があります。これは@code{define-key}と同様ですが、アイテムが出現しる位置を変更することができます。以下は@samp{Edit}メニューの@samp{Undo}アイテムの直後になるように@samp{Forward
Word}アイテムを挿入します。

@lisp
(define-key-after
  (lookup-key global-map [menu-bar edit])
  [forward]
  '("Forward word" . forward-word)
  'undo)
@end lisp

@code{define-key-after}にたいする2つ目と3つ目の引数が@code{define-key}の場合とは異なること、そして追加した新しい(3つ目の)引数がこの関数によってどのように定義されるかに注意してください。

ある場所から別の場所にメニューオプションを移動するには、最後の引数を適切に指定して@code{define-key-after}を評価するだけです。

より詳細な情報、およびメニューオプションの作成と行うより多くの例については、@cite{Emacs Lisp Reference
Manual}の``Menu Keymaps''にあります(このマニュアル内の情報については@ref{Emacs Lisp
documentation}を参照)。

@node Deleting menus and menu options
@section How do I delete menus and menu options?
@cindex Deleting menus and menu options
@cindex Menus, deleting

メニューを削除するもっともシンプルな方法は、そのキーマップに@samp{nil}をセットします。たとえば@samp{Words}メニュー(@ref{Modifying
pull-down menus}を参照)を削除するには以下を使用します:

@lisp
(define-key global-map [menu-bar words] nil)
@end lisp

同じように、メニューオプションを削除するには、キーマップエントリーを@code{nil}に再定義する必要があります。たとえば@samp{Edit}メニューから(@ref{Modifying
pull-down menus}で追加した)@samp{Forward word}メニューオプションを削除するには以下を使用します:

@lisp
(define-key global-map [menu-bar edit forward] nil)
@end lisp

@node Turning on syntax highlighting
@section How do I turn on syntax highlighting?
@cindex Syntax highlighting
@cindex @code{font-lock-mode}
@cindex Highlighting based on syntax
@cindex Colorizing text
@cindex FAQ, @code{font-lock-mode}

@code{font-lock-mode}はEmacsがカレントバッファーでシンタックスハイライト和行う標準的な方法です。これはEmacs
22.1以降ではデフォルトで有効になっています。

@code{font-lock-mode}をオンに切り替えると、異なるタイプのテキストは違うカラーで表示されます。たとえばプログラミング用のモードでは変数はあるフェイスで、キーワードはそれとは異なるフェイス、コメントは更に違うフェイスで表示されるでしょう。

既存バッファーで@code{font-lock-mode}をオフに切り替えるには@kbd{M-x font-lock-mode
@key{RET}}を使用してください。

Emacs
21以前では以下のコードを@file{.emacs}ファイルに記述して、@code{font-lock-mode}をグローバルにオンに切り替えることができます。

@lisp
(global-font-lock-mode 1)
@end lisp

@code{font-lock-mode}によるバッファーのハイライトにはかなり時間がかかり、苛立たしい表示の遅延を引き起こすので、これに対処するための機能がいくつかあります。

@cindex Just-In-Time syntax highlighting
Emacs
21では@code{font-lock-mode}をオンに切り替えることによって、@code{jit-lock-mode}が提供する新たな@dfn{JITフォント表示(Just-In-Time
fontification)}が自動的にアクティブになります。@code{jit-lock-mode}はバッファーをユーザーに実際に見せる必要が生じるまで、そのバッファー範囲のフォント表示を遅延させるとともに、EmacsがIdol中にもフォント表示を行えます。これによってバッファーの可視範囲はほとんど瞬時に表示されるようになります。@code{jit-lock-mode}のカスタマイズの詳細については@kbd{C-h
f jit-lock-mode @key{RET}}とタイプしてください。

@cindex Levels of syntax highlighting
@cindex Decoration level, in @code{font-lock-mode}
21より前のバージョンのEmacsではささやかなものから派手なものまで、異なるレベルの装飾が利用可能です。より多くの装飾にはバッファーがフォント表示されるまで、より長い時間待機する必要があることを意味しています。バッファーがどのように装飾されるべきかを制御するためには、@file{.emacs}ファイルで@code{font-lock-maximum-decoration}に値をセットします。@code{nil}値はデフォルトの(通常は最低限の)装飾、@code{t}は最大限の装飾をも意味します。できるだけ派手な外観にするには、@file{.emacs}ファイルに以下の行を含めてください。

@lisp
(setq font-lock-maximum-decoration t)
@end lisp

@noindent
異なるモードでは違う方法でハイライトするようにこの変数をセットすることもできます。詳細については@kbd{C-h v} (または@kbd{M-x
describe-variable
@key{RET}})で@code{font-lock-maximum-decoration}のドキュメントを確認してください。

更に@kbd{C-h f font-lock-mode} (@kbd{M-x describe-function @key{RET}
font-lock-mode @key{RET}})で利用できる、関数@code{font-lock-mode}のドキュメントも参照してください。

バッファーをフェイス(カラーとフォント)付きでそのままプリントするためには、@kbd{M-x
ps-print-buffer-with-faces}または@kbd{M-x
ps-print-region-with-faces}を使用します。あなたにはPostScriptプリンターにテキストを送信する方法、あるいはGhostscriptのようなPostScriptインタープリターが必要になるでしょう。詳細については変数@code{ps-printer-name}、@code{ps-lpr-command}、@code{ps-lpr-switches}のドキュメントを参照してください。

@node Scrolling only one line
@section How can I force Emacs to scroll only one line when I move past the bottom of the screen?
@cindex Scrolling only one line
@cindex Reducing the increment when scrolling

@kbd{M-x customize-variable @key{RET} scroll-conservatively
@key{RET}}で@code{scroll-conservatively}をカスタマイズして大きな値、たとえば10000にセットしてください。これが何を意味するかについては、@ref{Auto
Scrolling,,, emacs, The GNU Emacs Manual}の説明を参照してください。

かわりに@file{.emacs}で以下のLispフォームを使うこともできます:

@lisp
(setq scroll-conservatively most-positive-fixnum)
@end lisp

@node Editing MS-DOS files
@section How can I edit MS-DOS files using Emacs?
@cindex Editing MS-DOS files
@cindex MS-DOS files, editing
@cindex Microsoft files, editing
@cindex Windows files, editing

MS-DOS
(およびWindows)のファイルの検出と処理は透過的に行われます。Unixシステム上でファイルフォーマットについて心配するなくMS-DOSファイルのオープン、編集、保存を行うことができます。

MS-DOS形式ファイルの編集時には、それがDOSファイルであることが示されます。UnixおよびGNU/Linuxシステム、およびMacintoshでもモードライン左端付近に文字列@samp{(DOS)}が表示されるでしょう。DOSのEOLフォーマットをデフォルトとして使用するDOSおよびWindowsでは、モードラインにバックスラッシュ(@samp{\})が表示されます。

@node Filling paragraphs with a single space
@section How can I tell Emacs to fill paragraphs with a single space after each period?
@cindex One space following periods
@cindex Single space following periods
@cindex Periods, one space following

以下の行を@file{.emacs}ファイルに追加してください:

@lisp
(setq sentence-end-double-space nil)
@end lisp

@node Escape sequences in shell output
@section Why these strange escape sequences from @code{ls} from the Shell mode?
@cindex Escape sequences in @code{ls} output
@cindex @code{ls} in Shell mode

多くのシステムでは、@code{ls}はANSIカラーエスケープシーケンスを使用してプリントを行う@samp{ls
--color}にエイリアスされています。Emacsのバージョン21.1以降には、これらのエスケープシーケンスをShellモードに認識させる@code{ansi-color}パッケージが含まれています。Emacs
23.2以降では、このパッケージはデフォルトで有効になっています。これより前のバージョンではShellバッファーで@kbd{M-x
ansi-color-for-comint-mode}とタイプするか、あるいはinitファイルに@code{(add-hook
'shell-mode-hook 'ansi-color-for-comint-mode-on)}を追加することで有効にできます。

@node Fullscreen mode on MS-Windows
@section How can I start Emacs in fullscreen mode on MS-Windows?
@cindex Maximize frame
@cindex Fullscreen mode

Emacs
24からはコマンドラインオプション@samp{--maximized}でEmacsを開始するか、あるいは@file{.emacs}ファイルに以下のフォームを記述します:

@lisp
(add-hook 'emacs-startup-hook 'toggle-frame-maximized)
@end lisp

これより古いバージョンでは関数@code{w32-send-sys-command}を使用してください。たとえば以下を@file{.emacs}ファイルに記述できます:

@lisp
(add-hook 'emacs-startup-hook
          (lambda () (w32-send-sys-command ?\xF030)))
@end lisp

Emacsの開始においてデフォルトのフレームサイズからフルスクリーンに拡がる若干惑わされる視覚効果を回避するには、Windowsのレジストリ文字列に@samp{Emacs.Geometry}エントリーを追加できます。@ref{X
Resources,,, emacs, The GNU Emacs Manual}を参照してください。

幅と高さの正しい値を計算するためには、まずEmacsフレームを最大化してから@kbd{M-:}で@code{(frame-height)}および@code{(frame-width)}を評価してください。

@c ------------------------------------------------------------
@node Bugs and problems
@chapter Bugs and problems
@cindex Bugs and problems

Emacsマニュアルにはユーザーが陥りやすい類の一般的なトラブルのリストがあるので、このチャプターに記述されていない問題に遭遇したら、@ref{Lossage,
, Dealing with Emacs Trouble, emacs, The GNU Emacs
Manual}を参照してください。バグを見つけたと判断したら、それをどうすればよいかについては@ref{Bugs, , Reporting Bugs,
emacs, The GNU Emacs Manual}を参照してください。

Emacsディストリビューションに同梱されているファイル@file{etc/PROBLEMS}は特定プラットフォームでのEmacsのビルド、使用にたいする既知の様々な問題のリストがあります。これを読むには@kbd{C-h
C-p}とタイプしてください。

@menu
* Problems with very large files::
* ^M in the shell buffer::
* Problems with Shell Mode::
* Termcap/Terminfo entries for Emacs::
* Errors with init files::
* Emacs ignores X resources::
* Emacs ignores frame parameters::
* Editing files with $ in the name::
* Shell mode loses the current directory::
* Security risks with Emacs::
* Dired claims that no file is on this line::  
@end menu

@node Problems with very large files
@section Does Emacs have problems with large files?
@cindex Very large files, opening
@cindex Large files, opening
@cindex Opening very large files
@cindex Maximum file size
@cindex Files, maximum size

Emacsのバッファーサイズには先天的に固定された制限があります。これは同一プラットフォームで他のプログラムがサポートするオブジェクトの最大サイズと比較すると厳しい制限です。

バッファーの最大サイズはバージョン23.2からは32ビットマシンで512MBです。@code{--with-wide-int}フラグを使用してEmacsをビルドした場合には、バッファーの最大サイズは32ビットマシンで2GBです。

64ビットマシンでコンパイルしたEmacsはより大きい@code{most-positive-fixnum}
(2.3EB)までのバッファーを扱うことができます(訳注: 1E=1exaは10の18乗)。

マルチバイト文字のデコーディングのような事柄のために、visitできるのはバッファーのサイズ制限の概ね半分のサイズのファイルだけです。圧縮されたアーカイブをvisitする際には、解凍のためにファイルサイズの制限はより小さくなります。

@node ^M in the shell buffer
@section How do I get rid of @samp{^M} or echoed commands in my shell buffer?
@cindex Shell buffer, echoed commands and @samp{^M} in
@cindex Echoed commands in @code{shell-mode}

それらを取り除くには@kbd{M-x comint-strip-ctrl-m
@key{RET}}を試してください。これが機能しない場合には、いくつかのオプションがあります。

@code{tcsh}では以下を@file{.cshrc} (または@file{.tcshrc})ファイルに記述してください:

@example
if ($?INSIDE_EMACS && $?tcsh)
    unset edit
    stty -icrnl -onlcr -echo susp ^Z
endif
@end example

あるいは以下をファイル@file{.emacs_tcsh}または@file{~/.emacs.d/init_tcsh.sh}に記述してください:

@example
unset edit
stty -icrnl -onlcr -echo susp ^Z
@end example

Shellバッファーで@code{tcsh}のかわりに@code{csh}を使用してください。1つ目の方法は:

@lisp
(setq explicit-shell-file-name "/bin/csh")
@end lisp

@noindent
別の方法としては@file{.cshrc} (または@file{.tcshrc})ファイルでこれを行う方法です:

@example
setenv ESHELL /bin/csh
@end example

@noindent
(これが効果をもつように環境変数を正しくセットした後にEmacsを再起動しなければなりません。)

以下のLispフォームでEmacs Lispにより@code{ESHELL}環境変数をセットすることもできます:

@lisp
(setenv "ESHELL" "/bin/csh")
@end lisp

上記の解決策は最初にシェルが@samp{^M}文字を生成するのを防ぐ試みです。これが不可能(たとえばWindowsシェルを使用している)なら、@file{.emacs}に追加することによって、Emacsにそれらの文字をバッファーから削除させることができます。

@smalllisp
(add-hook 'comint-output-filter-functions #'comint-strip-ctrl-m)
@end smalllisp

関連する注意:
あなたのシェルが入力行をShellバッファーでエンコードする場合には、Shellバッファーで@code{comint-process-echoes}変数をカスタマイズするか、あるいはシェルの起動ファイルで以下のコマンドの実行を試みたいと思うかもしれません:

@example
stty -icrnl -onlcr -echo susp ^Z
@end example

@node Problems with Shell Mode
@section Why do I get an error message when I try to run @kbd{M-x shell}?

@cindex Shell Mode, problems
@cindex @code{explicit-shell-file-name}
これはEmacsが間違った場所でシェルを探そうとして起こるかもしれません。シェル実行形式の場所をあなたが知っていたら、@file{.emacs}ファイルで変数@code{explicit-shell-file-name}がそのフルファイル名を指し示すようにセットしてください。

@cindex Antivirus programs, and Shell Mode
MS-Windows上のShellモードで差し出がましいアンチウイルスソフトウェアによりトラブルに遭う人がいます。このようなケースでは常駐アンチウイルスプログラムを無効にすると問題は解決するでしょう。

@node Termcap/Terminfo entries for Emacs
@section Where is the termcap/terminfo entry for terminal type @samp{emacs}?
@cindex Termcap
@cindex Terminfo
@cindex Emacs entries for termcap/terminfo

ターミナルタイプ@samp{emacs}にたいするtermcapエントリーは、通常はサブシェルの環境変数@samp{TERMCAP}にセットされます。これは特定の状況下(たとえばShellバッファーからのrlogin)において、システムワイドなtermcapファイルにエントリーを追加する助けになるかもしれません。以下は@samp{emacs}にたいする正しいtermcapエントリーです:

@example
emacs:tc=unknown:
@end example

@samp{emacs}にたいするterminfoエントリーを作成するには@code{tic}または@code{captoinfo}を使用します。@file{/usr/lib/terminfo/e/emacs}を生成する必要がありますが、これは単に@file{/usr/lib/terminfo/d/dumb}を@file{/usr/lib/terminfo/e/emacs}にコピーすれば大丈夫です。

termcap/terminfoエントリーがあってもShellバッファーでのフルスクリーンプログラムの使用は有効になりません。かわりに@kbd{M-x
term}を使用してください。

termcap/terminfo欠落による問題を回避するためには、シェルのスタートアップファイルで端末タイプを@samp{emacs}から@samp{dumb}か@samp{unknown}に変更します。@code{csh}ユーザーは以下を@file{.cshrc}ファイルに記述できます:

@example
if ("$term" == emacs) set term=dumb
@end example

@node Errors with init files
@section Why does Emacs say @samp{Error in init file}?
@cindex Error in @file{.emacs}
@cindex Error in init file
@cindex Init file, errors in
@cindex @file{.emacs} file, errors in
@cindex Debugging @file{.emacs} file

あなたの@file{.emacs}ファイル、あるいはシステムワイドファイル@file{site-lisp/default.el}のロード中にエラーが発生したためです。Emacs
21.1以降では@file{*Messages*}バッファーがポップアップして、そこにデバッグ用のヒントを与えるためのエラーに関する追加情報を書き込みます。

あなたの@file{.emacs}ファイルをデバッグする方法については@ref{Debugging a customization
file}を参照してください。

まず何らかのパッケージのロードが必要だったり、そあるいはパッケージのロード後に評価されるフックを使用したのかもしれません。これのよくあるケースについては@ref{Terminal
setup code works after Emacs has begun}に記述があります。

@node Emacs ignores X resources
@section Why does Emacs ignore my X resources (my .Xdefaults file)?
@cindex X resources being ignored
@cindex Ignored X resources
@cindex @file{.Xdefaults}

Emacsは以下の環境変数が指定するファイルからXリソースを検索します。

@itemize @bullet

@item @code{XFILESEARCHPATH}
@item @code{XUSERFILESEARCHPATH}
@item @code{XAPPLRESDIR}

@end itemize

これはXツールキットを使用して記述されたプログラムが提供する機能をエミュレートします。

@code{XFILESEARCHPATH}と@code{XUSERFILESEARCHPATH}はコロンで区切られたファイル名のリスト、@code{XAPPLRESDIR}はコロンで区切られたディレクトリーのリストです。

Emacsは以下のようにXリソースを検索します:

@enumerate

@item
コマンドラインで@samp{-xrm RESOURCESTRING}オプションによって指定された値

@item
環境変数@samp{XENVIRONMENT}の値

@itemize @minus

@item
これがセットされていなければ、@file{~/.Xdefaults-@var{hostname}}という名前のファイルがあればその中から(@var{hostname}はEmacsが実行中のマシンの名前)

@end itemize

@item
サーバーが提供するスクリーン固有のシステムワイドなリソースプロパティ

@itemize @minus

@item
これがセットされていなければ、@file{~/.Xdefaults}という名前のファイルがあればその中から

@end itemize

@item
@samp{XUSERFILESEARCHPATH}にリストされたファイル

@itemize @minus

@item
環境変数@samp{LANG}がセットされていれば@samp{XAPPLRESDIR}にリストされたディレクトリーにある@file{@var{lang}/Emacs}という名前のファイルの中から(@var{lang}は環境変数@code{LANG}の値)
@item
@samp{XAPPLRESDIR}にリストされたディレクトリーにあるEmacsという名前のファイルの中から
@item
(環境変数@code{LANG}がセットされていれば) @file{~/@var{lang}/Emacs}の中から
@item
@file{~/Emacs}の中から

@end itemize

@item
@code{XFILESEARCHPATH}にリストされたファイルの中から

@end enumerate

@node Emacs ignores frame parameters
@section Why don't my customizations of the frame parameters work?
@cindex Frame parameters

これが発生したのは恐らく変数@code{initial-frame-alist}でフレームパラメーターをセットしたからです。この変数にはEmacs起動時に作成された最初のフレームに使用されたパラメーターだけが保持されています。すべてのフレームのパラメーターをカスタマイズするためには、かわりに@code{default-frame-alist}を変更してください。

これらの2つの変数が存在するのは、多くのユーザーが特別な方法で初期フレームをカスタマイズするからです。たとえば初期フレームの位置とサイズを判断することができ、かつ他のフレームについてはそれぞれを個別に配置してジオメトリを制御したいような場合です。


@node Editing files with $ in the name
@section How do I edit a file with a @samp{$} in its name?
@cindex Editing files with @samp{$} in the name
@cindex @samp{$} in file names
@cindex File names containing @samp{$}, editing

ミニバッファーでファイル名を入力する際には、単語の前に@samp{$}があるとEmacsは環境変数としてそれの展開を試みます。この挙動を抑止するには、かわりに@kbd{$$}とタイプしてください。

@node Shell mode loses the current directory
@section Why does shell mode lose track of the shell's current directory?
@cindex Current directory and @code{shell-mode}
@cindex @code{shell-mode} and current directory
@cindex Directory, current in @code{shell-mode}

Emacsには実際にシェルが自身のディレクトリーを変更したタイミングを知る手段がありません。これはUnixに内在する制限です。そのためにEmacsは@samp{cd}コマンドを識別して推測を試みます。変数リファレンスを含むディレクトリーが後に続く@kbd{cd}
(@kbd{cd $HOME/bin})やシェルのメタ文字を含むディレクトリー(@kbd{cd
../lib*})をタイプすると、Emacsはシェルの新たなカレントディレクトリーの正確な推測に失敗するでしょう。Shellモードにおけるこの問題を処理するために、膨大な数の様々な訂正および改善が記述されてきました(@ref{Finding
a package with particular functionality}を参照)。

コマンド@kbd{M-x dirs}でシェルのカレントディレクトリーをEmacsに伝えることができます。

@node Security risks with Emacs
@section Are there any security risks in Emacs?
@cindex Security with Emacs
@cindex @samp{movemail} and security
@cindex @code{file-local-variable} and security
@cindex Synthetic X events and security
@cindex X events and security

@itemize @bullet

@item
サードパーティのパッケージ。

Emacsにインストールされた任意のパッケージはEmacs自身のプロセスと同じ権限で任意のコードを実行できる。サードパーティのアーカイブをパッケージシステム(@code{M-x
list-packages}など)で使用する際には注意を要する。信頼可能なサードパーティだけを使用すること!

@item
@code{file-local-variable}機能(危険ではあるが容易に変更できる)。

Emacsにはファイル終端付近に特別にフォーマットされたテキストを含むファイルを編集する際に、変数にたいするローカル値のセットを許す機能がある。この機能にはファイルをvisitする際に任意のEmacs
Lispコードを評価する能力も含まれる。当然、トロイの木馬がこの機能を悪用する可能性がある。

Emacsにはバージョン22の時点において、セットしても安全だと判っているローカル変数のリストがある。このリスト以外の変数のセットをファイルが試みると、その変数をセットするべきかどうかユーザーに確認を求める。変数@code{enable-local-eval}をセットすることにより、ファイル下部で見つけたEmacs
Lispコードの評価を許すか否かを▽えまに伝えることもできる。

@ref{File Variables,,, emacs, The GNU Emacs Manual}を参照のこと。

@item
合成Xイベント(危険であり@samp{MIT-MAGIC-COOKIE-1}以上を使用すること)。

Emacsは@code{SendEvent}リクエストが生成した合成Xイベント(synthetic X
event)が通常イベントであるかのように受け入れる。結果として簡単なホストベースの認証を使用していると、XワークステーションへのX接続をオープン可能な他のユーザーは、Emacsプロセスに(特権での他プロセス実行を含む)何でも実行させることができる。

他のユーザーによるX接続のオープンができないように防ぐことが、これにたいする唯一の修整である。@samp{MIT-MAGIC-COOKIE-1}のような本物の認証メカニズムを使用することが、これを防ぐ標準的な方法である。@code{xauth}プログラムの使用に何らかの効果があるなら、恐らく@samp{MIT-MAGIC-COOKIE-1}を使用しているだろう。あなたのサイトは上位の認証方式を使用しているかもしれない。システム管理者に尋ねてみて欲しい。

本物の認証が利用できなければ、Xプログラム起動中の短い時間内だけホストへのアクセスを許可して、その後にアクセスを削除することで満足できるかもしれない。これは敵対的ユーザーがアクセス可能な時間枠が縮小されるのでリスクは幾分低減するものの、@emph{排除はされていない}。

UnixおよびXを実行中のコンピューターのほとんどでは@code{xhost}コマンドを使用してアクセスを有効または無効にできる。すべてのホストにXサーバーへのアクセスを許可するには、

@example
xhost +
@end example

@noindent
をシェルプロンプトで使用する。これは(少なくともHPマシンでは)以下のメッセージを生成する:

@example
access control disabled, clients can connect from any host
@end example

(名前により明示的に許可されたホストを除き)すべてのホストにたいしてXサーバーへのアクセスを拒絶するには以下を使用する

@example
xhost -
@end example

HPのテスト機では、このコマンドは以下のメッセージを生成した:

@example
access control enabled, only authorized clients can connect
@end example

@end itemize

@node Dired claims that no file is on this line
@section Dired says, @samp{no file on this line} when I try to do something.
@cindex Dired does not see a file

Diredはファイル名の先頭を見つけるために正規表現を使用します。Unix形式の長いディレクトリーリスト(@samp{ls
-l})では、ファイル名は日時の後で始まります。したがってこのregexpは日時を探すように記述されています。デフォルトでは言語に関わらず日付と時刻を認識して然るべきですが、あなたのディレクトリーリストが通常のフォーマットでなければDiredが混乱するかもしれません。

これを解決するには2つのアプローチがあります。1つ目には@samp{ls
-l}の出力がより標準的なフォーマットになるように設定を行うことです。詳細はあなたのOSのマニュアルを参照してください。

2つ目のアプローチはDiredが使用する正規表現@code{directory-listing-before-filename-regexp}を変更することです。

@c ------------------------------------------------------------
@node Compiling and installing Emacs
@chapter Compiling and installing Emacs
@cindex Compiling and installing Emacs

@menu
* Installing Emacs::
* Problems building Emacs::  
@end menu

@node Installing Emacs
@section How do I install Emacs?
@cindex Installing Emacs
@cindex Unix systems, installing Emacs on
@cindex Downloading and installing Emacs
@cindex Building Emacs from source
@cindex Source code, building Emacs from

この回答はUnixおよびUnix風システムを使用するユーザーを意図しています。他のオペレーティングシステムのユーザーは@ref{Emacs for
MS-DOS}で始まる一連の問いを確認する必要があります。これらにはUnix以外のソースおよびバイナリーを取得する場所、それらのシステムでEmacsをインストールする方法が記されています。

GNU/Linuxディストリビューションのほとんどでは、事前ビルドされたEmacsパッケージが提供されています。Emacsがすでにインストール済みでなければ@samp{dnf
install emacs} (Red
Hatとその派生物の場合。古いディストリビューションは@samp{yum}を使用)、または@samp{apt-get install emacs}
(Debianとその派生物の場合)のようなコマンドを(rootとして)実行することでインストールできます。

自分でEmacsをコンパイルしたい場合には、ソースディストリビューションのファイル@file{INSTALL}を読んでください。要約すると:

@itemize @bullet

@item
まずEmacsのソースをダウンロードする。ダウンロードできるサイトのリストは@ref{Current GNU
distributions}を参照のこと。GNUディストリビューションのメインサイト@url{https://ftp.gnu.org}では以下からダウンロード可能

@c Don't include VER in the file name, because pretests are not there.
@uref{https://ftp.gnu.org/pub/gnu/emacs/emacs-VERSION.tar.gz}

(@samp{VERSION}は@samp{23.1}のように適切なバージョン番号に置き換えること。)

@item
次にソースファイルを解凍、抽出する。これには標準ユーティリティー@code{gzip}および@code{tar}が必要。これらがシステムになければ@url{https://ftp.gnu.org}からダウンロードできる。

GNU @code{tar}なら一度に解凍抽出ができる:

@example
tar -zxvf emacs-VERSION.tar.gz
@end example

@item
この時点でEmacsのソースファイルは@file{emacs-VERSION}というディレクトリーにあるはず。UnixおよびUnix風システムのほとんどでは、以下のコマンドでEmacsをコンパイルできるだろう。

@example
cd emacs-VERSION
./configure         # 特定システム向けにEmacsをconfigure
make                # Makefileを使ってコンポーネントをビルド、Emacsを使用する
@end example

@code{make}が正常に完了したら、ビルドがうまくいった公算はかなり高い(不成功なら@ref{Problems building
Emacs}を参照)。

@item
デフォルトではEmacsは@file{/usr/local}にインストールされる。実際にファイルをインストールするには特権ユーザーになって以下をタイプする

@example
make install
@end example

@samp{make
install}によって@file{/usr/local/bin/emacs}、および@file{/usr/local/share/info/}にあるかもしれないEmacs
Infoファイルは上書きされることに注意。

@end itemize

@node Problems building Emacs
@section What should I do if I have trouble building Emacs?
@cindex Problems building Emacs
@cindex Errors when building Emacs

まずはあなたの問題にたいする解決策があるかを確認するために、(Emacsソースを解凍した場所にある)ファイル@file{etc/PROBLEMS}調べてください。次にこのFAQからEmacsのインストールやコンパイルの問題に関連する他の問答を探してください。

あなたの問題を誰かに見てもらって解決の助けとしたいなら、@ref{Help installing Emacs}を参照してください。

ドキュメントから解決策が見つからない場合には、どうかその問題をレポートしてください(@ref{Reporting bugs}を参照)。


@c ------------------------------------------------------------
@node Finding Emacs and related packages
@chapter Finding Emacs and related packages
@cindex Finding Emacs and related packages

@menu
* Finding Emacs on the Internet::
* Finding a package with particular functionality::
* Packages that do not come with Emacs::
* Spell-checkers::
* Current GNU distributions::
* Difference between Emacs and XEmacs::
* Emacs for minimalists::
* Emacs for MS-DOS::
* Emacs for MS-Windows::
* Emacs for GNUstep::
* Emacs for macOS::          
@end menu

@node Finding Emacs on the Internet
@section Where can I get Emacs on the net?
@cindex Finding Emacs on the Internet
@cindex Downloading Emacs

Emacsのダウンロードに関する情報は@uref{https://www.gnu.org/software/emacs/, the Emacs
home-page}で利用可能です。

Emacsの入手およびEmacs最新バージョンをビルドする方法については@ref{Installing
Emacs}、GNUソフトウェアが利用可能なアーカイブサイトのリストは@ref{Current GNU distributions}を参照してください。

@node Finding a package with particular functionality
@section How do I find an Emacs Lisp package that does XXX?
@cindex Package, finding
@cindex Finding an Emacs Lisp package
@cindex Functionality, finding a particular package

何よりまずはパッケージが本当にまだ利用できないか確認しましょう。たとえば@kbd{M-x apropos @key{RET} python
@key{RET}}とタイプすれば、文字列@samp{python}を含むすべての関数と変数が一覧されます。

パッケージはシステム上にあってもロードされていない可能性もあります。ロード用に利用できるパッケージを確認するために、あなたのコンピューターのlispディレクトリーを見てみましょう(@ref{File-name
conventions}を参照)。ほとんどのパッケージのLispソースには、それらをどのようにロード、呼び出し、設定するべきかに関する短い説明が含まれているので、作成者がソースコード内でヒントを提供していたら、Lispパッケージの使用や変更を行う前に確認しましょう。

コマンド@kbd{C-h p} (@code{finder-by-keyword})でEmacsのパッケージ構成をブラウズできます。

Emacsの一部ではない追加パッケージを探す方法についての助言は@ref{Packages that do not come with
Emacs}を参照してください。

@c Note that M-x view-external-packages references this node.
@node Packages that do not come with Emacs
@section Where can I get Emacs Lisp packages that don't come with Emacs?
@cindex Unbundled packages
@cindex Finding other packages
@cindex Lisp packages that do not come with Emacs
@cindex Packages, those that do not come with Emacs
@cindex Emacs Lisp List
@cindex Emacs Lisp Archive

あなたのEmacsに更に機能を追加するには、コマンド@kbd{M-x
list-packages}を使用するのがもっとも簡単な方法です。これは@uref{https://elpa.gnu.org, GNU ELPA}
(``Emacs Lisp Package
Archive'')サーバーに接続して、それが提案する追加パッケージのリストを取得します。これらはEmacsでの使用が可能ですが、スペース等の理由によりEmacs自体とは別に配布されているGNUパッケージです。コマンドの結果ト得られた@file{*Packages*}を閲覧して何が利用可能なのか確認して、それからあなたが選択したパッケージのダウンロードとインストールを自動的に行います。@ref{Packages,,,
emacs, The GNU Emacs Manual}を参照してください。

Emacs
Lispパッケージアーカイブは他にもあります。追加アーカイブを使用するには変数@code{package-archives}をカスタマイズしてください。これらのアーカイブはGNU
Emacsとは提携しておらず、わたしたちはそれらがどのように保守されているかを監視していません。彼らはコードの正確さち安全性に最新の注意を払うかもしれないし、あるいはぞんざいに注意するだけかもしれません。

更にこれらの他のアーカイブでホストされるパッケージは、他の非フリーなプログラムのインストールや使用を推奨、あるいは必須としているかもしれません。パッケージがフリーソフトウェアであり、非フリーなソフトウェアをインストールせずに機能するか検証できないのであれば、あなたの自由を危うくしないために近寄らないことを推奨します。

@uref{news:gnu.emacs.sources, Emacs sources
newsgroup}にゲートウェイされている@uref{https://lists.gnu.org/mailman/listinfo/gnu-emacs-sources,
GNU Emacs sources mailing
list}は、(たとえ2点間の通信が不確かであっても)人々が彼らのEmacs拡張をアナウンスする公の場です。

@uref{https://emacswiki.org, Emacs
Wiki}にはいくつかの追加拡張への指標が含まれています。@uref{https://wikemacs.org,
WikEmacs}はEmacs用の代替えwikiです。

@uref{http://www.damtp.cam.ac.uk/user/sje30/emacs/ell.html, The Emacs Lisp
List (ELL)}には多くのEmacs Lispファイルへの指標がありますが、これを記述している時点ではすでに更新されていません。

Emacs
Lispパッケージを提供するすべてのサイトをここで一覧することは、わたしたちには不可能です。もしも特定の機能に興味があるならEmacs自身とGNU
ELPAをチェックした後は、ウェブ検索が結果を見い出す最良の手段であることが多々あります。

@node Spell-checkers
@section Spell-checkers
@cindex Spell-checker
@cindex Checking spelling
@cindex Hunspell
@cindex Aspell
@cindex Ispell
@cindex Enchant

以下を含む様々なスペルチェッカーはEmacsと互換性があります:

@table @b

@item Hunspell
@uref{http://hunspell.sourceforge.net/}

@item GNU Aspell
@uref{http://aspell.net/}

@item Ispell
@uref{http://fmg-www.cs.ucla.edu/geoff/ispell.html}

@item Enchant
@uref{https://abiword.github.io/enchant/}

@end table

@node Current GNU distributions
@section Where can I get other up-to-date GNU stuff?
@cindex Current GNU distributions
@cindex Sources for current GNU distributions
@cindex Stuff, current GNU
@cindex Up-to-date GNU stuff
@cindex Finding current GNU software
@cindex Official GNU software sites

GNU公式ソフトウェアのほとんどは通常は以下に保持されています 

@uref{https://ftp.gnu.org/pub/gnu}

@samp{ftp.gnu.org}のミラーサイト一覧は以下で見つけられます

@uref{https://www.gnu.org/prep/ftp}

@node Difference between Emacs and XEmacs
@section What is the difference between Emacs and XEmacs (formerly Lucid Emacs)?
@cindex XEmacs
@cindex Difference Emacs and XEmacs
@cindex Lucid Emacs
@cindex Epoch

XEmacsとはもはや活発に開発されなくなったEmacsのブランチバージョンです。当初XEmacsはLucid
Emacsと呼ばれており、初版はEmacs
19のプレリリースバージョンから派生しました。このFAQでは公式バージョンにたいしてのみ``Emacs''という名前を使用します。

XEmacsは2009年1月30にリリースされた新バージョンが最新であり、それにはEmacsに存在する多くの重要な機能が欠落していました。過去においては、EmacsパッケージにXEmacsとの互換性のためのコードを含めるのは珍しいことではありませんでした。現在ではたとえそのような互換性コードをまだ保守しているパッケージがあったとしても、より人気のあるビルトインおよびサードパーティーのパッケージのいくつかはXEmacsのサポートを止めるか、あるいはEmacs専用に開発されています。

いくつかのXEmacsコードはEmacsに提供されており、他の部分についてもわたしたちは使用したいと考えていまづが、初期のXEmacsメンテナーは提供されたコードの作成者を常に追跡はしておらず、FSFがそのコードにたいする署名済みのコピーライトペーパーを取得することを不可能にしています(FSFは個別の身元を保つEmacsのコードに正しく統合されていない汎用Cサポートパッケージは除き。Emacsリリースに含まれるすべてのコードにたいしてこれらのペーパーを要求している)。

これらの2つのバージョンを区別して議論をする場合には、どうかそれらを``Emacs''および``XEmacs''と呼ぶようにしてください。XEmacsもまたGNUプロジェクトの作業を元としているので、``XEmacs''と``GNU
Emacs''の対比は誤解を招きかねません。``Emacsen''や``(X)Emacs''のような用語も悪くはありませんが、非常に明快とは言えないので``Emacs
and XEmacs''と記述するほうが良いでしょう。

@node Emacs for minimalists
@section I don't have enough disk space to install Emacs
@cindex Zile
@cindex Not enough disk space to install Emacs

GNU ZileはEmacsの軽量クローンです。Zileは@samp{Zile Is Lossy
Emacs}を短縮したものです。これにはEmacsの基本的な編集機能すべてが含まれています。Zileのバイナリーは通常は約130kBのサイズなので、非常にスペースに制限がある環境で有用かもしれません。詳細は以下で理由できます

@uref{https://www.gnu.org/software/zile/}


@node Emacs for MS-DOS
@section Where can I get Emacs for MS-DOS?
@cindex MS-DOS, Emacs for
@cindex DOS, Emacs for
@cindex Compiling Emacs for DOS
@cindex Emacs for MS-DOS

MS-DOS用のEmacsをソースからビルドするには、ディストリビューションに同梱のファイル@file{msdos/INSTALL}の手順を参照してください。DOSポートはプレーンDOS、更にWindows
XPとVistaを含むバージョン3.X以降のすべてのバージョンのMS-Windowsでビルド、実行されています。

ファイル@file{etc/PROBLEMS}にはMS-DOS下のEmacsに関する追加情報が含まれています。

Emacs 24の事前ビルドされたバイナリーの配布は以下から利用できます

@uref{http://www.delorie.com/pub/djgpp/current/v2gnu/emacs.README}

Emacs(およびEmacs類似物)のその他のMS-DOS実装については、以下で利用可能な``Emacs implementations and
literature,''のリストを参照してください。

@uref{http://www.finseth.com/emacs.html}

これらのプログラムの多くはEmacsと同じように見えますが、それらにはEmacs Lisp拡張言語のような特定の機能が欠落していることが多々あります。

@node Emacs for MS-Windows
@section Where can I get Emacs for Microsoft Windows?
@cindex FAQ for Emacs on MS-Windows
@cindex Emacs for MS-Windows
@cindex Microsoft Windows, Emacs for

MS-WindowsでのEmacsには別個にFAQがあります。@ref{Top,,,efaq-w32,FAQ for Emacs on MS
Windows}を参照してください。MS-DOSの場合には@ref{Emacs for MS-DOS}を参照してください。


@node Emacs for GNUstep
@section Where can I get Emacs for GNUstep?
@cindex GNUstep, Emacs for

バージョン23.1からEmacsはGNUstepをネイティブでサポートしています。ディストリビューション内のファイル@file{nextstep/INSTALL}を参照してください。

@node Emacs for macOS
@section Where can I get Emacs for macOS?
@cindex Apple computers, Emacs for
@cindex Macintosh, Emacs for
@cindex macOS, Emacs for

バージョン22.1からEmacsはmacOSをネイティブでサポートしています。ディストリビューション内のファイル@file{nextstep/INSTALL}を参照してください。

@c ------------------------------------------------------------
@node Key bindings
@chapter Key bindings
@cindex Key bindings

@menu
* Binding keys to commands::
* Invalid prefix characters::
* Terminal setup code works after Emacs has begun::
* Working with function and arrow keys::
* X key translations for Emacs::
* Backspace invokes help::
* Swapping keys::
* Producing C-XXX with the keyboard::
* No Meta key::
* No Escape key::
* Compose Character::
* Binding combinations of modifiers and function keys::
* Meta key does not work in xterm::
* ExtendChar key does not work as Meta::
* SPC no longer completes file names::  
@end menu

@node Binding keys to commands
@section How do I bind keys (including function keys) to commands?
@cindex Binding keys to commands
@cindex Keys, binding to commands
@cindex Commands, binding keys to

対話的、または@file{.emacs}ファイルでキーをコマンドにバインドできます。すべてのモードにたいしてキーを対話的にバインドするには、@kbd{M-x
global-set-key @key{RET} @var{key} @var{cmd} @key{RET}}とタイプします。

カレントのメジャーモードだけでキーをバインドするには@kbd{M-x local-set-key @key{RET} @var{key}
@var{cmd} @key{RET}}とタイプします。

@ref{Key Bindings,,, emacs, The GNU Emacs Manual}を参照してください。

対話的にキーをバインドするプログレを容易にするために、次の``trick''を使用できます:
@*まず対話的にキーをバインドしてからすぐに@kbd{C-x @key{ESC} @key{ESC} C-a C-k
C-g}とタイプ、@*これでキーバインドを要するコマンドがkillリングに取り込まれたので@file{.emacs}ファイルにyankできるようになった。@*@*グローバルなキーバインディングの場合には、コマンドの変更は不要です。たとえば、

@lisp
(global-set-key [f1] 'help-for-help)
@end lisp

@noindent
これは@file{.emacs}ファイルに直後記述できます。ローカルなキーバインディングの場合には、、コマンドは@samp{add-hook}関数と組み合わせて使用されます。たとえばTeXモードでのローカルバインディングは以下のようになるでしょう

@lisp
(add-hook 'tex-mode-hook
  (lambda ()
   (local-set-key [f1] 'help-for-help)))
@end lisp


@itemize @bullet

@item
killリングからyankしたキーシーケンス内でのコントロール文字の形式はグラフィック形式 ---
つまり@key{CTRL}は@samp{^}、@key{TAB}はいくつかのスペース(通常は8)で示されるでしょう。これらをベクターや文字列形式に変換したいと思うかもしれません。

@item
プレフィクスキーとしてある文字シーケンスをバインドする場合に、それがすでにコンプリートキーワードとしてバインドされていたら、新しいバインディングの前にコンプリートキーのバインドを解除しなければならない。たとえば@kbd{ESC
@{}がバインド済みなら:

@lisp
(global-unset-key [?\e ?@{])   ;; または
(local-unset-key [?\e ?@{])
@end lisp

@item
コマンドや``lambdaリスト''は別として、ベクターや文字列もキーにバインドできるのでマクロとして扱うことができる。たとえば:

@lisp
(global-set-key [f10] [?\C-x?\e?\e?\C-a?\C-k?\C-g])  ;; または
(global-set-key [f10] "\C-x\e\e\C-a\C-k\C-g")
@end lisp

@end itemize

@node Invalid prefix characters
@section Why does Emacs say @samp{Key sequence XXX uses invalid prefix characters}?
@cindex Prefix characters, invalid
@cindex Invalid prefix characters
@cindex Misspecified key sequences

通常は2つのうちいずれかが発生したからです。1つ目はキーシーケンス内のコントロール文字の指定誤りです(Lisp式で@samp{\C-f}のかわりに@samp{C-f}を使用した)。2つ目はバインドを試みているキーストロークシーケンス内の@dfn{プレフィクスキー(prefix
key)}がすでに@dfn{コンプリートキー(complete key)}としてバインドされているからです。歴史的な理由により@samp{ESC
[}は通常は問題になります。この場合にはキーシーケンスのバインドを試みる前に、以下のフォームのいずれかを評価する必要があります:

@lisp
(global-unset-key [?\e ?[])  ;; または
(global-unset-key "\e[")
@end lisp

@node Terminal setup code works after Emacs has begun
@section Why doesn't this [terminal or window-system setup] code work in my @file{.emacs} file, but it works just fine after Emacs starts up?
@cindex Terminal setup code in @file{.emacs}

スタートアップの間、Emacsは与えられたコード/ファイルの順番に応じて自身を初期化します。@file{.emacs}ファイルの中のあるコードを、端末またはウィンドウシステムのセットアップコードが実行されるまで延期する必要があるのにセットアップが終わっていないと、この問題を体験することになるでしょう(このコード/ファイルの実行順はスタートアップ後は強制されない)。

端末またはウィンドウシステムのセットアップ後までEmacs Lispコードの実行を延期するには、コードを@dfn{lambdaリスト(lambda
list)}として@code{emacs-startup-hook} (またはEmacs
24.4は@code{tty-setup-hook})に追加してください。たとえば、

@lisp
(add-hook 'emacs-startup-hook
          (lambda ()
           (when (string-match "\\`vt220" (or (getenv "TERM") ""))
             ;; vt220の"Do"キーをM-xのように振る舞わせる:
             (global-set-key [do] 'execute-extended-command))))
@end lisp

起動のたびにEmacsが何を行っているかについては@file{lisp/startup.el}を参照してください。

@node Working with function and arrow keys
@section How do I tell what characters or symbols my function or arrow keys emit?
@cindex Working with arrow keys
@cindex Arrow keys, symbols generated by
@cindex Working with function keys
@cindex Function keys, symbols generated by
@cindex Symbols generated by function keys

@kbd{C-h
c}の後にファンクションキーか矢印キーをタイプしてください。コマンドはファンクションキーシンボルか文字シーケンスをリターンするでしょう(説明はEmacsドキュメントを参照)。これは他のキーでも同様に機能します。

@node X key translations for Emacs
@section How do I set the X key ``translations'' for Emacs?
@cindex X key translations
@cindex Key translations under X
@cindex Translations for keys under X

EmacsはデフォルトではXtライブラリーを使用するようには記述されていないので、何の``変換(translation)''もセットされていません(XtとともにEmacsをビルドした場合にそのような変換をどのようにセットするかわたしたちには定かではないので、これを行うことができたらどうか知らせてください!)。

Emacs内でのキーの挙動に影響を与えるには@code{xmodmap} (Emacs外部)、あるいは@code{define-key}
(Emacs内部)を通じて行う方法だけです。@code{define-key}コマンドは@code{local-function-key-map}と組み合わせて使用する必要があります。たとえば、

@lisp
(define-key function-key-map [M-@key{TAB}] [?\M-\t])
@end lisp

@noindent
これはキーシーケンス@kbd{M-@key{TAB}}を定義します。

@node Backspace invokes help
@section Why does the @key{Backspace} key invoke help?
@cindex @key{Backspace} key invokes help
@cindex Help invoked by @key{Backspace}
@cindex @key{DEL} key does not delete

(ほとんどのキーボードでは)@key{Backspace}キーは@acronym{ASCII}コードの8を生成します。@kbd{C-h}が送信するコードも同じです。Emacsではデフォルトでは@kbd{C-h}はhelp-commandを呼び出します。これは@samp{help}の最初の文字が@samp{h}なので簡単に覚えられることを意図したものです。この問題のもっとも簡単な解決策はヘルプには@kbd{C-h}
(と@key{Backspace})を使い、前の文字の削除には@key{DEL}(@key{Delete}キー)を使うことです。

多くの人たちにとって、この解決策は問題があるかもしれません:

@itemize @bullet

@item
彼らはEmacs外部では前の文字の削除に通常は@key{Backspace}を使用する。これはEmacs外部で前の文字を削除するコマンドを@key{DEL}にすれば解決できる。多くのUnixシステムでは、以下のコマンドは@key{DEL}をリマップするだろう:

@example
stty erase '^?'
@end example

@item
ユーザーはキーボード上でより使いやすい位置にある、あるいは別個に@key{Delete}キーがないという理由によって、前の文字の削除に@key{Backspace}キーを使うことを好むかもしれない。この場合には@key{Backspace}キーに@key{Delete}のように振る舞わせる必要がある。いくつかの方法がある。

@itemize @minus
@item
いくつかの端末(例: VT3##端末)や端末エミュレータ(例:
TeraTerm)では、セットアップメニューから@key{Backspace}キーが生成する文字を変更できる。

@item
完全にプログラム可能なキーボードや、任意のキーから別の任意のキーへのリマップをサポートする端末エミュレータを入手できるかもしれない。

@item
Emacs 21.1以降ではオプション@code{normal-erase-is-backspace-mode}のカスタマイズ、または@kbd{M-x
normal-erase-is-backspace}呼び出しにより、ダム端末およびウィンドウ化されたディスプレーの両方において、@key{Backspace}キーおよび@key{Delete}キーの効果を制御できる。詳細についてはこれらのシンボルのドキュメントについては、@ref{Emacs
Lisp documentation}を参照のこと。

@item
Emacs内部では@key{Backspace}キーと@key{DEL}キーを交換できる:

@lisp
(keyboard-translate ?\C-h ?\C-?)
@end lisp

@noindent
これはたとえ@key{DEL}を@code{delete-backward-char}以外の何かにバインドするモードでも機能するので、@key{Backspace}を@key{DEL}のように動作させる際の推奨方法である。

同じように@key{DEL}が@kbd{C-d} (デフォルトでは前方に削除)のように振る舞うようにリマップできる:

@lisp
(keyboard-translate ?\C-? ?\C-d)
@end lisp

@code{keyboard-translate}についての詳細は@ref{Swapping keys}を参照のこと。

@item
別のアプローチとしてはキーバインディングを切り替えて、かわりに@kbd{C-x h}をヘルプにする:

@lisp
(global-set-key "\C-h" 'delete-backward-char)

;; mark-whole-bufferをオーバーライドする
(global-set-key "\C-xh" 'help-command)
@end lisp

@noindent
とはいえこの手法は推奨しない。これは@key{DEL}を@code{delete-backward-char}にバインドするモードにたいしてのみ問題を解決する。@code{view-mode}モードのように@key{DEL}を別の何かにバインドするモードは、@key{Backspace}キーを押下した際に期待通り動作しないだろう。この理由により、えわたしたちは上述した@code{keyboard-translate}手法をお勧めする。

ヘルプ用として他に人気のあるキーバインディングは@kbd{M-?}と@kbd{C-x ?}である。
@end itemize

@key{DEL}にたいしてローカルバインディングをもちモードが多数あり、それらと干渉するかもしれないので、@key{DEL}に@code{help-command}をバインドしようとしてはならない。

@end itemize

ウィンドウ化されたディスプレーでEmacs
21以降を実行する場合には、これらのシステムでのキーボード操作とEmacsの矛盾が少なくなるように、@key{Delete}をポイント位置の文字を削除するコマンドにバインドします。

この問題の解決についての詳細は@ref{DEL Does Not Delete, , If @key{DEL} Fails to Delete,
emacs, The GNU Emacs Manual}を参照してください。

@node Swapping keys
@section How do I swap two keys?
@cindex Swapping keys
@cindex Keys, swapping
@cindex @code{keyboard-translate}

@code{keyboard-translate}を使用して2つのキー(またはキーシーケンス)を交換できます。たとえば@kbd{C-h}を@key{DEL}、@key{DEL}を@kbd{C-h}にするには、

@lisp
(keyboard-translate ?\C-h ?\C-?)  ; 'C-h'をDELに変換
(keyboard-translate ?\C-? ?\C-h)  ; DELを'C-h'に変換
@end lisp

@noindent
関数の後のキーシーケンスの1つ目はキーボードが何を生成するかを識別、2つ目はキーマップでそれが何にマッチするかを指定します。

しかし@kbd{C-h}と@key{DEL}の特別なケースにおいては、@code{keyboard-translate}呼び出しではなく@code{normal-erase-is-backspace-mode}を切り替えるべきです。@ref{DEL
Does Not Delete,,, emacs, The GNU Emacs Manual}を参照してください。

キーボードの変換(translation)はキーマップのキーバインディングと同じではありません。Emacsには異なる状況に適用するために数々のキーマップがありますが、キーボード変換は1セットしかなく、Emacsが端末から文字を読み取るたびにそれが適用されます。キーボード変換は入力プロセスのもっとも低いレベルで行われます。キーマップに照合される文字にはキーボード変換された結果の文字が含まれています。

@node Producing C-XXX with the keyboard
@section How do I produce C-XXX with my keyboard?
@cindex Producing control characters
@cindex Generating control characters
@cindex Control characters, generating

(X配下ではない)端末で一般的ないくつかの``エイリアス''です:

@table @asis

@item @kbd{C-2}や@kbd{C-@key{SPC}}
@kbd{C-@@}

@item @kbd{C-6}
@kbd{C-^}

@item @kbd{C-7}や @kbd{C-S--}
@kbd{C-_}

@item @kbd{C-4}
@kbd{C-\}

@item @kbd{C-5}
@kbd{C-]}

@item @kbd{C-/}
@kbd{C-?}

@end table

多くの場合は他にもエイリアスが存在します。あなたのキーボードで@kbd{C-h
c}コマンドを使って、@key{CTRL}とすべての数字を試して何が生成されるか確認してみてください。コマンド名が判っていれば@kbd{C-h
w}コマンドを試してみることもできます。

@node No Meta key
@section What if I don't have a @key{Meta} key?
@cindex No @key{Meta} key
@cindex @key{Meta} key, what to do if you lack it

多くのキーボードでは、@key{Alt}キーは@key{Meta}のように振る舞うので試してみてください。

@kbd{M-a}のかわりに@kbd{@key{ESC}
a}とタイプすることができます。実際のところ、いずれにせよEmacsｈｓ内部で@kbd{M-a}を@kbd{@key{ESC}
a}に変換しています(@code{meta-prefix-char}の値による)。@key{Meta}と@kbd{a}は一緒に押しますが、@key{ESC}の場合には@key{ESC}を押して、離した後に@kbd{a}を押下することに注意してください。

@node No Escape key
@section What if I don't have an @key{Escape} key?
@cindex No Escape key
@cindex Lacking an Escape key
@cindex Escape key, lacking

かわりに@kbd{C-[}をタイプしてください。これはエスケープキーのように@acronym{ASCII}コードの27を送信するはずです。@kbd{C-3}でも機能する端末もあります(X配下でないこと)。多くの端末(特にDEC)では、@key{F11}が@key{ESC}を生成します。そうでなければ、以下のフォームを使用してこれをバインドできます:

@lisp
;; DEC端末ではF11はESCの置き換えとドキュメントされている
(define-key function-key-map [f11] [?\e])
@end lisp

@node Compose Character
@section Can I make my @key{Compose Character} key behave like a @key{Meta} key?
@cindex @key{Compose Character} key, using as @key{Meta}
@cindex @key{Meta}, using @key{Compose Character} for

VT220のようなダム端末ではできません。噂では特定のVT220クローンは、この方法で設定することによって独自に@key{Compose}キーをもてるようです。Xを使用していれば、@code{xmodmap}コマンドでこれを行うことができるかもしれません。

@node Binding combinations of modifiers and function keys
@section How do I bind a combination of modifier key and function key?
@cindex Modifiers and function keys
@cindex Function keys and modifiers
@cindex Binding modifiers and function keys

ファンクションキーのシンボルにプレフィクスを追加することによって、ベクターフォーマットで修飾されたファンクションキーを表すことができます。たとえば(Emacsドキュメントより):

@lisp
(global-set-key [?\C-x right] 'forward-page)
@end lisp

@noindent
ここで@samp{?\C-x}は文字@kbd{C-x}にたいするLisp文字定数です。

ファンクションキーとともに@key{Control}、@key{Meta}、@key{Hyper}、@key{Super}、@key{Alt}、@key{Shift}の修飾キーが使用できます。これらの修飾キーを表現するにはシンボル名の前に@samp{C-}、@samp{M-}、@samp{H-}、@samp{s-}、@samp{A-}@samp{S-}を前置します。以下は@kbd{H-M-RIGHT}を単語1つ前方に移動にする方法です:

@lisp
(global-set-key [H-M-right] 'forward-word)
@end lisp

@itemize @bullet

@item
すべての修飾キーがどんな状況でも許されている訳ではありません。Unix文字端末では@key{Hyper}、@key{Super}、@key{Alt}は利用できません。この種の状況下では非@acronym{ASCII}キーとマウスイベント(たとえば@kbd{C-=}や@kbd{mouse-1})も失敗します。

@end itemize

キーバインディングについての一般的な説明については@ref{Binding keys to commands}を参照してください。

@node Meta key does not work in xterm
@section Why doesn't my @key{Meta} key work in an @code{xterm} window?
@cindex @key{Meta} key and @code{xterm}
@cindex Xterm and @key{Meta} key

@ref{Unibyte Mode,, Single-Byte Character Set Support, emacs, The GNU Emacs
Manual}を参照してください。

Emacsマニュアルのアドバイスが失敗した場合には、更なる助けを求める前に以下の方法すべてを試してみてください:

@itemize @bullet

@item
ウィンドウマネージャーに@code{mwm}を使用することによって大きな問題を抱えているのかもしれない(@file{mwm}のEmacsで@key{Meta}キーが使用できるようにする汎用的で優れた解決策を知る人は居ないだろうか?)。

@item
X11ではそれが本当に@key{Meta}キーなのか確認してほしい。あなたの@key{Meta}キーがどんなを生成するかを確認するには@code{xev}を使用する。@code{Meta_L}か@code{Meta_R}のいずれかのはずだが、もし違うならこの状況を修整するために@file{xmodmap}を使用できる。@key{Meta}は@code{Meta_L}や@code{Meta_R}を生成しないものの@kbd{M-x}は非@acronym{ASCII}文字を生成するようなら、以下を@file{~/.Xdefaults}ファイルに記述する:

@example
 XTerm*eightBitInput:   false
 XTerm*eightBitOutput:  true
@end example

@item
@code{xterm}が使用している@code{pty}は8ビット文字を通すか確認すること。@samp{stty -a}
(あるいは@samp{stty
everything})がどこかに@samp{cs8}と表示するはずである。かわりに@samp{cs7}が表示されたら、これを修整するために@samp{stty
cs8 -istrip} (あるいは@samp{stty pass8})を使用する。

@item
@code{xterm}とEmacsの間に@code{rlogin}接続が存在する場合には、各文字の8ビット目をすべて渡すように、rloginに@samp{-8}引数を与える必要があるかもしれない。

@item
UltrixでEmacsを実行しているなら、@code{(set-input-mode t nil)}の評価が助けになると報告されている。

@item
他のすべてが失敗したら、@kbd{M-W}のタイプ時に@code{xterm}に@kbd{@key{ESC}
W}を生成させることができる。これはいずれにせよ@kbd{M-W}を受け取ったときにEmacsが行うであろう変換と同じである。X11R4では以下のリソース仕様でこれを行うことができるだろう:

@example
XTerm.VT100.EightBitInput: false
@end example

@noindent
(これは@code{insert-eight-bit}アクションの振る舞いを変更する。)

古い@code{xterm}ではtranslationでこの挙動を指定できる:

@example
XTerm.VT100.Translations: #override \
  Meta<KeyPress>: string(0x1b) insert()
@end example

@noindent
@samp{Meta}を@samp{Alt}に置き換える必要があるかもしれない。

@end itemize

@node ExtendChar key does not work as Meta
@section Why doesn't my @key{ExtendChar} key work as a @key{Meta} key under HP-UX 8.0 and 9.x?
@cindex @key{ExtendChar} key as @key{Meta}
@cindex @key{Meta}, using @key{ExtendChar} for
@cindex HP-UX, the @key{ExtendChar} key

これはX11R4における国際家拡張の結果であるとともに、HPが現在はこの拡張を使用しているという事実を示しています。Emacsは@key{Meta}キーの状態に関わらず@code{XLookupString}関数が同じ結果をリターンするという、もはや必ずしも真とは言えない前提にもとづいています。Emacsが修整されるまでは、その場しのぎの一時的な修整ですがXサーバー起動後に毎回、できればxtermクライアント開始前に以下のコマンドを実行してください:

@example
xmodmap -e 'remove mod1 = Mode_switch'
@end example

@c FIXME: Emacs 21 supports I18N in X11; does that mean that this bug is
@c solved?

これはシステムワイドで追加のkeysymを無効にします。これはあなたが実際にそれらを使用つもりなら不本意かもしれません。

@node SPC no longer completes file names
@section Why doesn't @key{SPC} complete file names anymore?
@cindex @kbd{SPC} file name completion

Emacs
22.1から@kbd{SPC}はミニバッファーでファイル名の補完を行わなくなったので、スペースが埋め込まれたファイル名のタイプにおいてスペースをクォートする必要がなくなりました。

以下のようにミニバッファーで@kbd{SPC}を@code{minibuffer-complete-word}にバインドすることによって古い挙動を取り戻すことができます:

@lisp
(define-key minibuffer-local-filename-completion-map (kbd "SPC")
  'minibuffer-complete-word)

(define-key minibuffer-local-must-match-filename-map (kbd "SPC")
  'minibuffer-complete-word)
@end lisp

@c ------------------------------------------------------------
@node Alternate character sets
@chapter Alternate character sets
@cindex Alternate character sets

@menu
* Emacs does not display 8-bit characters::
* Inputting eight-bit characters::
* Right-to-left alphabets::
* How to add fonts::         
@end menu

@node Emacs does not display 8-bit characters
@section How do I make Emacs display 8-bit characters?
@cindex Displaying eight-bit characters
@cindex Eight-bit characters, displaying

@ref{Unibyte Mode,, Single-byte Character Set Support, emacs, The GNU Emacs
Manual}を参照してください。Unixのテキストのみの端末ディスプレー、あるいは@samp{emacs
-nw}呼び出しでEmacsを実行する際には、たとえ言語環境を設定後であっても、通常は@code{set-terminal-coding-system}を使用してその端末で表示可能なものをEmacsに伝える必要があります。さもないと非@acronym{ASCII}文字は@samp{?}と表示されるでしょう。他のMS-DOSやMS-Windowsのようなオペレーティングシステムでは、ディスプレーがサポートする文字についてEmacsがOSに問い合わせて、必要となる端末コーディングシステムを自動的にセットアップします。

@node Inputting eight-bit characters
@section How do I input eight-bit characters?
@cindex Entering eight-bit characters
@cindex Eight-bit characters, entering
@cindex Input, 8-bit characters

8ビット文字の入力には様々なメソッドが利用できます。@ref{Unibyte Mode,, Single-byte Character Set
Support, emacs, The GNU Emacs Manual}を参照してください。より洗練されたメソッドについては@ref{Input
Methods,,, emacs, The GNU Emacs Manual}を参照してください。

@node Right-to-left alphabets
@section Where is an Emacs that can handle Semitic (right-to-left) alphabets?
@cindex Right-to-left alphabets
@cindex Hebrew, handling with Emacs
@cindex Semitic alphabets
@cindex Arabic
@cindex Farsi
@cindex bidirectional scripts

バージョン24.1以降のEmacsではアラビア語、ペルシア語、ヘブライ語のような双方向スクリプト(bidirectional
script)の表示と編集がサポートされています。@ref{New in Emacs 24, bidirectional
display}を参照してください。


@node How to add fonts
@section How do I add fonts for use with Emacs?
@cindex add fonts for use with Emacs
@cindex intlfonts

まずBDFフォントファイル、およびそれらが必要とするすべての補助パッケージをダウンロードしてインストールしてください。GNU
Intlfontsディストリビューションは@uref{https://directory.fsf.org/localization/intlfonts.html,
the GNU Software Directory Web site}で見つけることができます。

次にXウィンドウシステムの場合には、シェルプロンプトから以下の2つのコマンドを実行してください:

@example
  xset +fp /usr/local/share/emacs/fonts
  xset fp rehash
@end example

@noindent
(@file{/usr/local/share/emacs/fonts}以外の場所にフォントをインストールしていたら1つ目のコマンドは変更が必要。)
たとえば@file{~/.xsessionrc}や@file{~/.gnomerc}のようなウィンドウシステムのスタートアップファイルに追加する等、ログイン時いつでもこれら2つのコマンドが実行されるようにアレンジも必要でしょう。

それでは以下の行をinitファイル@file{~/.emacs}に追加してください:

@lisp
  (add-to-list 'bdf-directory-list "/usr/share/emacs/fonts/bdf")
@end lisp

@noindent
(繰り返しになるが、別の場所にフォントをインストールしていたらファイル名は変更すること。)

最後に@code{ps-print}でインストール済みフォントを使用したければ、以下の行を@file{~/.emacs}に追加してください:

@lisp
  (setq ps-multibyte-buffer 'bdf-font-except-latin)
@end lisp

MS-Windowsでは追加でいくつかのステップが必要です。以下にリストします。

まずBDFフォントファイルがある@emph{すべて}のディレクトリーが@code{bdf-directory-list}に記述されていることを確認してください。UnixおよびGNU/Linuxシステムでは同一ディレクトリーにBDFフォントをインストールするために@kbd{make
install}を実行します。それとは対照的にWindowsユーザーは通常はIntlfontsインストールコマンドは実行せずに、どこかのディレクトリーにディストリビューションを解凍してください。このディレクトリーにはBDFフォントがあるサブディレクトリーが含まれています。たとえば@file{C:/Intlfonts}にIntlfontsを解凍したとすると、以下のように@code{bdf-directory-list}をセットする必要があります:

@lisp
  (setq bdf-directory-list
    '("C:/Intlfonts/Asian"
      "C:/Intlfonts/Chinese" "C:/Intlfonts/Chinese.X"
      "C:/Intlfonts/Chinese.BIG" "C:/Intlfonts/Ethiopic"
      "C:/Intlfonts/European" "C:/Intlfonts/European.BIG"
      "C:/Intlfonts/Japanese" "C:/Intlfonts/Japanese.X"
      "C:/Intlfonts/Japanese.BIG" "C:/Intlfonts/Korean.X"
      "C:/Intlfonts/Misc"))
@end lisp

@cindex @code{w32-bdf-filename-alist}
@cindex @code{w32-find-bdf-fonts}
次は変数@code{w32-bdf-filename-alist}にBDFフォントのエイリアスとそれらに応じたファイル名をセットする必要があります。BDFフォントファイルのすべてのディレクトリーを@code{bdf-directory-list}にセットしたとすると、以下のLispコードで@code{w32-bdf-filename-alist}がセットアップされるはずです:

@lisp
  (setq w32-bdf-filename-alist
     (w32-find-bdf-fonts bdf-directory-list))
@end lisp

今度はBDFフォント用にフォントセットを作成します:

@smallexample
  (create-fontset-from-fontset-spec
   "-*-fixed-medium-r-normal-*-16-*-*-*-c-*-fontset-bdf,
   japanese-jisx0208:-*-*-medium-r-normal-*-16-*-*-*-c-*-jisx0208.1983-*,
   katakana-jisx0201:-*-*-medium-r-normal-*-16-*-*-*-c-*-jisx0201*-*,
   latin-jisx0201:-*-*-medium-r-normal-*-16-*-*-*-c-*-jisx0201*-*,
   japanese-jisx0208-1978:-*-*-medium-r-normal-*-16-*-*-*-c-*-jisx0208.1978-*,
   thai-tis620:-misc-fixed-medium-r-normal--16-160-72-72-m-80-tis620.2529-1,
   lao:-misc-fixed-medium-r-normal--16-160-72-72-m-80-MuleLao-1,
   tibetan-1-column:-TibMdXA-fixed-medium-r-normal--16-160-72-72-m-80-MuleTibetan-1,
   ethiopic:-Admas-Ethiomx16f-Medium-R-Normal--16-150-100-100-M-160-Ethiopic-Unicode,
   tibetan:-TibMdXA-fixed-medium-r-normal--16-160-72-72-m-160-MuleTibetan-0")
@end smallexample

Intlfontsの国際化BDFフォントの多くはタイプ0なので、font-encoding-alistに追加する必要があります:

@lisp
  (setq font-encoding-alist
        (append '(("MuleTibetan-0" (tibetan . 0))
                  ("GB2312"        (chinese-gb2312 . 0))
                  ("JISX0208"      (japanese-jisx0208 . 0))
                  ("JISX0212"      (japanese-jisx0212 . 0))
                  ("VISCII"        (vietnamese-viscii-lower . 0))
                  ("KSC5601"       (korean-ksc5601 . 0))
                  ("MuleArabic-0"  (arabic-digit . 0))
                  ("MuleArabic-1"  (arabic-1-column . 0))
                  ("MuleArabic-2"  (arabic-2-column . 0)))
                font-encoding-alist))
@end lisp

これでEmacsのフォントメニュー、あるいは@file{~/.emacs}でデフォルトフォントを設定することにより、@samp{bdf: 16-dot
medium}の選択ができるようになりました。 

@lisp
  (set-frame-font "fontset-bdf")
@end lisp


@c ------------------------------------------------------------
@node Mail and news
@chapter Mail and news
@cindex Mail and news

@menu
* Changing the included text prefix::
* Saving a copy of outgoing mail::
* Expanding aliases when sending mail::
* Sorting the messages in an Rmail folder::
* Rmail writes to /var/spool/mail::
* Replying to the sender of a message::
* Automatically starting a mail or news reader::
* Reading news with Emacs::
* Making Gnus faster::
* Catching up in all newsgroups::  
@end menu

@node Changing the included text prefix
@section How do I change the included text prefix in mail/news followups?
@cindex Prefix in mail/news followups, changing
@cindex Included text prefix, changing
@cindex Setting the included text character
@cindex Quoting in mail messages

メールをRmailで読んでいる場合には変数@code{mail-yank-prefix}、Gnusなら@code{message-yank-prefix}、VMなら@code{vm-included-text-prefix}、mh-eなら@code{mh-ins-buf-prefix}をセットしてください。

より装飾的に引用を制御するにはSupercite(@ref{Top,, the Supercite Manual, sc, The Supercite
Manual}を参照)を使用してください。

Emacsが返信先メッセージの様々なヘッダーを含めないようにするには、@code{mail-yank-ignored-headers}の値に適切な正規表現をセットしてください。

@node Saving a copy of outgoing mail
@section How do I save a copy of outgoing mail?
@cindex Saving a copy of outgoing mail
@cindex Copying outgoing mail to a file
@cindex Filing outgoing mail
@cindex Automatic filing of outgoing mail
@cindex Mail, saving outgoing automatically

メールメッセージの@samp{BCC}ヘッダーに自分を含めて自分にコピーをメールしたり、あるいは@samp{FCC}ヘッダーにファイルを含めてメッセージのコピーを直接保存できます。

標準的なメールを使用しているなら、以下を@file{.emacs}ファイル記述して自分への@samp{BCC}を自動的に作成できます。

@lisp
(setq mail-self-blind t)
@end lisp

@noindent
以下のような行を@file{.emacs}ファイルに記述すれば、自動的に@samp{FCC}フィールドを含めることができます:

@lisp
(setq mail-archive-file-name (expand-file-name "~/outgoing"))
@end lisp

出力ファイルは Unixのメール形式になります。

@code{mh-e}を使用しているなら@samp{FCC}と@samp{BCC}のフィールドをコンポーネントファイルに加えてください。

@file{.mailrc}に@samp{set record filename}を記述しても機能しません。

@node Expanding aliases when sending mail
@section Why doesn't Emacs expand my aliases when sending mail?
@cindex Expanding aliases when sending mail
@cindex Mail alias expansion
@cindex Sending mail with aliases

@ref{Mail Aliases,, The Emacs Manual, emacs, The Emacs Manual}を参照してください。

@itemize @bullet

@item
 Emacsは通常はメール送信の際にエイリアスを展開する。送信前に展開するには@kbd{M-x expand-mail-aliases}を使用する。

@item
Emacsは通常はセッションごとに1回、最初のメールメッセージを作成するときしか@file{.mailrc}ファイルを読み込まない。その後にファイルを編集したら@kbd{M-x
build-mail-aliases}を使用してEmacsに再読み込みさせることができる。これはEmacs
24.1以前は対話的なコマンドではないので、かわりに@kbd{M-: (build-mail-aliases)
@key{RET}}とタイプしなければならない。

@item
もしも望むならabbrevとしてタイプすればすぐにメールエイリアスを展開できる。この機能を有効にするには以下を実行する:

@lisp
(add-hook 'mail-mode-hook 'mail-abbrevs-setup)
@end lisp

エイリアスは単語区切り文字(@key{RET}や@kbd{,})をタイプした後でのみ自動的に展開される。エイリアス終端にポイントを移動して@kbd{C-x
a e} (@kbd{M-x expand-abbrev})をタイプして強制的に展開させることができる。
@end itemize

@node Sorting the messages in an Rmail folder
@section How can I sort the messages in my Rmail folder?
@cindex Rmail, sorting messages in
@cindex Folder, sorting messages in an Rmail
@cindex Sorting messages in an Rmail folder

Rmailでソート関数とそれらのキーバインディングのリストを得るには@kbd{C-c C-s C-h}とタイプします。

@node Rmail writes to /var/spool/mail
@section Why does Rmail need to write to @file{/var/spool/mail}?
@cindex Rmail and @file{/var/spool/mail}
@cindex @file{/var/spool/mail} and Rmail

これはRmailが使用する@code{movemail}プログラムの振る舞いです。これは@code{movemail}がロックファイルを使うように設定されていることを示しています。

RMSは記しています:

@quotation
特定のシステムではメールファイルへのアクセスをインターロックするためにロックファイルが必要です。これらのシステムでは@code{movemail}はロックファイルに書き込まなければなりません。さもないとメールを失うリスクがあるからです。あなたはただ@code{movemail}にロックファイルを書き込ませるようアレンジしなければなりません。

他のシステムではインターロックアクセスのために@code{flock}システムコールを使用します。これらのシステムでは@code{flock}を使用するように@code{movemail}を設定するべきです。
@end quotation

@node Replying to the sender of a message
@section How can I force Rmail to reply to the sender of a message, but not the other recipients?
@cindex Replying only to the sender of a message
@cindex Sender, replying only to
@cindex Rmail, replying to the sender of a message in

@c isaacson@@seas.upenn.edu
Ron Isaacsonは述べています:
Rmailで返信するために@kbd{r}をタイプすると、デフォルトでは元の受信者すべて(元の@samp{To}と@samp{CC}のリスト全員)にCCされます。(@kbd{r}の前に@kbd{C-u}をタイプして)プレフィクス引数を指定すると、送信者だけに返信します。とはいえ返信したいときに全体を通して@kbd{C-u}作業を行うのは苦痛です。以下はわたしがこれに対処した中では最良の修整です。

@lisp
(defun rmail-reply-t ()
  "カレントメッセージの送信者だけに返信する(rmail-replyを参照)"
  (interactive)
  (rmail-reply t))

(add-hook 'rmail-mode-hook
  (lambda ()
    (define-key rmail-mode-map "r" 'rmail-reply-t)
    (define-key rmail-mode-map "R" 'rmail-reply)))
@end lisp

@node Automatically starting a mail or news reader
@section How do I make Emacs automatically start my mail/news reader?
@cindex Mail reader, starting automatically
@cindex News reader, starting automatically
@cindex Starting mail/news reader automatically

EmacsをGnusで開始するには:

@example
emacs -f gnus
@end example

@noindent
Rmailでは:

@example
emacs -f rmail
@end example

Gnusでより便利に開始するには:

@example
alias gnus 'emacs -f gnus'
gnus
@end example

@file{.emacs}ファイルから自動的にメールやニュースを開始するのは、恐らく賢明ではないでしょう。これは同時に2つのEmacsを実行する必要がある場合には問題を起こすかもしれません。更に必要な際に素早くEmacsを開始するのが困難になるかもしれません。

@node Reading news with Emacs
@section How do I read news under Emacs?
@cindex Reading news under Emacs
@cindex Usenet reader in Emacs
@cindex Gnus newsreader
@cindex FAQ for Gnus
@cindex Gnus FAQ
@cindex Learning more about Gnus

@kbd{M-x gnus}を使用します。@ref{Frequently Asked Questions,, the Gnus FAQ, gnus,
The Gnus Manual}に含まれている@ref{Top,, the Gnus Manual, gnus, The Gnus
Manual}を参照してください。


@node Making Gnus faster
@section How do I make Gnus faster?
@cindex Faster, starting Gnus
@cindex Starting Gnus faster
@cindex Gnus, starting faster
@cindex Slow catch up in Gnus
@cindex Gnus is slow when catching up
@cindex Crosspostings make Gnus catching up slow

Gnus FAQ(@ref{Reading news with Emacs}を参照)から引用します:

@quotation
古いマシンの場合、あるいは実際にじれったいだけなら、Gnusの実行を高速にするためにできることがあります。

起動をより高速にするためには@code{gnus-check-new-newsgroups}と@code{gnus-check-bogus-newsgroups}に@code{nil}をセットしてください。

summaryバッファーへの出入りをより高速にするために@code{gnus-show-threads}、@code{gnus-nov-is-evil}、@code{gnus-use-cross-reference}に@code{nil}をセットしてください。
@end quotation

@node Catching up in all newsgroups
@section How do I catch up all newsgroups in Gnus?
@cindex Catching up all newsgroups in Gnus
@cindex Gnus, Catching up all newsgroups in

@file{*Newsgroup*}バッファーで@kbd{M-< C-x ( c y C-x ) M-0 C-x e}とタイプします。

@file{*Newsgroup*}バッファーのポイント位置からバッファー終端までを確認したいだけなら、先頭の@kbd{M-<}は省略してください。

@node Concept index
@unnumbered Concept Index
@printindex cp

@bye
